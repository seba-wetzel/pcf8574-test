
pcf8574-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002adc  08002adc  00012adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b10  08002b10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b10  08002b10  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b10  08002b10  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b10  08002b10  00012b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b14  08002b14  00012b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002b24  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002b24  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007eea  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014c5  00000000  00000000  00027f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008d0  00000000  00000000  000293e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000838  00000000  00000000  00029cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013037  00000000  00000000  0002a4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006b1b  00000000  00000000  0003d527  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00068c31  00000000  00000000  00044042  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000acc73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023e8  00000000  00000000  000accf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ac4 	.word	0x08002ac4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002ac4 	.word	0x08002ac4

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f945 	bl	80003ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fb28 	bl	80027bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f95d 	bl	8000456 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 f925 	bl	8000402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000030 	.word	0x20000030

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000030 	.word	0x20000030

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	db0b      	blt.n	80002e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	f003 021f 	and.w	r2, r3, #31
 80002d0:	4906      	ldr	r1, [pc, #24]	; (80002ec <__NVIC_EnableIRQ+0x34>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	095b      	lsrs	r3, r3, #5
 80002d8:	2001      	movs	r0, #1
 80002da:	fa00 f202 	lsl.w	r2, r0, r2
 80002de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	2b00      	cmp	r3, #0
 8000302:	db0a      	blt.n	800031a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	b2da      	uxtb	r2, r3
 8000308:	490c      	ldr	r1, [pc, #48]	; (800033c <__NVIC_SetPriority+0x4c>)
 800030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030e:	0112      	lsls	r2, r2, #4
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	440b      	add	r3, r1
 8000314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000318:	e00a      	b.n	8000330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4908      	ldr	r1, [pc, #32]	; (8000340 <__NVIC_SetPriority+0x50>)
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 030f 	and.w	r3, r3, #15
 8000326:	3b04      	subs	r3, #4
 8000328:	0112      	lsls	r2, r2, #4
 800032a:	b2d2      	uxtb	r2, r2
 800032c:	440b      	add	r3, r1
 800032e:	761a      	strb	r2, [r3, #24]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000e100 	.word	0xe000e100
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000344:	b480      	push	{r7}
 8000346:	b089      	sub	sp, #36	; 0x24
 8000348:	af00      	add	r7, sp, #0
 800034a:	60f8      	str	r0, [r7, #12]
 800034c:	60b9      	str	r1, [r7, #8]
 800034e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f003 0307 	and.w	r3, r3, #7
 8000356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000358:	69fb      	ldr	r3, [r7, #28]
 800035a:	f1c3 0307 	rsb	r3, r3, #7
 800035e:	2b04      	cmp	r3, #4
 8000360:	bf28      	it	cs
 8000362:	2304      	movcs	r3, #4
 8000364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3304      	adds	r3, #4
 800036a:	2b06      	cmp	r3, #6
 800036c:	d902      	bls.n	8000374 <NVIC_EncodePriority+0x30>
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	3b03      	subs	r3, #3
 8000372:	e000      	b.n	8000376 <NVIC_EncodePriority+0x32>
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800037c:	69bb      	ldr	r3, [r7, #24]
 800037e:	fa02 f303 	lsl.w	r3, r2, r3
 8000382:	43da      	mvns	r2, r3
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	401a      	ands	r2, r3
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800038c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	fa01 f303 	lsl.w	r3, r1, r3
 8000396:	43d9      	mvns	r1, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039c:	4313      	orrs	r3, r2
         );
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3724      	adds	r7, #36	; 0x24
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b8:	d301      	bcc.n	80003be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ba:	2301      	movs	r3, #1
 80003bc:	e00f      	b.n	80003de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003be:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <SysTick_Config+0x40>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003c6:	210f      	movs	r1, #15
 80003c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003cc:	f7ff ff90 	bl	80002f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <SysTick_Config+0x40>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003d6:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <SysTick_Config+0x40>)
 80003d8:	2207      	movs	r2, #7
 80003da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003dc:	2300      	movs	r3, #0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	e000e010 	.word	0xe000e010

080003ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f7ff ff2d 	bl	8000254 <__NVIC_SetPriorityGrouping>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000402:	b580      	push	{r7, lr}
 8000404:	b086      	sub	sp, #24
 8000406:	af00      	add	r7, sp, #0
 8000408:	4603      	mov	r3, r0
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
 800040e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000414:	f7ff ff42 	bl	800029c <__NVIC_GetPriorityGrouping>
 8000418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	68b9      	ldr	r1, [r7, #8]
 800041e:	6978      	ldr	r0, [r7, #20]
 8000420:	f7ff ff90 	bl	8000344 <NVIC_EncodePriority>
 8000424:	4602      	mov	r2, r0
 8000426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800042a:	4611      	mov	r1, r2
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff5f 	bl	80002f0 <__NVIC_SetPriority>
}
 8000432:	bf00      	nop
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	b082      	sub	sp, #8
 800043e:	af00      	add	r7, sp, #0
 8000440:	4603      	mov	r3, r0
 8000442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff35 	bl	80002b8 <__NVIC_EnableIRQ>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b082      	sub	sp, #8
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ffa2 	bl	80003a8 <SysTick_Config>
 8000464:	4603      	mov	r3, r0
}
 8000466:	4618      	mov	r0, r3
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000470:	b480      	push	{r7}
 8000472:	b08b      	sub	sp, #44	; 0x2c
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800047a:	2300      	movs	r3, #0
 800047c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800047e:	2300      	movs	r3, #0
 8000480:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000482:	e127      	b.n	80006d4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000484:	2201      	movs	r2, #1
 8000486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000488:	fa02 f303 	lsl.w	r3, r2, r3
 800048c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	69fa      	ldr	r2, [r7, #28]
 8000494:	4013      	ands	r3, r2
 8000496:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000498:	69ba      	ldr	r2, [r7, #24]
 800049a:	69fb      	ldr	r3, [r7, #28]
 800049c:	429a      	cmp	r2, r3
 800049e:	f040 8116 	bne.w	80006ce <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	2b12      	cmp	r3, #18
 80004a8:	d034      	beq.n	8000514 <HAL_GPIO_Init+0xa4>
 80004aa:	2b12      	cmp	r3, #18
 80004ac:	d80d      	bhi.n	80004ca <HAL_GPIO_Init+0x5a>
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	d02b      	beq.n	800050a <HAL_GPIO_Init+0x9a>
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d804      	bhi.n	80004c0 <HAL_GPIO_Init+0x50>
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d031      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d01c      	beq.n	80004f8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004be:	e048      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d043      	beq.n	800054c <HAL_GPIO_Init+0xdc>
 80004c4:	2b11      	cmp	r3, #17
 80004c6:	d01b      	beq.n	8000500 <HAL_GPIO_Init+0x90>
          break;
 80004c8:	e043      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004ca:	4a89      	ldr	r2, [pc, #548]	; (80006f0 <HAL_GPIO_Init+0x280>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d026      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004d0:	4a87      	ldr	r2, [pc, #540]	; (80006f0 <HAL_GPIO_Init+0x280>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d806      	bhi.n	80004e4 <HAL_GPIO_Init+0x74>
 80004d6:	4a87      	ldr	r2, [pc, #540]	; (80006f4 <HAL_GPIO_Init+0x284>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d020      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004dc:	4a86      	ldr	r2, [pc, #536]	; (80006f8 <HAL_GPIO_Init+0x288>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d01d      	beq.n	800051e <HAL_GPIO_Init+0xae>
          break;
 80004e2:	e036      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004e4:	4a85      	ldr	r2, [pc, #532]	; (80006fc <HAL_GPIO_Init+0x28c>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d019      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004ea:	4a85      	ldr	r2, [pc, #532]	; (8000700 <HAL_GPIO_Init+0x290>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d016      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004f0:	4a84      	ldr	r2, [pc, #528]	; (8000704 <HAL_GPIO_Init+0x294>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d013      	beq.n	800051e <HAL_GPIO_Init+0xae>
          break;
 80004f6:	e02c      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	623b      	str	r3, [r7, #32]
          break;
 80004fe:	e028      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	3304      	adds	r3, #4
 8000506:	623b      	str	r3, [r7, #32]
          break;
 8000508:	e023      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	3308      	adds	r3, #8
 8000510:	623b      	str	r3, [r7, #32]
          break;
 8000512:	e01e      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	330c      	adds	r3, #12
 800051a:	623b      	str	r3, [r7, #32]
          break;
 800051c:	e019      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d102      	bne.n	800052c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000526:	2304      	movs	r3, #4
 8000528:	623b      	str	r3, [r7, #32]
          break;
 800052a:	e012      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d105      	bne.n	8000540 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000534:	2308      	movs	r3, #8
 8000536:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	69fa      	ldr	r2, [r7, #28]
 800053c:	611a      	str	r2, [r3, #16]
          break;
 800053e:	e008      	b.n	8000552 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000540:	2308      	movs	r3, #8
 8000542:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	69fa      	ldr	r2, [r7, #28]
 8000548:	615a      	str	r2, [r3, #20]
          break;
 800054a:	e002      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]
          break;
 8000550:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000552:	69bb      	ldr	r3, [r7, #24]
 8000554:	2bff      	cmp	r3, #255	; 0xff
 8000556:	d801      	bhi.n	800055c <HAL_GPIO_Init+0xec>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	e001      	b.n	8000560 <HAL_GPIO_Init+0xf0>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3304      	adds	r3, #4
 8000560:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000562:	69bb      	ldr	r3, [r7, #24]
 8000564:	2bff      	cmp	r3, #255	; 0xff
 8000566:	d802      	bhi.n	800056e <HAL_GPIO_Init+0xfe>
 8000568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	e002      	b.n	8000574 <HAL_GPIO_Init+0x104>
 800056e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000570:	3b08      	subs	r3, #8
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	210f      	movs	r1, #15
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	fa01 f303 	lsl.w	r3, r1, r3
 8000582:	43db      	mvns	r3, r3
 8000584:	401a      	ands	r2, r3
 8000586:	6a39      	ldr	r1, [r7, #32]
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	431a      	orrs	r2, r3
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	2b00      	cmp	r3, #0
 800059e:	f000 8096 	beq.w	80006ce <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005a2:	4b59      	ldr	r3, [pc, #356]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a58      	ldr	r2, [pc, #352]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6193      	str	r3, [r2, #24]
 80005ae:	4b56      	ldr	r3, [pc, #344]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80005ba:	4a54      	ldr	r2, [pc, #336]	; (800070c <HAL_GPIO_Init+0x29c>)
 80005bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005be:	089b      	lsrs	r3, r3, #2
 80005c0:	3302      	adds	r3, #2
 80005c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ca:	f003 0303 	and.w	r3, r3, #3
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	220f      	movs	r2, #15
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	43db      	mvns	r3, r3
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	4013      	ands	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a4b      	ldr	r2, [pc, #300]	; (8000710 <HAL_GPIO_Init+0x2a0>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d013      	beq.n	800060e <HAL_GPIO_Init+0x19e>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a4a      	ldr	r2, [pc, #296]	; (8000714 <HAL_GPIO_Init+0x2a4>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d00d      	beq.n	800060a <HAL_GPIO_Init+0x19a>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a49      	ldr	r2, [pc, #292]	; (8000718 <HAL_GPIO_Init+0x2a8>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d007      	beq.n	8000606 <HAL_GPIO_Init+0x196>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a48      	ldr	r2, [pc, #288]	; (800071c <HAL_GPIO_Init+0x2ac>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d101      	bne.n	8000602 <HAL_GPIO_Init+0x192>
 80005fe:	2303      	movs	r3, #3
 8000600:	e006      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 8000602:	2304      	movs	r3, #4
 8000604:	e004      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 8000606:	2302      	movs	r3, #2
 8000608:	e002      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 800060a:	2301      	movs	r3, #1
 800060c:	e000      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 800060e:	2300      	movs	r3, #0
 8000610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000612:	f002 0203 	and.w	r2, r2, #3
 8000616:	0092      	lsls	r2, r2, #2
 8000618:	4093      	lsls	r3, r2
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	4313      	orrs	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000620:	493a      	ldr	r1, [pc, #232]	; (800070c <HAL_GPIO_Init+0x29c>)
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	089b      	lsrs	r3, r3, #2
 8000626:	3302      	adds	r3, #2
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000636:	2b00      	cmp	r3, #0
 8000638:	d006      	beq.n	8000648 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800063a:	4b39      	ldr	r3, [pc, #228]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	4938      	ldr	r1, [pc, #224]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	4313      	orrs	r3, r2
 8000644:	600b      	str	r3, [r1, #0]
 8000646:	e006      	b.n	8000656 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000648:	4b35      	ldr	r3, [pc, #212]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	43db      	mvns	r3, r3
 8000650:	4933      	ldr	r1, [pc, #204]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000652:	4013      	ands	r3, r2
 8000654:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065e:	2b00      	cmp	r3, #0
 8000660:	d006      	beq.n	8000670 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000662:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000664:	685a      	ldr	r2, [r3, #4]
 8000666:	492e      	ldr	r1, [pc, #184]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	4313      	orrs	r3, r2
 800066c:	604b      	str	r3, [r1, #4]
 800066e:	e006      	b.n	800067e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000670:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	43db      	mvns	r3, r3
 8000678:	4929      	ldr	r1, [pc, #164]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800067a:	4013      	ands	r3, r2
 800067c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000686:	2b00      	cmp	r3, #0
 8000688:	d006      	beq.n	8000698 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800068c:	689a      	ldr	r2, [r3, #8]
 800068e:	4924      	ldr	r1, [pc, #144]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	4313      	orrs	r3, r2
 8000694:	608b      	str	r3, [r1, #8]
 8000696:	e006      	b.n	80006a6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800069a:	689a      	ldr	r2, [r3, #8]
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	43db      	mvns	r3, r3
 80006a0:	491f      	ldr	r1, [pc, #124]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006a2:	4013      	ands	r3, r2
 80006a4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d006      	beq.n	80006c0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006b4:	68da      	ldr	r2, [r3, #12]
 80006b6:	491a      	ldr	r1, [pc, #104]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	60cb      	str	r3, [r1, #12]
 80006be:	e006      	b.n	80006ce <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006c2:	68da      	ldr	r2, [r3, #12]
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	43db      	mvns	r3, r3
 80006c8:	4915      	ldr	r1, [pc, #84]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	3301      	adds	r3, #1
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	fa22 f303 	lsr.w	r3, r2, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	f47f aed0 	bne.w	8000484 <HAL_GPIO_Init+0x14>
  }
}
 80006e4:	bf00      	nop
 80006e6:	372c      	adds	r7, #44	; 0x2c
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	10210000 	.word	0x10210000
 80006f4:	10110000 	.word	0x10110000
 80006f8:	10120000 	.word	0x10120000
 80006fc:	10310000 	.word	0x10310000
 8000700:	10320000 	.word	0x10320000
 8000704:	10220000 	.word	0x10220000
 8000708:	40021000 	.word	0x40021000
 800070c:	40010000 	.word	0x40010000
 8000710:	40010800 	.word	0x40010800
 8000714:	40010c00 	.word	0x40010c00
 8000718:	40011000 	.word	0x40011000
 800071c:	40011400 	.word	0x40011400
 8000720:	40010400 	.word	0x40010400

08000724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	807b      	strh	r3, [r7, #2]
 8000730:	4613      	mov	r3, r2
 8000732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000734:	787b      	ldrb	r3, [r7, #1]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d003      	beq.n	8000742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800073a:	887a      	ldrh	r2, [r7, #2]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000740:	e003      	b.n	800074a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000742:	887b      	ldrh	r3, [r7, #2]
 8000744:	041a      	lsls	r2, r3, #16
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	611a      	str	r2, [r3, #16]
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	68da      	ldr	r2, [r3, #12]
 8000764:	887b      	ldrh	r3, [r7, #2]
 8000766:	4013      	ands	r3, r2
 8000768:	2b00      	cmp	r3, #0
 800076a:	d003      	beq.n	8000774 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800076c:	887a      	ldrh	r2, [r7, #2]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000772:	e002      	b.n	800077a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000774:	887a      	ldrh	r2, [r7, #2]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	611a      	str	r2, [r3, #16]
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000790:	695a      	ldr	r2, [r3, #20]
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	4013      	ands	r3, r2
 8000796:	2b00      	cmp	r3, #0
 8000798:	d006      	beq.n	80007a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800079a:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800079c:	88fb      	ldrh	r3, [r7, #6]
 800079e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80007a0:	88fb      	ldrh	r3, [r7, #6]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 f806 	bl	80007b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40010400 	.word	0x40010400

080007b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d101      	bne.n	80007da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e10f      	b.n	80009fa <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d106      	bne.n	80007f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f002 f816 	bl	8002820 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2224      	movs	r2, #36	; 0x24
 80007f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f022 0201 	bic.w	r2, r2, #1
 800080a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800080c:	f001 fb0e 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8000810:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	4a7b      	ldr	r2, [pc, #492]	; (8000a04 <HAL_I2C_Init+0x23c>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d807      	bhi.n	800082c <HAL_I2C_Init+0x64>
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4a7a      	ldr	r2, [pc, #488]	; (8000a08 <HAL_I2C_Init+0x240>)
 8000820:	4293      	cmp	r3, r2
 8000822:	bf94      	ite	ls
 8000824:	2301      	movls	r3, #1
 8000826:	2300      	movhi	r3, #0
 8000828:	b2db      	uxtb	r3, r3
 800082a:	e006      	b.n	800083a <HAL_I2C_Init+0x72>
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	4a77      	ldr	r2, [pc, #476]	; (8000a0c <HAL_I2C_Init+0x244>)
 8000830:	4293      	cmp	r3, r2
 8000832:	bf94      	ite	ls
 8000834:	2301      	movls	r3, #1
 8000836:	2300      	movhi	r3, #0
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	e0db      	b.n	80009fa <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	4a72      	ldr	r2, [pc, #456]	; (8000a10 <HAL_I2C_Init+0x248>)
 8000846:	fba2 2303 	umull	r2, r3, r2, r3
 800084a:	0c9b      	lsrs	r3, r3, #18
 800084c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	68ba      	ldr	r2, [r7, #8]
 800085e:	430a      	orrs	r2, r1
 8000860:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	6a1b      	ldr	r3, [r3, #32]
 8000868:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4a64      	ldr	r2, [pc, #400]	; (8000a04 <HAL_I2C_Init+0x23c>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d802      	bhi.n	800087c <HAL_I2C_Init+0xb4>
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	3301      	adds	r3, #1
 800087a:	e009      	b.n	8000890 <HAL_I2C_Init+0xc8>
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000882:	fb02 f303 	mul.w	r3, r2, r3
 8000886:	4a63      	ldr	r2, [pc, #396]	; (8000a14 <HAL_I2C_Init+0x24c>)
 8000888:	fba2 2303 	umull	r2, r3, r2, r3
 800088c:	099b      	lsrs	r3, r3, #6
 800088e:	3301      	adds	r3, #1
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	6812      	ldr	r2, [r2, #0]
 8000894:	430b      	orrs	r3, r1
 8000896:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80008a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	4956      	ldr	r1, [pc, #344]	; (8000a04 <HAL_I2C_Init+0x23c>)
 80008ac:	428b      	cmp	r3, r1
 80008ae:	d80d      	bhi.n	80008cc <HAL_I2C_Init+0x104>
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	1e59      	subs	r1, r3, #1
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80008be:	3301      	adds	r3, #1
 80008c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	bf38      	it	cc
 80008c8:	2304      	movcc	r3, #4
 80008ca:	e04f      	b.n	800096c <HAL_I2C_Init+0x1a4>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d111      	bne.n	80008f8 <HAL_I2C_Init+0x130>
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	1e58      	subs	r0, r3, #1
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6859      	ldr	r1, [r3, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	440b      	add	r3, r1
 80008e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80008e6:	3301      	adds	r3, #1
 80008e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	bf0c      	ite	eq
 80008f0:	2301      	moveq	r3, #1
 80008f2:	2300      	movne	r3, #0
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	e012      	b.n	800091e <HAL_I2C_Init+0x156>
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	1e58      	subs	r0, r3, #1
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6859      	ldr	r1, [r3, #4]
 8000900:	460b      	mov	r3, r1
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	440b      	add	r3, r1
 8000906:	0099      	lsls	r1, r3, #2
 8000908:	440b      	add	r3, r1
 800090a:	fbb0 f3f3 	udiv	r3, r0, r3
 800090e:	3301      	adds	r3, #1
 8000910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000914:	2b00      	cmp	r3, #0
 8000916:	bf0c      	ite	eq
 8000918:	2301      	moveq	r3, #1
 800091a:	2300      	movne	r3, #0
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_I2C_Init+0x15e>
 8000922:	2301      	movs	r3, #1
 8000924:	e022      	b.n	800096c <HAL_I2C_Init+0x1a4>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d10e      	bne.n	800094c <HAL_I2C_Init+0x184>
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	1e58      	subs	r0, r3, #1
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6859      	ldr	r1, [r3, #4]
 8000936:	460b      	mov	r3, r1
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	440b      	add	r3, r1
 800093c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000940:	3301      	adds	r3, #1
 8000942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800094a:	e00f      	b.n	800096c <HAL_I2C_Init+0x1a4>
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	1e58      	subs	r0, r3, #1
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6859      	ldr	r1, [r3, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	440b      	add	r3, r1
 800095a:	0099      	lsls	r1, r3, #2
 800095c:	440b      	add	r3, r1
 800095e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000962:	3301      	adds	r3, #1
 8000964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000968:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800096c:	6879      	ldr	r1, [r7, #4]
 800096e:	6809      	ldr	r1, [r1, #0]
 8000970:	4313      	orrs	r3, r2
 8000972:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	69da      	ldr	r2, [r3, #28]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6a1b      	ldr	r3, [r3, #32]
 8000986:	431a      	orrs	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	430a      	orrs	r2, r1
 800098e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800099a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	6911      	ldr	r1, [r2, #16]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	68d2      	ldr	r2, [r2, #12]
 80009a6:	4311      	orrs	r1, r2
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	6812      	ldr	r2, [r2, #0]
 80009ac:	430b      	orrs	r3, r1
 80009ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	695a      	ldr	r2, [r3, #20]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	431a      	orrs	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	430a      	orrs	r2, r1
 80009ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f042 0201 	orr.w	r2, r2, #1
 80009da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2220      	movs	r2, #32
 80009e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2200      	movs	r2, #0
 80009ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2200      	movs	r2, #0
 80009f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	000186a0 	.word	0x000186a0
 8000a08:	001e847f 	.word	0x001e847f
 8000a0c:	003d08ff 	.word	0x003d08ff
 8000a10:	431bde83 	.word	0x431bde83
 8000a14:	10624dd3 	.word	0x10624dd3

08000a18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	607a      	str	r2, [r7, #4]
 8000a22:	461a      	mov	r2, r3
 8000a24:	460b      	mov	r3, r1
 8000a26:	817b      	strh	r3, [r7, #10]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000a2c:	f7ff fbe6 	bl	80001fc <HAL_GetTick>
 8000a30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b20      	cmp	r3, #32
 8000a3c:	f040 80e0 	bne.w	8000c00 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	2319      	movs	r3, #25
 8000a46:	2201      	movs	r2, #1
 8000a48:	4970      	ldr	r1, [pc, #448]	; (8000c0c <HAL_I2C_Master_Transmit+0x1f4>)
 8000a4a:	68f8      	ldr	r0, [r7, #12]
 8000a4c:	f000 fc3c 	bl	80012c8 <I2C_WaitOnFlagUntilTimeout>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000a56:	2302      	movs	r3, #2
 8000a58:	e0d3      	b.n	8000c02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d101      	bne.n	8000a68 <HAL_I2C_Master_Transmit+0x50>
 8000a64:	2302      	movs	r3, #2
 8000a66:	e0cc      	b.n	8000c02 <HAL_I2C_Master_Transmit+0x1ea>
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d007      	beq.n	8000a8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f042 0201 	orr.w	r2, r2, #1
 8000a8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2221      	movs	r2, #33	; 0x21
 8000aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	2210      	movs	r2, #16
 8000aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	893a      	ldrh	r2, [r7, #8]
 8000abe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	4a50      	ldr	r2, [pc, #320]	; (8000c10 <HAL_I2C_Master_Transmit+0x1f8>)
 8000ace:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000ad0:	8979      	ldrh	r1, [r7, #10]
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	6a3a      	ldr	r2, [r7, #32]
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f000 faca 	bl	8001070 <I2C_MasterRequestWrite>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e08d      	b.n	8000c02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000afc:	e066      	b.n	8000bcc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	6a39      	ldr	r1, [r7, #32]
 8000b02:	68f8      	ldr	r0, [r7, #12]
 8000b04:	f000 fcb6 	bl	8001474 <I2C_WaitOnTXEFlagUntilTimeout>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d00d      	beq.n	8000b2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	d107      	bne.n	8000b26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e06b      	b.n	8000c02 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	3b01      	subs	r3, #1
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b52:	3b01      	subs	r3, #1
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	2b04      	cmp	r3, #4
 8000b66:	d11b      	bne.n	8000ba0 <HAL_I2C_Master_Transmit+0x188>
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d017      	beq.n	8000ba0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b74:	781a      	ldrb	r2, [r3, #0]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b80:	1c5a      	adds	r2, r3, #1
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	6a39      	ldr	r1, [r7, #32]
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	f000 fca6 	bl	80014f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d00d      	beq.n	8000bcc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	d107      	bne.n	8000bc8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bc6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e01a      	b.n	8000c02 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d194      	bne.n	8000afe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000be2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2220      	movs	r2, #32
 8000be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	e000      	b.n	8000c02 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000c00:	2302      	movs	r3, #2
  }
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	00100002 	.word	0x00100002
 8000c10:	ffff0000 	.word	0xffff0000

08000c14 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08c      	sub	sp, #48	; 0x30
 8000c18:	af02      	add	r7, sp, #8
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	460b      	mov	r3, r1
 8000c22:	817b      	strh	r3, [r7, #10]
 8000c24:	4613      	mov	r3, r2
 8000c26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000c28:	f7ff fae8 	bl	80001fc <HAL_GetTick>
 8000c2c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2b20      	cmp	r3, #32
 8000c38:	f040 8213 	bne.w	8001062 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	2319      	movs	r3, #25
 8000c42:	2201      	movs	r2, #1
 8000c44:	497e      	ldr	r1, [pc, #504]	; (8000e40 <HAL_I2C_Master_Receive+0x22c>)
 8000c46:	68f8      	ldr	r0, [r7, #12]
 8000c48:	f000 fb3e 	bl	80012c8 <I2C_WaitOnFlagUntilTimeout>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8000c52:	2302      	movs	r3, #2
 8000c54:	e206      	b.n	8001064 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d101      	bne.n	8000c64 <HAL_I2C_Master_Receive+0x50>
 8000c60:	2302      	movs	r3, #2
 8000c62:	e1ff      	b.n	8001064 <HAL_I2C_Master_Receive+0x450>
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2201      	movs	r2, #1
 8000c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d007      	beq.n	8000c8a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f042 0201 	orr.w	r2, r2, #1
 8000c88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	2222      	movs	r2, #34	; 0x22
 8000c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2210      	movs	r2, #16
 8000ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2200      	movs	r2, #0
 8000cae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	893a      	ldrh	r2, [r7, #8]
 8000cba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4a5e      	ldr	r2, [pc, #376]	; (8000e44 <HAL_I2C_Master_Receive+0x230>)
 8000cca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000ccc:	8979      	ldrh	r1, [r7, #10]
 8000cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cd2:	68f8      	ldr	r0, [r7, #12]
 8000cd4:	f000 fa42 	bl	800115c <I2C_MasterRequestRead>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e1c0      	b.n	8001064 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d113      	bne.n	8000d12 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	623b      	str	r3, [r7, #32]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	623b      	str	r3, [r7, #32]
 8000cfe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	e194      	b.n	800103c <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d11d      	bne.n	8000d56 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d28:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	61fb      	str	r3, [r7, #28]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	61fb      	str	r3, [r7, #28]
 8000d40:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000d52:	b662      	cpsie	i
 8000d54:	e172      	b.n	800103c <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d11d      	bne.n	8000d9a <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	61bb      	str	r3, [r7, #24]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000d96:	b662      	cpsie	i
 8000d98:	e150      	b.n	800103c <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000da8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	695b      	ldr	r3, [r3, #20]
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8000dc0:	e13c      	b.n	800103c <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	f200 80f5 	bhi.w	8000fb6 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d123      	bne.n	8000e1c <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000dd8:	68f8      	ldr	r0, [r7, #12]
 8000dda:	f000 fbcd 	bl	8001578 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e13d      	b.n	8001064 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	691a      	ldr	r2, [r3, #16]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e04:	3b01      	subs	r3, #1
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	3b01      	subs	r3, #1
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000e1a:	e10f      	b.n	800103c <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d150      	bne.n	8000ec6 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	4906      	ldr	r1, [pc, #24]	; (8000e48 <HAL_I2C_Master_Receive+0x234>)
 8000e2e:	68f8      	ldr	r0, [r7, #12]
 8000e30:	f000 fa4a 	bl	80012c8 <I2C_WaitOnFlagUntilTimeout>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d008      	beq.n	8000e4c <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e112      	b.n	8001064 <HAL_I2C_Master_Receive+0x450>
 8000e3e:	bf00      	nop
 8000e40:	00100002 	.word	0x00100002
 8000e44:	ffff0000 	.word	0xffff0000
 8000e48:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8000e4c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e5c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	691a      	ldr	r2, [r3, #16]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e70:	1c5a      	adds	r2, r3, #1
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8000e90:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	691a      	ldr	r2, [r3, #16]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea4:	1c5a      	adds	r2, r3, #1
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000ec4:	e0ba      	b.n	800103c <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4967      	ldr	r1, [pc, #412]	; (800106c <HAL_I2C_Master_Receive+0x458>)
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f000 f9f9 	bl	80012c8 <I2C_WaitOnFlagUntilTimeout>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	e0c1      	b.n	8001064 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000eee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	691a      	ldr	r2, [r3, #16]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	494f      	ldr	r1, [pc, #316]	; (800106c <HAL_I2C_Master_Receive+0x458>)
 8000f2e:	68f8      	ldr	r0, [r7, #12]
 8000f30:	f000 f9ca 	bl	80012c8 <I2C_WaitOnFlagUntilTimeout>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e092      	b.n	8001064 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f4c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	691a      	ldr	r2, [r3, #16]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f58:	b2d2      	uxtb	r2, r2
 8000f5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f60:	1c5a      	adds	r2, r3, #1
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8000f80:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	3b01      	subs	r3, #1
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000fb4:	e042      	b.n	800103c <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000fba:	68f8      	ldr	r0, [r7, #12]
 8000fbc:	f000 fadc 	bl	8001578 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e04c      	b.n	8001064 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	691a      	ldr	r2, [r3, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	2b04      	cmp	r3, #4
 8001008:	d118      	bne.n	800103c <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	691a      	ldr	r2, [r3, #16]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101c:	1c5a      	adds	r2, r3, #1
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001026:	3b01      	subs	r3, #1
 8001028:	b29a      	uxth	r2, r3
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001032:	b29b      	uxth	r3, r3
 8001034:	3b01      	subs	r3, #1
 8001036:	b29a      	uxth	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001040:	2b00      	cmp	r3, #0
 8001042:	f47f aebe 	bne.w	8000dc2 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2220      	movs	r2, #32
 800104a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e000      	b.n	8001064 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8001062:	2302      	movs	r3, #2
  }
}
 8001064:	4618      	mov	r0, r3
 8001066:	3728      	adds	r7, #40	; 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	00010004 	.word	0x00010004

08001070 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af02      	add	r7, sp, #8
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	460b      	mov	r3, r1
 800107e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001084:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	2b08      	cmp	r3, #8
 800108a:	d006      	beq.n	800109a <I2C_MasterRequestWrite+0x2a>
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d003      	beq.n	800109a <I2C_MasterRequestWrite+0x2a>
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001098:	d108      	bne.n	80010ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	e00b      	b.n	80010c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b0:	2b12      	cmp	r3, #18
 80010b2:	d107      	bne.n	80010c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f000 f8f9 	bl	80012c8 <I2C_WaitOnFlagUntilTimeout>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e035      	b.n	800114c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010e8:	d108      	bne.n	80010fc <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80010ea:	897b      	ldrh	r3, [r7, #10]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80010f8:	611a      	str	r2, [r3, #16]
 80010fa:	e01b      	b.n	8001134 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80010fc:	897b      	ldrh	r3, [r7, #10]
 80010fe:	11db      	asrs	r3, r3, #7
 8001100:	b2db      	uxtb	r3, r3
 8001102:	f003 0306 	and.w	r3, r3, #6
 8001106:	b2db      	uxtb	r3, r3
 8001108:	f063 030f 	orn	r3, r3, #15
 800110c:	b2da      	uxtb	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	490e      	ldr	r1, [pc, #56]	; (8001154 <I2C_MasterRequestWrite+0xe4>)
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f000 f92b 	bl	8001376 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e010      	b.n	800114c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800112a:	897b      	ldrh	r3, [r7, #10]
 800112c:	b2da      	uxtb	r2, r3
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	4907      	ldr	r1, [pc, #28]	; (8001158 <I2C_MasterRequestWrite+0xe8>)
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f000 f91b 	bl	8001376 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	00010008 	.word	0x00010008
 8001158:	00010002 	.word	0x00010002

0800115c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af02      	add	r7, sp, #8
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	460b      	mov	r3, r1
 800116a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001170:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001180:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2b08      	cmp	r3, #8
 8001186:	d006      	beq.n	8001196 <I2C_MasterRequestRead+0x3a>
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d003      	beq.n	8001196 <I2C_MasterRequestRead+0x3a>
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001194:	d108      	bne.n	80011a8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	e00b      	b.n	80011c0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	2b11      	cmp	r3, #17
 80011ae:	d107      	bne.n	80011c0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f000 f87b 	bl	80012c8 <I2C_WaitOnFlagUntilTimeout>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e06d      	b.n	80012b8 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80011e4:	d108      	bne.n	80011f8 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80011e6:	897b      	ldrh	r3, [r7, #10]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	611a      	str	r2, [r3, #16]
 80011f6:	e053      	b.n	80012a0 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80011f8:	897b      	ldrh	r3, [r7, #10]
 80011fa:	11db      	asrs	r3, r3, #7
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	f003 0306 	and.w	r3, r3, #6
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f063 030f 	orn	r3, r3, #15
 8001208:	b2da      	uxtb	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	492a      	ldr	r1, [pc, #168]	; (80012c0 <I2C_MasterRequestRead+0x164>)
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f000 f8ad 	bl	8001376 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e048      	b.n	80012b8 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001226:	897b      	ldrh	r3, [r7, #10]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	4923      	ldr	r1, [pc, #140]	; (80012c4 <I2C_MasterRequestRead+0x168>)
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f000 f89d 	bl	8001376 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e038      	b.n	80012b8 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800126a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f000 f825 	bl	80012c8 <I2C_WaitOnFlagUntilTimeout>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e017      	b.n	80012b8 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001288:	897b      	ldrh	r3, [r7, #10]
 800128a:	11db      	asrs	r3, r3, #7
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f003 0306 	and.w	r3, r3, #6
 8001292:	b2db      	uxtb	r3, r3
 8001294:	f063 030e 	orn	r3, r3, #14
 8001298:	b2da      	uxtb	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	4907      	ldr	r1, [pc, #28]	; (80012c4 <I2C_MasterRequestRead+0x168>)
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f000 f865 	bl	8001376 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	00010008 	.word	0x00010008
 80012c4:	00010002 	.word	0x00010002

080012c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	4613      	mov	r3, r2
 80012d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012d8:	e025      	b.n	8001326 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012e0:	d021      	beq.n	8001326 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012e2:	f7fe ff8b 	bl	80001fc <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d302      	bcc.n	80012f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d116      	bne.n	8001326 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2200      	movs	r2, #0
 80012fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2220      	movs	r2, #32
 8001302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f043 0220 	orr.w	r2, r3, #32
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e023      	b.n	800136e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	0c1b      	lsrs	r3, r3, #16
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b01      	cmp	r3, #1
 800132e:	d10d      	bne.n	800134c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	43da      	mvns	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4013      	ands	r3, r2
 800133c:	b29b      	uxth	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	bf0c      	ite	eq
 8001342:	2301      	moveq	r3, #1
 8001344:	2300      	movne	r3, #0
 8001346:	b2db      	uxtb	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	e00c      	b.n	8001366 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	43da      	mvns	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4013      	ands	r3, r2
 8001358:	b29b      	uxth	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	bf0c      	ite	eq
 800135e:	2301      	moveq	r3, #1
 8001360:	2300      	movne	r3, #0
 8001362:	b2db      	uxtb	r3, r3
 8001364:	461a      	mov	r2, r3
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	429a      	cmp	r2, r3
 800136a:	d0b6      	beq.n	80012da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001384:	e051      	b.n	800142a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001394:	d123      	bne.n	80013de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80013ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2200      	movs	r2, #0
 80013b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2220      	movs	r2, #32
 80013ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f043 0204 	orr.w	r2, r3, #4
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e046      	b.n	800146c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013e4:	d021      	beq.n	800142a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013e6:	f7fe ff09 	bl	80001fc <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d302      	bcc.n	80013fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d116      	bne.n	800142a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2220      	movs	r2, #32
 8001406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f043 0220 	orr.w	r2, r3, #32
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e020      	b.n	800146c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	0c1b      	lsrs	r3, r3, #16
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b01      	cmp	r3, #1
 8001432:	d10c      	bne.n	800144e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	4013      	ands	r3, r2
 8001440:	b29b      	uxth	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	bf14      	ite	ne
 8001446:	2301      	movne	r3, #1
 8001448:	2300      	moveq	r3, #0
 800144a:	b2db      	uxtb	r3, r3
 800144c:	e00b      	b.n	8001466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	43da      	mvns	r2, r3
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	4013      	ands	r3, r2
 800145a:	b29b      	uxth	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	bf14      	ite	ne
 8001460:	2301      	movne	r3, #1
 8001462:	2300      	moveq	r3, #0
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d18d      	bne.n	8001386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001480:	e02d      	b.n	80014de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f000 f8ce 	bl	8001624 <I2C_IsAcknowledgeFailed>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e02d      	b.n	80014ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001498:	d021      	beq.n	80014de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800149a:	f7fe feaf 	bl	80001fc <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d302      	bcc.n	80014b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d116      	bne.n	80014de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2200      	movs	r2, #0
 80014b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2220      	movs	r2, #32
 80014ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f043 0220 	orr.w	r2, r3, #32
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e007      	b.n	80014ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e8:	2b80      	cmp	r3, #128	; 0x80
 80014ea:	d1ca      	bne.n	8001482 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001502:	e02d      	b.n	8001560 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f000 f88d 	bl	8001624 <I2C_IsAcknowledgeFailed>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e02d      	b.n	8001570 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800151a:	d021      	beq.n	8001560 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800151c:	f7fe fe6e 	bl	80001fc <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	429a      	cmp	r2, r3
 800152a:	d302      	bcc.n	8001532 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d116      	bne.n	8001560 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2200      	movs	r2, #0
 8001536:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2220      	movs	r2, #32
 800153c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f043 0220 	orr.w	r2, r3, #32
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e007      	b.n	8001570 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	2b04      	cmp	r3, #4
 800156c:	d1ca      	bne.n	8001504 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001584:	e042      	b.n	800160c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	f003 0310 	and.w	r3, r3, #16
 8001590:	2b10      	cmp	r3, #16
 8001592:	d119      	bne.n	80015c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f06f 0210 	mvn.w	r2, #16
 800159c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2220      	movs	r2, #32
 80015a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e029      	b.n	800161c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015c8:	f7fe fe18 	bl	80001fc <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d302      	bcc.n	80015de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d116      	bne.n	800160c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2220      	movs	r2, #32
 80015e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f043 0220 	orr.w	r2, r3, #32
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e007      	b.n	800161c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001616:	2b40      	cmp	r3, #64	; 0x40
 8001618:	d1b5      	bne.n	8001586 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800163a:	d11b      	bne.n	8001674 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001644:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2220      	movs	r2, #32
 8001650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	f043 0204 	orr.w	r2, r3, #4
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e000      	b.n	8001676 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e26c      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 8087 	beq.w	80017ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a0:	4b92      	ldr	r3, [pc, #584]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d00c      	beq.n	80016c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016ac:	4b8f      	ldr	r3, [pc, #572]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d112      	bne.n	80016de <HAL_RCC_OscConfig+0x5e>
 80016b8:	4b8c      	ldr	r3, [pc, #560]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c4:	d10b      	bne.n	80016de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c6:	4b89      	ldr	r3, [pc, #548]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d06c      	beq.n	80017ac <HAL_RCC_OscConfig+0x12c>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d168      	bne.n	80017ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e246      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e6:	d106      	bne.n	80016f6 <HAL_RCC_OscConfig+0x76>
 80016e8:	4b80      	ldr	r3, [pc, #512]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a7f      	ldr	r2, [pc, #508]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80016ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	e02e      	b.n	8001754 <HAL_RCC_OscConfig+0xd4>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0x98>
 80016fe:	4b7b      	ldr	r3, [pc, #492]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a7a      	ldr	r2, [pc, #488]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	4b78      	ldr	r3, [pc, #480]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a77      	ldr	r2, [pc, #476]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001710:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e01d      	b.n	8001754 <HAL_RCC_OscConfig+0xd4>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001720:	d10c      	bne.n	800173c <HAL_RCC_OscConfig+0xbc>
 8001722:	4b72      	ldr	r3, [pc, #456]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a71      	ldr	r2, [pc, #452]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b6f      	ldr	r3, [pc, #444]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a6e      	ldr	r2, [pc, #440]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e00b      	b.n	8001754 <HAL_RCC_OscConfig+0xd4>
 800173c:	4b6b      	ldr	r3, [pc, #428]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a6a      	ldr	r2, [pc, #424]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b68      	ldr	r3, [pc, #416]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a67      	ldr	r2, [pc, #412]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 800174e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001752:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d013      	beq.n	8001784 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7fe fd4e 	bl	80001fc <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001764:	f7fe fd4a 	bl	80001fc <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b64      	cmp	r3, #100	; 0x64
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e1fa      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001776:	4b5d      	ldr	r3, [pc, #372]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0xe4>
 8001782:	e014      	b.n	80017ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7fe fd3a 	bl	80001fc <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800178c:	f7fe fd36 	bl	80001fc <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	; 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e1e6      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179e:	4b53      	ldr	r3, [pc, #332]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x10c>
 80017aa:	e000      	b.n	80017ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d063      	beq.n	8001882 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ba:	4b4c      	ldr	r3, [pc, #304]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00b      	beq.n	80017de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017c6:	4b49      	ldr	r3, [pc, #292]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d11c      	bne.n	800180c <HAL_RCC_OscConfig+0x18c>
 80017d2:	4b46      	ldr	r3, [pc, #280]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d116      	bne.n	800180c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017de:	4b43      	ldr	r3, [pc, #268]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d005      	beq.n	80017f6 <HAL_RCC_OscConfig+0x176>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d001      	beq.n	80017f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e1ba      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f6:	4b3d      	ldr	r3, [pc, #244]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	4939      	ldr	r1, [pc, #228]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001806:	4313      	orrs	r3, r2
 8001808:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180a:	e03a      	b.n	8001882 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d020      	beq.n	8001856 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001814:	4b36      	ldr	r3, [pc, #216]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001816:	2201      	movs	r2, #1
 8001818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181a:	f7fe fcef 	bl	80001fc <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001822:	f7fe fceb 	bl	80001fc <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e19b      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001834:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001840:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4927      	ldr	r1, [pc, #156]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001850:	4313      	orrs	r3, r2
 8001852:	600b      	str	r3, [r1, #0]
 8001854:	e015      	b.n	8001882 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001856:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7fe fcce 	bl	80001fc <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001864:	f7fe fcca 	bl	80001fc <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e17a      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001876:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d03a      	beq.n	8001904 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d019      	beq.n	80018ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <HAL_RCC_OscConfig+0x274>)
 8001898:	2201      	movs	r2, #1
 800189a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189c:	f7fe fcae 	bl	80001fc <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a4:	f7fe fcaa 	bl	80001fc <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e15a      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <HAL_RCC_OscConfig+0x26c>)
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018c2:	2001      	movs	r0, #1
 80018c4:	f000 fada 	bl	8001e7c <RCC_Delay>
 80018c8:	e01c      	b.n	8001904 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_RCC_OscConfig+0x274>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d0:	f7fe fc94 	bl	80001fc <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d6:	e00f      	b.n	80018f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d8:	f7fe fc90 	bl	80001fc <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d908      	bls.n	80018f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e140      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000
 80018f0:	42420000 	.word	0x42420000
 80018f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f8:	4b9e      	ldr	r3, [pc, #632]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1e9      	bne.n	80018d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 80a6 	beq.w	8001a5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001912:	2300      	movs	r3, #0
 8001914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001916:	4b97      	ldr	r3, [pc, #604]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10d      	bne.n	800193e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	4b94      	ldr	r3, [pc, #592]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a93      	ldr	r2, [pc, #588]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192c:	61d3      	str	r3, [r2, #28]
 800192e:	4b91      	ldr	r3, [pc, #580]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193a:	2301      	movs	r3, #1
 800193c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193e:	4b8e      	ldr	r3, [pc, #568]	; (8001b78 <HAL_RCC_OscConfig+0x4f8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001946:	2b00      	cmp	r3, #0
 8001948:	d118      	bne.n	800197c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194a:	4b8b      	ldr	r3, [pc, #556]	; (8001b78 <HAL_RCC_OscConfig+0x4f8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a8a      	ldr	r2, [pc, #552]	; (8001b78 <HAL_RCC_OscConfig+0x4f8>)
 8001950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001956:	f7fe fc51 	bl	80001fc <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195e:	f7fe fc4d 	bl	80001fc <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b64      	cmp	r3, #100	; 0x64
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e0fd      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001970:	4b81      	ldr	r3, [pc, #516]	; (8001b78 <HAL_RCC_OscConfig+0x4f8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d106      	bne.n	8001992 <HAL_RCC_OscConfig+0x312>
 8001984:	4b7b      	ldr	r3, [pc, #492]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	4a7a      	ldr	r2, [pc, #488]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6213      	str	r3, [r2, #32]
 8001990:	e02d      	b.n	80019ee <HAL_RCC_OscConfig+0x36e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10c      	bne.n	80019b4 <HAL_RCC_OscConfig+0x334>
 800199a:	4b76      	ldr	r3, [pc, #472]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4a75      	ldr	r2, [pc, #468]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	6213      	str	r3, [r2, #32]
 80019a6:	4b73      	ldr	r3, [pc, #460]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	4a72      	ldr	r2, [pc, #456]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80019ac:	f023 0304 	bic.w	r3, r3, #4
 80019b0:	6213      	str	r3, [r2, #32]
 80019b2:	e01c      	b.n	80019ee <HAL_RCC_OscConfig+0x36e>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2b05      	cmp	r3, #5
 80019ba:	d10c      	bne.n	80019d6 <HAL_RCC_OscConfig+0x356>
 80019bc:	4b6d      	ldr	r3, [pc, #436]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4a6c      	ldr	r2, [pc, #432]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	f043 0304 	orr.w	r3, r3, #4
 80019c6:	6213      	str	r3, [r2, #32]
 80019c8:	4b6a      	ldr	r3, [pc, #424]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	4a69      	ldr	r2, [pc, #420]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6213      	str	r3, [r2, #32]
 80019d4:	e00b      	b.n	80019ee <HAL_RCC_OscConfig+0x36e>
 80019d6:	4b67      	ldr	r3, [pc, #412]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	4a66      	ldr	r2, [pc, #408]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	6213      	str	r3, [r2, #32]
 80019e2:	4b64      	ldr	r3, [pc, #400]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	4a63      	ldr	r2, [pc, #396]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	f023 0304 	bic.w	r3, r3, #4
 80019ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d015      	beq.n	8001a22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f6:	f7fe fc01 	bl	80001fc <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fc:	e00a      	b.n	8001a14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fe:	f7fe fbfd 	bl	80001fc <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e0ab      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a14:	4b57      	ldr	r3, [pc, #348]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0ee      	beq.n	80019fe <HAL_RCC_OscConfig+0x37e>
 8001a20:	e014      	b.n	8001a4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a22:	f7fe fbeb 	bl	80001fc <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a28:	e00a      	b.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2a:	f7fe fbe7 	bl	80001fc <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e095      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a40:	4b4c      	ldr	r3, [pc, #304]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1ee      	bne.n	8001a2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a4c:	7dfb      	ldrb	r3, [r7, #23]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d105      	bne.n	8001a5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a52:	4b48      	ldr	r3, [pc, #288]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a47      	ldr	r2, [pc, #284]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8081 	beq.w	8001b6a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a68:	4b42      	ldr	r3, [pc, #264]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d061      	beq.n	8001b38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d146      	bne.n	8001b0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7c:	4b3f      	ldr	r3, [pc, #252]	; (8001b7c <HAL_RCC_OscConfig+0x4fc>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a82:	f7fe fbbb 	bl	80001fc <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8a:	f7fe fbb7 	bl	80001fc <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e067      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a9c:	4b35      	ldr	r3, [pc, #212]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f0      	bne.n	8001a8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab0:	d108      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ab2:	4b30      	ldr	r3, [pc, #192]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	492d      	ldr	r1, [pc, #180]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a19      	ldr	r1, [r3, #32]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	4927      	ldr	r1, [pc, #156]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001adc:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <HAL_RCC_OscConfig+0x4fc>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae2:	f7fe fb8b 	bl	80001fc <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aea:	f7fe fb87 	bl	80001fc <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e037      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001afc:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x46a>
 8001b08:	e02f      	b.n	8001b6a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0a:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <HAL_RCC_OscConfig+0x4fc>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7fe fb74 	bl	80001fc <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b18:	f7fe fb70 	bl	80001fc <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e020      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x498>
 8001b36:	e018      	b.n	8001b6a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e013      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d001      	beq.n	8001b6a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40007000 	.word	0x40007000
 8001b7c:	42420060 	.word	0x42420060

08001b80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0d0      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b94:	4b6a      	ldr	r3, [pc, #424]	; (8001d40 <HAL_RCC_ClockConfig+0x1c0>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d910      	bls.n	8001bc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba2:	4b67      	ldr	r3, [pc, #412]	; (8001d40 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 0207 	bic.w	r2, r3, #7
 8001baa:	4965      	ldr	r1, [pc, #404]	; (8001d40 <HAL_RCC_ClockConfig+0x1c0>)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb2:	4b63      	ldr	r3, [pc, #396]	; (8001d40 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d001      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0b8      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d020      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bdc:	4b59      	ldr	r3, [pc, #356]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	4a58      	ldr	r2, [pc, #352]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001be6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bf4:	4b53      	ldr	r3, [pc, #332]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	4a52      	ldr	r2, [pc, #328]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c00:	4b50      	ldr	r3, [pc, #320]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	494d      	ldr	r1, [pc, #308]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d040      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d107      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c26:	4b47      	ldr	r3, [pc, #284]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d115      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e07f      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d107      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3e:	4b41      	ldr	r3, [pc, #260]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d109      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e073      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4e:	4b3d      	ldr	r3, [pc, #244]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e06b      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c5e:	4b39      	ldr	r3, [pc, #228]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f023 0203 	bic.w	r2, r3, #3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	4936      	ldr	r1, [pc, #216]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c70:	f7fe fac4 	bl	80001fc <HAL_GetTick>
 8001c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c76:	e00a      	b.n	8001c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c78:	f7fe fac0 	bl	80001fc <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e053      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8e:	4b2d      	ldr	r3, [pc, #180]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 020c 	and.w	r2, r3, #12
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d1eb      	bne.n	8001c78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca0:	4b27      	ldr	r3, [pc, #156]	; (8001d40 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d210      	bcs.n	8001cd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cae:	4b24      	ldr	r3, [pc, #144]	; (8001d40 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 0207 	bic.w	r2, r3, #7
 8001cb6:	4922      	ldr	r1, [pc, #136]	; (8001d40 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbe:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e032      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d008      	beq.n	8001cee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cdc:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	4916      	ldr	r1, [pc, #88]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d009      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cfa:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	490e      	ldr	r1, [pc, #56]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d0e:	f000 f821 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8001d12:	4601      	mov	r1, r0
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <HAL_RCC_ClockConfig+0x1c8>)
 8001d20:	5cd3      	ldrb	r3, [r2, r3]
 8001d22:	fa21 f303 	lsr.w	r3, r1, r3
 8001d26:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <HAL_RCC_ClockConfig+0x1cc>)
 8001d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_RCC_ClockConfig+0x1d0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fa22 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40022000 	.word	0x40022000
 8001d44:	40021000 	.word	0x40021000
 8001d48:	08002af8 	.word	0x08002af8
 8001d4c:	20000008 	.word	0x20000008
 8001d50:	20000000 	.word	0x20000000

08001d54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d54:	b490      	push	{r4, r7}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d5c:	1d3c      	adds	r4, r7, #4
 8001d5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d64:	4b28      	ldr	r3, [pc, #160]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d002      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0x40>
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d003      	beq.n	8001d9a <HAL_RCC_GetSysClockFreq+0x46>
 8001d92:	e02d      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d94:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d96:	623b      	str	r3, [r7, #32]
      break;
 8001d98:	e02d      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	0c9b      	lsrs	r3, r3, #18
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001da6:	4413      	add	r3, r2
 8001da8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001dac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d013      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	0c5b      	lsrs	r3, r3, #17
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001dcc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	4a0f      	ldr	r2, [pc, #60]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dd2:	fb02 f203 	mul.w	r2, r2, r3
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dde:	e004      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	4a0c      	ldr	r2, [pc, #48]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001de4:	fb02 f303 	mul.w	r3, r2, r3
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	623b      	str	r3, [r7, #32]
      break;
 8001dee:	e002      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001df0:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001df2:	623b      	str	r3, [r7, #32]
      break;
 8001df4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001df6:	6a3b      	ldr	r3, [r7, #32]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3728      	adds	r7, #40	; 0x28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc90      	pop	{r4, r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	08002adc 	.word	0x08002adc
 8001e08:	08002aec 	.word	0x08002aec
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	007a1200 	.word	0x007a1200
 8001e14:	003d0900 	.word	0x003d0900

08001e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e1c:	4b02      	ldr	r3, [pc, #8]	; (8001e28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	20000008 	.word	0x20000008

08001e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e30:	f7ff fff2 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e34:	4601      	mov	r1, r0
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	0a1b      	lsrs	r3, r3, #8
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4a03      	ldr	r2, [pc, #12]	; (8001e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e42:	5cd3      	ldrb	r3, [r2, r3]
 8001e44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	08002b08 	.word	0x08002b08

08001e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e58:	f7ff ffde 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e5c:	4601      	mov	r1, r0
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	0adb      	lsrs	r3, r3, #11
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	4a03      	ldr	r2, [pc, #12]	; (8001e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e6a:	5cd3      	ldrb	r3, [r2, r3]
 8001e6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000
 8001e78:	08002b08 	.word	0x08002b08

08001e7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e84:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <RCC_Delay+0x34>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <RCC_Delay+0x38>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	0a5b      	lsrs	r3, r3, #9
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	fb02 f303 	mul.w	r3, r2, r3
 8001e96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e98:	bf00      	nop
  }
  while (Delay --);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1e5a      	subs	r2, r3, #1
 8001e9e:	60fa      	str	r2, [r7, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f9      	bne.n	8001e98 <RCC_Delay+0x1c>
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000008 	.word	0x20000008
 8001eb4:	10624dd3 	.word	0x10624dd3

08001eb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e03f      	b.n	8001f4a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d106      	bne.n	8001ee4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 fcfa 	bl	80028d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2224      	movs	r2, #36	; 0x24
 8001ee8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001efa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f90b 	bl	8002118 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695a      	ldr	r2, [r3, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b088      	sub	sp, #32
 8001f56:	af02      	add	r7, sp, #8
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b20      	cmp	r3, #32
 8001f70:	f040 8083 	bne.w	800207a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <HAL_UART_Transmit+0x2e>
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e07b      	b.n	800207c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_UART_Transmit+0x40>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e074      	b.n	800207c <HAL_UART_Transmit+0x12a>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2221      	movs	r2, #33	; 0x21
 8001fa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001fa8:	f7fe f928 	bl	80001fc <HAL_GetTick>
 8001fac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	88fa      	ldrh	r2, [r7, #6]
 8001fb2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	88fa      	ldrh	r2, [r7, #6]
 8001fb8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fba:	e042      	b.n	8002042 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fd2:	d122      	bne.n	800201a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2180      	movs	r1, #128	; 0x80
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f850 	bl	8002084 <UART_WaitOnFlagUntilTimeout>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e046      	b.n	800207c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002000:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d103      	bne.n	8002012 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	3302      	adds	r3, #2
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	e017      	b.n	8002042 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	3301      	adds	r3, #1
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	e013      	b.n	8002042 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2200      	movs	r2, #0
 8002022:	2180      	movs	r1, #128	; 0x80
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 f82d 	bl	8002084 <UART_WaitOnFlagUntilTimeout>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e023      	b.n	800207c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	60ba      	str	r2, [r7, #8]
 800203a:	781a      	ldrb	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002046:	b29b      	uxth	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1b7      	bne.n	8001fbc <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2200      	movs	r2, #0
 8002054:	2140      	movs	r1, #64	; 0x40
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 f814 	bl	8002084 <UART_WaitOnFlagUntilTimeout>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e00a      	b.n	800207c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2220      	movs	r2, #32
 800206a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	e000      	b.n	800207c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800207a:	2302      	movs	r3, #2
  }
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	4613      	mov	r3, r2
 8002092:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002094:	e02c      	b.n	80020f0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800209c:	d028      	beq.n	80020f0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d007      	beq.n	80020b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80020a4:	f7fe f8aa 	bl	80001fc <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d21d      	bcs.n	80020f0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020c2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695a      	ldr	r2, [r3, #20]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0201 	bic.w	r2, r2, #1
 80020d2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2220      	movs	r2, #32
 80020e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e00f      	b.n	8002110 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4013      	ands	r3, r2
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	bf0c      	ite	eq
 8002100:	2301      	moveq	r3, #1
 8002102:	2300      	movne	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	429a      	cmp	r2, r3
 800210c:	d0c3      	beq.n	8002096 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	4313      	orrs	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002152:	f023 030c 	bic.w	r3, r3, #12
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	68f9      	ldr	r1, [r7, #12]
 800215c:	430b      	orrs	r3, r1
 800215e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a52      	ldr	r2, [pc, #328]	; (80022c4 <UART_SetConfig+0x1ac>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d14e      	bne.n	800221e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002180:	f7ff fe68 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 8002184:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	009a      	lsls	r2, r3, #2
 8002190:	441a      	add	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	fbb2 f3f3 	udiv	r3, r2, r3
 800219c:	4a4a      	ldr	r2, [pc, #296]	; (80022c8 <UART_SetConfig+0x1b0>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	0119      	lsls	r1, r3, #4
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	009a      	lsls	r2, r3, #2
 80021b0:	441a      	add	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80021bc:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <UART_SetConfig+0x1b0>)
 80021be:	fba3 0302 	umull	r0, r3, r3, r2
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	2064      	movs	r0, #100	; 0x64
 80021c6:	fb00 f303 	mul.w	r3, r0, r3
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	3332      	adds	r3, #50	; 0x32
 80021d0:	4a3d      	ldr	r2, [pc, #244]	; (80022c8 <UART_SetConfig+0x1b0>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021dc:	4419      	add	r1, r3
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	009a      	lsls	r2, r3, #2
 80021e8:	441a      	add	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80021f4:	4b34      	ldr	r3, [pc, #208]	; (80022c8 <UART_SetConfig+0x1b0>)
 80021f6:	fba3 0302 	umull	r0, r3, r3, r2
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	2064      	movs	r0, #100	; 0x64
 80021fe:	fb00 f303 	mul.w	r3, r0, r3
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	3332      	adds	r3, #50	; 0x32
 8002208:	4a2f      	ldr	r2, [pc, #188]	; (80022c8 <UART_SetConfig+0x1b0>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	f003 020f 	and.w	r2, r3, #15
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	440a      	add	r2, r1
 800221a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800221c:	e04d      	b.n	80022ba <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800221e:	f7ff fe05 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8002222:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	009a      	lsls	r2, r3, #2
 800222e:	441a      	add	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	fbb2 f3f3 	udiv	r3, r2, r3
 800223a:	4a23      	ldr	r2, [pc, #140]	; (80022c8 <UART_SetConfig+0x1b0>)
 800223c:	fba2 2303 	umull	r2, r3, r2, r3
 8002240:	095b      	lsrs	r3, r3, #5
 8002242:	0119      	lsls	r1, r3, #4
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	009a      	lsls	r2, r3, #2
 800224e:	441a      	add	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	fbb2 f2f3 	udiv	r2, r2, r3
 800225a:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <UART_SetConfig+0x1b0>)
 800225c:	fba3 0302 	umull	r0, r3, r3, r2
 8002260:	095b      	lsrs	r3, r3, #5
 8002262:	2064      	movs	r0, #100	; 0x64
 8002264:	fb00 f303 	mul.w	r3, r0, r3
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	3332      	adds	r3, #50	; 0x32
 800226e:	4a16      	ldr	r2, [pc, #88]	; (80022c8 <UART_SetConfig+0x1b0>)
 8002270:	fba2 2303 	umull	r2, r3, r2, r3
 8002274:	095b      	lsrs	r3, r3, #5
 8002276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800227a:	4419      	add	r1, r3
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	009a      	lsls	r2, r3, #2
 8002286:	441a      	add	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <UART_SetConfig+0x1b0>)
 8002294:	fba3 0302 	umull	r0, r3, r3, r2
 8002298:	095b      	lsrs	r3, r3, #5
 800229a:	2064      	movs	r0, #100	; 0x64
 800229c:	fb00 f303 	mul.w	r3, r0, r3
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	3332      	adds	r3, #50	; 0x32
 80022a6:	4a08      	ldr	r2, [pc, #32]	; (80022c8 <UART_SetConfig+0x1b0>)
 80022a8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ac:	095b      	lsrs	r3, r3, #5
 80022ae:	f003 020f 	and.w	r2, r3, #15
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	440a      	add	r2, r1
 80022b8:	609a      	str	r2, [r3, #8]
}
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40013800 	.word	0x40013800
 80022c8:	51eb851f 	.word	0x51eb851f

080022cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022d2:	f7fd ff3b 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022d6:	f000 f83b 	bl	8002350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022da:	f000 f8d7 	bl	800248c <MX_GPIO_Init>
  MX_I2C1_Init();
 80022de:	f000 f87d 	bl	80023dc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80022e2:	f000 f8a9 	bl	8002438 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  begin(&hi2c1, 0x27 );
 80022e6:	2127      	movs	r1, #39	; 0x27
 80022e8:	4818      	ldr	r0, [pc, #96]	; (800234c <main+0x80>)
 80022ea:	f000 f9fb 	bl	80026e4 <begin>
  for(uint8_t i=0; i<15; i++){
 80022ee:	2300      	movs	r3, #0
 80022f0:	71fb      	strb	r3, [r7, #7]
 80022f2:	e00c      	b.n	800230e <main+0x42>
      pinMode(i, INPUT);
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	2100      	movs	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 fa11 	bl	8002720 <pinMode>
      pullUp(i, HIGH);
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	2101      	movs	r1, #1
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fa24 	bl	8002750 <pullUp>
  for(uint8_t i=0; i<15; i++){
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	3301      	adds	r3, #1
 800230c:	71fb      	strb	r3, [r7, #7]
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	2b0e      	cmp	r3, #14
 8002312:	d9ef      	bls.n	80022f4 <main+0x28>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(uint8_t i=0; i<15; i++){
 8002314:	2300      	movs	r3, #0
 8002316:	71bb      	strb	r3, [r7, #6]
 8002318:	e014      	b.n	8002344 <main+0x78>
	    if(!digitalRead(i)){
 800231a:	79bb      	ldrb	r3, [r7, #6]
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fa29 	bl	8002774 <digitalRead>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10a      	bne.n	800233e <main+0x72>
//	      print("boton numero: ");
//	      print(i-3);
	      while(!digitalRead(i)){
 8002328:	e002      	b.n	8002330 <main+0x64>
	      delay(100);
 800232a:	2064      	movs	r0, #100	; 0x64
 800232c:	f7fd ff70 	bl	8000210 <HAL_Delay>
	      while(!digitalRead(i)){
 8002330:	79bb      	ldrb	r3, [r7, #6]
 8002332:	4618      	mov	r0, r3
 8002334:	f000 fa1e 	bl	8002774 <digitalRead>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f5      	beq.n	800232a <main+0x5e>
	  for(uint8_t i=0; i<15; i++){
 800233e:	79bb      	ldrb	r3, [r7, #6]
 8002340:	3301      	adds	r3, #1
 8002342:	71bb      	strb	r3, [r7, #6]
 8002344:	79bb      	ldrb	r3, [r7, #6]
 8002346:	2b0e      	cmp	r3, #14
 8002348:	d9e7      	bls.n	800231a <main+0x4e>
 800234a:	e7e3      	b.n	8002314 <main+0x48>
 800234c:	20000034 	.word	0x20000034

08002350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b090      	sub	sp, #64	; 0x40
 8002354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002356:	f107 0318 	add.w	r3, r7, #24
 800235a:	2228      	movs	r2, #40	; 0x28
 800235c:	2100      	movs	r1, #0
 800235e:	4618      	mov	r0, r3
 8002360:	f000 fba8 	bl	8002ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]
 8002370:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002372:	2301      	movs	r3, #1
 8002374:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002376:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800237a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800237c:	2300      	movs	r3, #0
 800237e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002380:	2301      	movs	r3, #1
 8002382:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002384:	2302      	movs	r3, #2
 8002386:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002388:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800238c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800238e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002392:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002394:	f107 0318 	add.w	r3, r7, #24
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff f971 	bl	8001680 <HAL_RCC_OscConfig>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80023a4:	f000 f8e0 	bl	8002568 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023a8:	230f      	movs	r3, #15
 80023aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023ac:	2302      	movs	r3, #2
 80023ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023be:	1d3b      	adds	r3, r7, #4
 80023c0:	2102      	movs	r1, #2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fbdc 	bl	8001b80 <HAL_RCC_ClockConfig>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80023ce:	f000 f8cb 	bl	8002568 <Error_Handler>
  }
}
 80023d2:	bf00      	nop
 80023d4:	3740      	adds	r7, #64	; 0x40
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <MX_I2C1_Init+0x50>)
 80023e2:	4a13      	ldr	r2, [pc, #76]	; (8002430 <MX_I2C1_Init+0x54>)
 80023e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <MX_I2C1_Init+0x50>)
 80023e8:	4a12      	ldr	r2, [pc, #72]	; (8002434 <MX_I2C1_Init+0x58>)
 80023ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <MX_I2C1_Init+0x50>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <MX_I2C1_Init+0x50>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <MX_I2C1_Init+0x50>)
 80023fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <MX_I2C1_Init+0x50>)
 8002402:	2200      	movs	r2, #0
 8002404:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <MX_I2C1_Init+0x50>)
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <MX_I2C1_Init+0x50>)
 800240e:	2200      	movs	r2, #0
 8002410:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <MX_I2C1_Init+0x50>)
 8002414:	2200      	movs	r2, #0
 8002416:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002418:	4804      	ldr	r0, [pc, #16]	; (800242c <MX_I2C1_Init+0x50>)
 800241a:	f7fe f9d5 	bl	80007c8 <HAL_I2C_Init>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002424:	f000 f8a0 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000034 	.word	0x20000034
 8002430:	40005400 	.word	0x40005400
 8002434:	000186a0 	.word	0x000186a0

08002438 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800243c:	4b11      	ldr	r3, [pc, #68]	; (8002484 <MX_USART2_UART_Init+0x4c>)
 800243e:	4a12      	ldr	r2, [pc, #72]	; (8002488 <MX_USART2_UART_Init+0x50>)
 8002440:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002442:	4b10      	ldr	r3, [pc, #64]	; (8002484 <MX_USART2_UART_Init+0x4c>)
 8002444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002448:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800244a:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <MX_USART2_UART_Init+0x4c>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <MX_USART2_UART_Init+0x4c>)
 8002452:	2200      	movs	r2, #0
 8002454:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002456:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <MX_USART2_UART_Init+0x4c>)
 8002458:	2200      	movs	r2, #0
 800245a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800245c:	4b09      	ldr	r3, [pc, #36]	; (8002484 <MX_USART2_UART_Init+0x4c>)
 800245e:	220c      	movs	r2, #12
 8002460:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002462:	4b08      	ldr	r3, [pc, #32]	; (8002484 <MX_USART2_UART_Init+0x4c>)
 8002464:	2200      	movs	r2, #0
 8002466:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <MX_USART2_UART_Init+0x4c>)
 800246a:	2200      	movs	r2, #0
 800246c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800246e:	4805      	ldr	r0, [pc, #20]	; (8002484 <MX_USART2_UART_Init+0x4c>)
 8002470:	f7ff fd22 	bl	8001eb8 <HAL_UART_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800247a:	f000 f875 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000088 	.word	0x20000088
 8002488:	40004400 	.word	0x40004400

0800248c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002492:	f107 0310 	add.w	r3, r7, #16
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a0:	4b2d      	ldr	r3, [pc, #180]	; (8002558 <MX_GPIO_Init+0xcc>)
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	4a2c      	ldr	r2, [pc, #176]	; (8002558 <MX_GPIO_Init+0xcc>)
 80024a6:	f043 0310 	orr.w	r3, r3, #16
 80024aa:	6193      	str	r3, [r2, #24]
 80024ac:	4b2a      	ldr	r3, [pc, #168]	; (8002558 <MX_GPIO_Init+0xcc>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024b8:	4b27      	ldr	r3, [pc, #156]	; (8002558 <MX_GPIO_Init+0xcc>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	4a26      	ldr	r2, [pc, #152]	; (8002558 <MX_GPIO_Init+0xcc>)
 80024be:	f043 0320 	orr.w	r3, r3, #32
 80024c2:	6193      	str	r3, [r2, #24]
 80024c4:	4b24      	ldr	r3, [pc, #144]	; (8002558 <MX_GPIO_Init+0xcc>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f003 0320 	and.w	r3, r3, #32
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d0:	4b21      	ldr	r3, [pc, #132]	; (8002558 <MX_GPIO_Init+0xcc>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	4a20      	ldr	r2, [pc, #128]	; (8002558 <MX_GPIO_Init+0xcc>)
 80024d6:	f043 0304 	orr.w	r3, r3, #4
 80024da:	6193      	str	r3, [r2, #24]
 80024dc:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <MX_GPIO_Init+0xcc>)
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	607b      	str	r3, [r7, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e8:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <MX_GPIO_Init+0xcc>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	4a1a      	ldr	r2, [pc, #104]	; (8002558 <MX_GPIO_Init+0xcc>)
 80024ee:	f043 0308 	orr.w	r3, r3, #8
 80024f2:	6193      	str	r3, [r2, #24]
 80024f4:	4b18      	ldr	r3, [pc, #96]	; (8002558 <MX_GPIO_Init+0xcc>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	603b      	str	r3, [r7, #0]
 80024fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002500:	2200      	movs	r2, #0
 8002502:	2120      	movs	r1, #32
 8002504:	4815      	ldr	r0, [pc, #84]	; (800255c <MX_GPIO_Init+0xd0>)
 8002506:	f7fe f90d 	bl	8000724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800250a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800250e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002510:	4b13      	ldr	r3, [pc, #76]	; (8002560 <MX_GPIO_Init+0xd4>)
 8002512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002518:	f107 0310 	add.w	r3, r7, #16
 800251c:	4619      	mov	r1, r3
 800251e:	4811      	ldr	r0, [pc, #68]	; (8002564 <MX_GPIO_Init+0xd8>)
 8002520:	f7fd ffa6 	bl	8000470 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002524:	2320      	movs	r3, #32
 8002526:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002528:	2301      	movs	r3, #1
 800252a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002530:	2302      	movs	r3, #2
 8002532:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002534:	f107 0310 	add.w	r3, r7, #16
 8002538:	4619      	mov	r1, r3
 800253a:	4808      	ldr	r0, [pc, #32]	; (800255c <MX_GPIO_Init+0xd0>)
 800253c:	f7fd ff98 	bl	8000470 <HAL_GPIO_Init>


  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002540:	2200      	movs	r2, #0
 8002542:	2100      	movs	r1, #0
 8002544:	2028      	movs	r0, #40	; 0x28
 8002546:	f7fd ff5c 	bl	8000402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800254a:	2028      	movs	r0, #40	; 0x28
 800254c:	f7fd ff75 	bl	800043a <HAL_NVIC_EnableIRQ>

}
 8002550:	bf00      	nop
 8002552:	3720      	adds	r7, #32
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000
 800255c:	40010800 	.word	0x40010800
 8002560:	10110000 	.word	0x10110000
 8002564:	40011000 	.word	0x40011000

08002568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_UART_Transmit(&huart2, "ERROR\r\n", 10, 150);
 800256c:	2396      	movs	r3, #150	; 0x96
 800256e:	220a      	movs	r2, #10
 8002570:	4906      	ldr	r1, [pc, #24]	; (800258c <Error_Handler+0x24>)
 8002572:	4807      	ldr	r0, [pc, #28]	; (8002590 <Error_Handler+0x28>)
 8002574:	f7ff fced 	bl	8001f52 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002578:	2120      	movs	r1, #32
 800257a:	4806      	ldr	r0, [pc, #24]	; (8002594 <Error_Handler+0x2c>)
 800257c:	f7fe f8ea 	bl	8000754 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8002580:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002584:	f7fd fe44 	bl	8000210 <HAL_Delay>
  /* USER CODE END Error_Handler_Debug */
}
 8002588:	bf00      	nop
 800258a:	bd80      	pop	{r7, pc}
 800258c:	08002af0 	.word	0x08002af0
 8002590:	20000088 	.word	0x20000088
 8002594:	40010800 	.word	0x40010800

08002598 <bitForPin>:
static uint8_t data = 0;

/**
 * Bit number associated to a give Pin
 */
uint8_t bitForPin(uint8_t pin){
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
	return pin%8;
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	b2db      	uxtb	r3, r3
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <regForPin>:

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	71fb      	strb	r3, [r7, #7]
 80025be:	460b      	mov	r3, r1
 80025c0:	71bb      	strb	r3, [r7, #6]
 80025c2:	4613      	mov	r3, r2
 80025c4:	717b      	strb	r3, [r7, #5]
	return(pin<8) ?portAaddr:portBaddr;
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	2b07      	cmp	r3, #7
 80025ca:	d801      	bhi.n	80025d0 <regForPin+0x1c>
 80025cc:	79bb      	ldrb	r3, [r7, #6]
 80025ce:	e000      	b.n	80025d2 <regForPin+0x1e>
 80025d0:	797b      	ldrb	r3, [r7, #5]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <writeRegister>:

void writeRegister(uint8_t regAddr, uint8_t regValue){
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	4603      	mov	r3, r0
 80025e4:	460a      	mov	r2, r1
 80025e6:	71fb      	strb	r3, [r7, #7]
 80025e8:	4613      	mov	r3, r2
 80025ea:	71bb      	strb	r3, [r7, #6]
	uint8_t temp [] = {regAddr, regValue};
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	733b      	strb	r3, [r7, #12]
 80025f0:	79bb      	ldrb	r3, [r7, #6]
 80025f2:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit((I2C_HandleTypeDef*) I2C, (uint16_t)(i2caddr), &temp, 2, 350);
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <writeRegister+0x3c>)
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <writeRegister+0x40>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	b299      	uxth	r1, r3
 80025fe:	f107 020c 	add.w	r2, r7, #12
 8002602:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	2302      	movs	r3, #2
 800260a:	f7fe fa05 	bl	8000a18 <HAL_I2C_Master_Transmit>
//	wiresend(regAddr);
//	wiresend(regValue);
//	Wire.endTransmission();
}
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000028 	.word	0x20000028
 800261c:	2000002c 	.word	0x2000002c

08002620 <updateRegisterBit>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	4604      	mov	r4, r0
 8002628:	4608      	mov	r0, r1
 800262a:	4611      	mov	r1, r2
 800262c:	461a      	mov	r2, r3
 800262e:	4623      	mov	r3, r4
 8002630:	71fb      	strb	r3, [r7, #7]
 8002632:	4603      	mov	r3, r0
 8002634:	71bb      	strb	r3, [r7, #6]
 8002636:	460b      	mov	r3, r1
 8002638:	717b      	strb	r3, [r7, #5]
 800263a:	4613      	mov	r3, r2
 800263c:	713b      	strb	r3, [r7, #4]
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
 800263e:	793a      	ldrb	r2, [r7, #4]
 8002640:	7979      	ldrb	r1, [r7, #5]
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff ffb5 	bl	80025b4 <regForPin>
 800264a:	4603      	mov	r3, r0
 800264c:	73bb      	strb	r3, [r7, #14]
	uint8_t bit=bitForPin(pin);
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ffa1 	bl	8002598 <bitForPin>
 8002656:	4603      	mov	r3, r0
 8002658:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
 800265a:	7bbb      	ldrb	r3, [r7, #14]
 800265c:	4618      	mov	r0, r3
 800265e:	f000 f823 	bl	80026a8 <readRegister>
 8002662:	4603      	mov	r3, r0
 8002664:	73fb      	strb	r3, [r7, #15]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
 8002666:	79bb      	ldrb	r3, [r7, #6]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <updateRegisterBit+0x5e>
 800266c:	7b7b      	ldrb	r3, [r7, #13]
 800266e:	2201      	movs	r2, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	b2da      	uxtb	r2, r3
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	4313      	orrs	r3, r2
 800267a:	73fb      	strb	r3, [r7, #15]
 800267c:	e009      	b.n	8002692 <updateRegisterBit+0x72>
 800267e:	7b7b      	ldrb	r3, [r7, #13]
 8002680:	2201      	movs	r2, #1
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	b2da      	uxtb	r2, r3
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	4013      	ands	r3, r2
 8002690:	73fb      	strb	r3, [r7, #15]

	writeRegister(regAddr,regValue);
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	7bbb      	ldrb	r3, [r7, #14]
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff9f 	bl	80025dc <writeRegister>
}
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd90      	pop	{r4, r7, pc}
	...

080026a8 <readRegister>:


/**
 * Reads a given register
 */
uint8_t readRegister(uint8_t addr){
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af02      	add	r7, sp, #8
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
//	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
//	wiresend(addr);
//	Wire.endTransmission();
//	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
//	return wirerecv();
	HAL_I2C_Master_Receive((I2C_HandleTypeDef*) I2C, (uint16_t)(i2caddr), &data, 2, 350);
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <readRegister+0x30>)
 80026b4:	6818      	ldr	r0, [r3, #0]
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <readRegister+0x34>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	b299      	uxth	r1, r3
 80026bc:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	2302      	movs	r3, #2
 80026c4:	4a06      	ldr	r2, [pc, #24]	; (80026e0 <readRegister+0x38>)
 80026c6:	f7fe faa5 	bl	8000c14 <HAL_I2C_Master_Receive>
	return data;
 80026ca:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <readRegister+0x38>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000028 	.word	0x20000028
 80026dc:	2000002c 	.word	0x2000002c
 80026e0:	2000002d 	.word	0x2000002d

080026e4 <begin>:

// Functions for Arduino like
void begin(I2C_HandleTypeDef * I2C_Handler, uint8_t addr) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	70fb      	strb	r3, [r7, #3]

	I2C = I2C_Handler;
 80026f0:	4a09      	ldr	r2, [pc, #36]	; (8002718 <begin+0x34>)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6013      	str	r3, [r2, #0]
	i2caddr = addr<<1;
 80026f6:	78fb      	ldrb	r3, [r7, #3]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	4b07      	ldr	r3, [pc, #28]	; (800271c <begin+0x38>)
 80026fe:	701a      	strb	r2, [r3, #0]

	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
 8002700:	21ff      	movs	r1, #255	; 0xff
 8002702:	2000      	movs	r0, #0
 8002704:	f7ff ff6a 	bl	80025dc <writeRegister>
	writeRegister(MCP23017_IODIRB,0xff);
 8002708:	21ff      	movs	r1, #255	; 0xff
 800270a:	2001      	movs	r0, #1
 800270c:	f7ff ff66 	bl	80025dc <writeRegister>
}
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	20000028 	.word	0x20000028
 800271c:	2000002c 	.word	0x2000002c

08002720 <pinMode>:

/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void pinMode(uint8_t p, uint8_t d) {
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	460a      	mov	r2, r1
 800272a:	71fb      	strb	r3, [r7, #7]
 800272c:	4613      	mov	r3, r2
 800272e:	71bb      	strb	r3, [r7, #6]
	updateRegisterBit(p,(d==INPUT),MCP23017_IODIRA,MCP23017_IODIRB);
 8002730:	79bb      	ldrb	r3, [r7, #6]
 8002732:	2b00      	cmp	r3, #0
 8002734:	bf0c      	ite	eq
 8002736:	2301      	moveq	r3, #1
 8002738:	2300      	movne	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	4619      	mov	r1, r3
 800273e:	79f8      	ldrb	r0, [r7, #7]
 8002740:	2301      	movs	r3, #1
 8002742:	2200      	movs	r2, #0
 8002744:	f7ff ff6c 	bl	8002620 <updateRegisterBit>
}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <pullUp>:

/**
 * Enable a pullUp resistor for a given pin
 */
void pullUp(uint8_t p, uint8_t d) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	460a      	mov	r2, r1
 800275a:	71fb      	strb	r3, [r7, #7]
 800275c:	4613      	mov	r3, r2
 800275e:	71bb      	strb	r3, [r7, #6]
	updateRegisterBit(p,d,MCP23017_GPPUA,MCP23017_GPPUB);
 8002760:	79b9      	ldrb	r1, [r7, #6]
 8002762:	79f8      	ldrb	r0, [r7, #7]
 8002764:	230d      	movs	r3, #13
 8002766:	220c      	movs	r2, #12
 8002768:	f7ff ff5a 	bl	8002620 <updateRegisterBit>
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <digitalRead>:


uint8_t digitalRead(uint8_t pin) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
	uint8_t bit=bitForPin(pin);
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff09 	bl	8002598 <bitForPin>
 8002786:	4603      	mov	r3, r0
 8002788:	73fb      	strb	r3, [r7, #15]
	uint8_t regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	2213      	movs	r2, #19
 800278e:	2112      	movs	r1, #18
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff0f 	bl	80025b4 <regForPin>
 8002796:	4603      	mov	r3, r0
 8002798:	73bb      	strb	r3, [r7, #14]
	return (readRegister(regAddr) >> bit) & 0x1;
 800279a:	7bbb      	ldrb	r3, [r7, #14]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff83 	bl	80026a8 <readRegister>
 80027a2:	4603      	mov	r3, r0
 80027a4:	461a      	mov	r2, r3
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	fa42 f303 	asr.w	r3, r2, r3
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	b2db      	uxtb	r3, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027c2:	4b15      	ldr	r3, [pc, #84]	; (8002818 <HAL_MspInit+0x5c>)
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	4a14      	ldr	r2, [pc, #80]	; (8002818 <HAL_MspInit+0x5c>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	6193      	str	r3, [r2, #24]
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_MspInit+0x5c>)
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <HAL_MspInit+0x5c>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	4a0e      	ldr	r2, [pc, #56]	; (8002818 <HAL_MspInit+0x5c>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e4:	61d3      	str	r3, [r2, #28]
 80027e6:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <HAL_MspInit+0x5c>)
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	607b      	str	r3, [r7, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027f2:	4b0a      	ldr	r3, [pc, #40]	; (800281c <HAL_MspInit+0x60>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	4a04      	ldr	r2, [pc, #16]	; (800281c <HAL_MspInit+0x60>)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800280e:	bf00      	nop
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr
 8002818:	40021000 	.word	0x40021000
 800281c:	40010000 	.word	0x40010000

08002820 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	; 0x28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	f107 0314 	add.w	r3, r7, #20
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a23      	ldr	r2, [pc, #140]	; (80028c8 <HAL_I2C_MspInit+0xa8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d13e      	bne.n	80028be <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002840:	4b22      	ldr	r3, [pc, #136]	; (80028cc <HAL_I2C_MspInit+0xac>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	4a21      	ldr	r2, [pc, #132]	; (80028cc <HAL_I2C_MspInit+0xac>)
 8002846:	f043 0308 	orr.w	r3, r3, #8
 800284a:	6193      	str	r3, [r2, #24]
 800284c:	4b1f      	ldr	r3, [pc, #124]	; (80028cc <HAL_I2C_MspInit+0xac>)
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002858:	f44f 7340 	mov.w	r3, #768	; 0x300
 800285c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800285e:	2312      	movs	r3, #18
 8002860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002862:	2303      	movs	r3, #3
 8002864:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	4619      	mov	r1, r3
 800286c:	4818      	ldr	r0, [pc, #96]	; (80028d0 <HAL_I2C_MspInit+0xb0>)
 800286e:	f7fd fdff 	bl	8000470 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002872:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <HAL_I2C_MspInit+0xb4>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	f043 0302 	orr.w	r3, r3, #2
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
 8002888:	4a12      	ldr	r2, [pc, #72]	; (80028d4 <HAL_I2C_MspInit+0xb4>)
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800288e:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <HAL_I2C_MspInit+0xac>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	4a0e      	ldr	r2, [pc, #56]	; (80028cc <HAL_I2C_MspInit+0xac>)
 8002894:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002898:	61d3      	str	r3, [r2, #28]
 800289a:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <HAL_I2C_MspInit+0xac>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */
    __HAL_RCC_I2C1_FORCE_RESET();
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_I2C_MspInit+0xac>)
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	4a08      	ldr	r2, [pc, #32]	; (80028cc <HAL_I2C_MspInit+0xac>)
 80028ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028b0:	6113      	str	r3, [r2, #16]
    __HAL_RCC_I2C1_RELEASE_RESET();
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_I2C_MspInit+0xac>)
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	4a05      	ldr	r2, [pc, #20]	; (80028cc <HAL_I2C_MspInit+0xac>)
 80028b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028bc:	6113      	str	r3, [r2, #16]
  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028be:	bf00      	nop
 80028c0:	3728      	adds	r7, #40	; 0x28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40005400 	.word	0x40005400
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40010c00 	.word	0x40010c00
 80028d4:	40010000 	.word	0x40010000

080028d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e0:	f107 0310 	add.w	r3, r7, #16
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a15      	ldr	r2, [pc, #84]	; (8002948 <HAL_UART_MspInit+0x70>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d123      	bne.n	8002940 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028f8:	4b14      	ldr	r3, [pc, #80]	; (800294c <HAL_UART_MspInit+0x74>)
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	4a13      	ldr	r2, [pc, #76]	; (800294c <HAL_UART_MspInit+0x74>)
 80028fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002902:	61d3      	str	r3, [r2, #28]
 8002904:	4b11      	ldr	r3, [pc, #68]	; (800294c <HAL_UART_MspInit+0x74>)
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002910:	4b0e      	ldr	r3, [pc, #56]	; (800294c <HAL_UART_MspInit+0x74>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	4a0d      	ldr	r2, [pc, #52]	; (800294c <HAL_UART_MspInit+0x74>)
 8002916:	f043 0304 	orr.w	r3, r3, #4
 800291a:	6193      	str	r3, [r2, #24]
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <HAL_UART_MspInit+0x74>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002928:	230c      	movs	r3, #12
 800292a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292c:	2302      	movs	r3, #2
 800292e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002930:	2302      	movs	r3, #2
 8002932:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002934:	f107 0310 	add.w	r3, r7, #16
 8002938:	4619      	mov	r1, r3
 800293a:	4805      	ldr	r0, [pc, #20]	; (8002950 <HAL_UART_MspInit+0x78>)
 800293c:	f7fd fd98 	bl	8000470 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002940:	bf00      	nop
 8002942:	3720      	adds	r7, #32
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40004400 	.word	0x40004400
 800294c:	40021000 	.word	0x40021000
 8002950:	40010800 	.word	0x40010800

08002954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002964:	e7fe      	b.n	8002964 <HardFault_Handler+0x4>

08002966 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002966:	b480      	push	{r7}
 8002968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800296a:	e7fe      	b.n	800296a <MemManage_Handler+0x4>

0800296c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002970:	e7fe      	b.n	8002970 <BusFault_Handler+0x4>

08002972 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002976:	e7fe      	b.n	8002976 <UsageFault_Handler+0x4>

08002978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029a0:	f7fd fc1a 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029a4:	bf00      	nop
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80029ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80029b0:	f7fd fee8 	bl	8000784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80029bc:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <SystemInit+0x5c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a14      	ldr	r2, [pc, #80]	; (8002a14 <SystemInit+0x5c>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80029c8:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <SystemInit+0x5c>)
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	4911      	ldr	r1, [pc, #68]	; (8002a14 <SystemInit+0x5c>)
 80029ce:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <SystemInit+0x60>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80029d4:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <SystemInit+0x5c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0e      	ldr	r2, [pc, #56]	; (8002a14 <SystemInit+0x5c>)
 80029da:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80029de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <SystemInit+0x5c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a0a      	ldr	r2, [pc, #40]	; (8002a14 <SystemInit+0x5c>)
 80029ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80029f0:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <SystemInit+0x5c>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4a07      	ldr	r2, [pc, #28]	; (8002a14 <SystemInit+0x5c>)
 80029f6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80029fa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <SystemInit+0x5c>)
 80029fe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002a02:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <SystemInit+0x64>)
 8002a06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a0a:	609a      	str	r2, [r3, #8]
#endif 
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	40021000 	.word	0x40021000
 8002a18:	f8ff0000 	.word	0xf8ff0000
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002a20:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002a22:	e003      	b.n	8002a2c <LoopCopyDataInit>

08002a24 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002a26:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002a28:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002a2a:	3104      	adds	r1, #4

08002a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002a2c:	480a      	ldr	r0, [pc, #40]	; (8002a58 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002a2e:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002a30:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002a32:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002a34:	d3f6      	bcc.n	8002a24 <CopyDataInit>
  ldr r2, =_sbss
 8002a36:	4a0a      	ldr	r2, [pc, #40]	; (8002a60 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002a38:	e002      	b.n	8002a40 <LoopFillZerobss>

08002a3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002a3a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002a3c:	f842 3b04 	str.w	r3, [r2], #4

08002a40 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002a40:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002a42:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002a44:	d3f9      	bcc.n	8002a3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a46:	f7ff ffb7 	bl	80029b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a4a:	f000 f80f 	bl	8002a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a4e:	f7ff fc3d 	bl	80022cc <main>
  bx lr
 8002a52:	4770      	bx	lr
  ldr r3, =_sidata
 8002a54:	08002b18 	.word	0x08002b18
  ldr r0, =_sdata
 8002a58:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002a60:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002a64:	200000c8 	.word	0x200000c8

08002a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a68:	e7fe      	b.n	8002a68 <ADC1_2_IRQHandler>
	...

08002a6c <__libc_init_array>:
 8002a6c:	b570      	push	{r4, r5, r6, lr}
 8002a6e:	2500      	movs	r5, #0
 8002a70:	4e0c      	ldr	r6, [pc, #48]	; (8002aa4 <__libc_init_array+0x38>)
 8002a72:	4c0d      	ldr	r4, [pc, #52]	; (8002aa8 <__libc_init_array+0x3c>)
 8002a74:	1ba4      	subs	r4, r4, r6
 8002a76:	10a4      	asrs	r4, r4, #2
 8002a78:	42a5      	cmp	r5, r4
 8002a7a:	d109      	bne.n	8002a90 <__libc_init_array+0x24>
 8002a7c:	f000 f822 	bl	8002ac4 <_init>
 8002a80:	2500      	movs	r5, #0
 8002a82:	4e0a      	ldr	r6, [pc, #40]	; (8002aac <__libc_init_array+0x40>)
 8002a84:	4c0a      	ldr	r4, [pc, #40]	; (8002ab0 <__libc_init_array+0x44>)
 8002a86:	1ba4      	subs	r4, r4, r6
 8002a88:	10a4      	asrs	r4, r4, #2
 8002a8a:	42a5      	cmp	r5, r4
 8002a8c:	d105      	bne.n	8002a9a <__libc_init_array+0x2e>
 8002a8e:	bd70      	pop	{r4, r5, r6, pc}
 8002a90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a94:	4798      	blx	r3
 8002a96:	3501      	adds	r5, #1
 8002a98:	e7ee      	b.n	8002a78 <__libc_init_array+0xc>
 8002a9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a9e:	4798      	blx	r3
 8002aa0:	3501      	adds	r5, #1
 8002aa2:	e7f2      	b.n	8002a8a <__libc_init_array+0x1e>
 8002aa4:	08002b10 	.word	0x08002b10
 8002aa8:	08002b10 	.word	0x08002b10
 8002aac:	08002b10 	.word	0x08002b10
 8002ab0:	08002b14 	.word	0x08002b14

08002ab4 <memset>:
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	4402      	add	r2, r0
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d100      	bne.n	8002abe <memset+0xa>
 8002abc:	4770      	bx	lr
 8002abe:	f803 1b01 	strb.w	r1, [r3], #1
 8002ac2:	e7f9      	b.n	8002ab8 <memset+0x4>

08002ac4 <_init>:
 8002ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac6:	bf00      	nop
 8002ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aca:	bc08      	pop	{r3}
 8002acc:	469e      	mov	lr, r3
 8002ace:	4770      	bx	lr

08002ad0 <_fini>:
 8002ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad2:	bf00      	nop
 8002ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad6:	bc08      	pop	{r3}
 8002ad8:	469e      	mov	lr, r3
 8002ada:	4770      	bx	lr
