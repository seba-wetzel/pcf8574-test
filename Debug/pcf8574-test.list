
pcf8574-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003408  08003408  00013408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800347c  0800347c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800347c  0800347c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800347c  0800347c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800347c  0800347c  0001347c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003480  08003480  00013480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000070  080034f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  080034f4  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008891  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000167e  00000000  00000000  0002892a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e8  00000000  00000000  00029fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000840  00000000  00000000  0002a890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013533  00000000  00000000  0002b0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007063  00000000  00000000  0003e603  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d5fa  00000000  00000000  00045666  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b2c60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002760  00000000  00000000  000b2cdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080033f0 	.word	0x080033f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080033f0 	.word	0x080033f0

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f945 	bl	80003ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fb7a 	bl	8002860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f95d 	bl	8000456 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 f925 	bl	8000402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	200000a0 	.word	0x200000a0

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	200000a0 	.word	0x200000a0

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	db0b      	blt.n	80002e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	f003 021f 	and.w	r2, r3, #31
 80002d0:	4906      	ldr	r1, [pc, #24]	; (80002ec <__NVIC_EnableIRQ+0x34>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	095b      	lsrs	r3, r3, #5
 80002d8:	2001      	movs	r0, #1
 80002da:	fa00 f202 	lsl.w	r2, r0, r2
 80002de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	2b00      	cmp	r3, #0
 8000302:	db0a      	blt.n	800031a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	b2da      	uxtb	r2, r3
 8000308:	490c      	ldr	r1, [pc, #48]	; (800033c <__NVIC_SetPriority+0x4c>)
 800030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030e:	0112      	lsls	r2, r2, #4
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	440b      	add	r3, r1
 8000314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000318:	e00a      	b.n	8000330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4908      	ldr	r1, [pc, #32]	; (8000340 <__NVIC_SetPriority+0x50>)
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 030f 	and.w	r3, r3, #15
 8000326:	3b04      	subs	r3, #4
 8000328:	0112      	lsls	r2, r2, #4
 800032a:	b2d2      	uxtb	r2, r2
 800032c:	440b      	add	r3, r1
 800032e:	761a      	strb	r2, [r3, #24]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000e100 	.word	0xe000e100
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000344:	b480      	push	{r7}
 8000346:	b089      	sub	sp, #36	; 0x24
 8000348:	af00      	add	r7, sp, #0
 800034a:	60f8      	str	r0, [r7, #12]
 800034c:	60b9      	str	r1, [r7, #8]
 800034e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f003 0307 	and.w	r3, r3, #7
 8000356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000358:	69fb      	ldr	r3, [r7, #28]
 800035a:	f1c3 0307 	rsb	r3, r3, #7
 800035e:	2b04      	cmp	r3, #4
 8000360:	bf28      	it	cs
 8000362:	2304      	movcs	r3, #4
 8000364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3304      	adds	r3, #4
 800036a:	2b06      	cmp	r3, #6
 800036c:	d902      	bls.n	8000374 <NVIC_EncodePriority+0x30>
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	3b03      	subs	r3, #3
 8000372:	e000      	b.n	8000376 <NVIC_EncodePriority+0x32>
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800037c:	69bb      	ldr	r3, [r7, #24]
 800037e:	fa02 f303 	lsl.w	r3, r2, r3
 8000382:	43da      	mvns	r2, r3
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	401a      	ands	r2, r3
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800038c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	fa01 f303 	lsl.w	r3, r1, r3
 8000396:	43d9      	mvns	r1, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039c:	4313      	orrs	r3, r2
         );
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3724      	adds	r7, #36	; 0x24
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b8:	d301      	bcc.n	80003be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ba:	2301      	movs	r3, #1
 80003bc:	e00f      	b.n	80003de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003be:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <SysTick_Config+0x40>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003c6:	210f      	movs	r1, #15
 80003c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003cc:	f7ff ff90 	bl	80002f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <SysTick_Config+0x40>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003d6:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <SysTick_Config+0x40>)
 80003d8:	2207      	movs	r2, #7
 80003da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003dc:	2300      	movs	r3, #0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	e000e010 	.word	0xe000e010

080003ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f7ff ff2d 	bl	8000254 <__NVIC_SetPriorityGrouping>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000402:	b580      	push	{r7, lr}
 8000404:	b086      	sub	sp, #24
 8000406:	af00      	add	r7, sp, #0
 8000408:	4603      	mov	r3, r0
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
 800040e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000414:	f7ff ff42 	bl	800029c <__NVIC_GetPriorityGrouping>
 8000418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	68b9      	ldr	r1, [r7, #8]
 800041e:	6978      	ldr	r0, [r7, #20]
 8000420:	f7ff ff90 	bl	8000344 <NVIC_EncodePriority>
 8000424:	4602      	mov	r2, r0
 8000426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800042a:	4611      	mov	r1, r2
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff5f 	bl	80002f0 <__NVIC_SetPriority>
}
 8000432:	bf00      	nop
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	b082      	sub	sp, #8
 800043e:	af00      	add	r7, sp, #0
 8000440:	4603      	mov	r3, r0
 8000442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff35 	bl	80002b8 <__NVIC_EnableIRQ>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b082      	sub	sp, #8
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ffa2 	bl	80003a8 <SysTick_Config>
 8000464:	4603      	mov	r3, r0
}
 8000466:	4618      	mov	r0, r3
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000470:	b480      	push	{r7}
 8000472:	b08b      	sub	sp, #44	; 0x2c
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800047a:	2300      	movs	r3, #0
 800047c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800047e:	2300      	movs	r3, #0
 8000480:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000482:	e127      	b.n	80006d4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000484:	2201      	movs	r2, #1
 8000486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000488:	fa02 f303 	lsl.w	r3, r2, r3
 800048c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	69fa      	ldr	r2, [r7, #28]
 8000494:	4013      	ands	r3, r2
 8000496:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000498:	69ba      	ldr	r2, [r7, #24]
 800049a:	69fb      	ldr	r3, [r7, #28]
 800049c:	429a      	cmp	r2, r3
 800049e:	f040 8116 	bne.w	80006ce <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	2b12      	cmp	r3, #18
 80004a8:	d034      	beq.n	8000514 <HAL_GPIO_Init+0xa4>
 80004aa:	2b12      	cmp	r3, #18
 80004ac:	d80d      	bhi.n	80004ca <HAL_GPIO_Init+0x5a>
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	d02b      	beq.n	800050a <HAL_GPIO_Init+0x9a>
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d804      	bhi.n	80004c0 <HAL_GPIO_Init+0x50>
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d031      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d01c      	beq.n	80004f8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004be:	e048      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d043      	beq.n	800054c <HAL_GPIO_Init+0xdc>
 80004c4:	2b11      	cmp	r3, #17
 80004c6:	d01b      	beq.n	8000500 <HAL_GPIO_Init+0x90>
          break;
 80004c8:	e043      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004ca:	4a89      	ldr	r2, [pc, #548]	; (80006f0 <HAL_GPIO_Init+0x280>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d026      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004d0:	4a87      	ldr	r2, [pc, #540]	; (80006f0 <HAL_GPIO_Init+0x280>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d806      	bhi.n	80004e4 <HAL_GPIO_Init+0x74>
 80004d6:	4a87      	ldr	r2, [pc, #540]	; (80006f4 <HAL_GPIO_Init+0x284>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d020      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004dc:	4a86      	ldr	r2, [pc, #536]	; (80006f8 <HAL_GPIO_Init+0x288>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d01d      	beq.n	800051e <HAL_GPIO_Init+0xae>
          break;
 80004e2:	e036      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004e4:	4a85      	ldr	r2, [pc, #532]	; (80006fc <HAL_GPIO_Init+0x28c>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d019      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004ea:	4a85      	ldr	r2, [pc, #532]	; (8000700 <HAL_GPIO_Init+0x290>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d016      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004f0:	4a84      	ldr	r2, [pc, #528]	; (8000704 <HAL_GPIO_Init+0x294>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d013      	beq.n	800051e <HAL_GPIO_Init+0xae>
          break;
 80004f6:	e02c      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	623b      	str	r3, [r7, #32]
          break;
 80004fe:	e028      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	3304      	adds	r3, #4
 8000506:	623b      	str	r3, [r7, #32]
          break;
 8000508:	e023      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	3308      	adds	r3, #8
 8000510:	623b      	str	r3, [r7, #32]
          break;
 8000512:	e01e      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	330c      	adds	r3, #12
 800051a:	623b      	str	r3, [r7, #32]
          break;
 800051c:	e019      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d102      	bne.n	800052c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000526:	2304      	movs	r3, #4
 8000528:	623b      	str	r3, [r7, #32]
          break;
 800052a:	e012      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d105      	bne.n	8000540 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000534:	2308      	movs	r3, #8
 8000536:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	69fa      	ldr	r2, [r7, #28]
 800053c:	611a      	str	r2, [r3, #16]
          break;
 800053e:	e008      	b.n	8000552 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000540:	2308      	movs	r3, #8
 8000542:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	69fa      	ldr	r2, [r7, #28]
 8000548:	615a      	str	r2, [r3, #20]
          break;
 800054a:	e002      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]
          break;
 8000550:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000552:	69bb      	ldr	r3, [r7, #24]
 8000554:	2bff      	cmp	r3, #255	; 0xff
 8000556:	d801      	bhi.n	800055c <HAL_GPIO_Init+0xec>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	e001      	b.n	8000560 <HAL_GPIO_Init+0xf0>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3304      	adds	r3, #4
 8000560:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000562:	69bb      	ldr	r3, [r7, #24]
 8000564:	2bff      	cmp	r3, #255	; 0xff
 8000566:	d802      	bhi.n	800056e <HAL_GPIO_Init+0xfe>
 8000568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	e002      	b.n	8000574 <HAL_GPIO_Init+0x104>
 800056e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000570:	3b08      	subs	r3, #8
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	210f      	movs	r1, #15
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	fa01 f303 	lsl.w	r3, r1, r3
 8000582:	43db      	mvns	r3, r3
 8000584:	401a      	ands	r2, r3
 8000586:	6a39      	ldr	r1, [r7, #32]
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	431a      	orrs	r2, r3
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	2b00      	cmp	r3, #0
 800059e:	f000 8096 	beq.w	80006ce <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005a2:	4b59      	ldr	r3, [pc, #356]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a58      	ldr	r2, [pc, #352]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6193      	str	r3, [r2, #24]
 80005ae:	4b56      	ldr	r3, [pc, #344]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80005ba:	4a54      	ldr	r2, [pc, #336]	; (800070c <HAL_GPIO_Init+0x29c>)
 80005bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005be:	089b      	lsrs	r3, r3, #2
 80005c0:	3302      	adds	r3, #2
 80005c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ca:	f003 0303 	and.w	r3, r3, #3
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	220f      	movs	r2, #15
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	43db      	mvns	r3, r3
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	4013      	ands	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a4b      	ldr	r2, [pc, #300]	; (8000710 <HAL_GPIO_Init+0x2a0>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d013      	beq.n	800060e <HAL_GPIO_Init+0x19e>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a4a      	ldr	r2, [pc, #296]	; (8000714 <HAL_GPIO_Init+0x2a4>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d00d      	beq.n	800060a <HAL_GPIO_Init+0x19a>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a49      	ldr	r2, [pc, #292]	; (8000718 <HAL_GPIO_Init+0x2a8>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d007      	beq.n	8000606 <HAL_GPIO_Init+0x196>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a48      	ldr	r2, [pc, #288]	; (800071c <HAL_GPIO_Init+0x2ac>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d101      	bne.n	8000602 <HAL_GPIO_Init+0x192>
 80005fe:	2303      	movs	r3, #3
 8000600:	e006      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 8000602:	2304      	movs	r3, #4
 8000604:	e004      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 8000606:	2302      	movs	r3, #2
 8000608:	e002      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 800060a:	2301      	movs	r3, #1
 800060c:	e000      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 800060e:	2300      	movs	r3, #0
 8000610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000612:	f002 0203 	and.w	r2, r2, #3
 8000616:	0092      	lsls	r2, r2, #2
 8000618:	4093      	lsls	r3, r2
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	4313      	orrs	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000620:	493a      	ldr	r1, [pc, #232]	; (800070c <HAL_GPIO_Init+0x29c>)
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	089b      	lsrs	r3, r3, #2
 8000626:	3302      	adds	r3, #2
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000636:	2b00      	cmp	r3, #0
 8000638:	d006      	beq.n	8000648 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800063a:	4b39      	ldr	r3, [pc, #228]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	4938      	ldr	r1, [pc, #224]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	4313      	orrs	r3, r2
 8000644:	600b      	str	r3, [r1, #0]
 8000646:	e006      	b.n	8000656 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000648:	4b35      	ldr	r3, [pc, #212]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	43db      	mvns	r3, r3
 8000650:	4933      	ldr	r1, [pc, #204]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000652:	4013      	ands	r3, r2
 8000654:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065e:	2b00      	cmp	r3, #0
 8000660:	d006      	beq.n	8000670 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000662:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000664:	685a      	ldr	r2, [r3, #4]
 8000666:	492e      	ldr	r1, [pc, #184]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	4313      	orrs	r3, r2
 800066c:	604b      	str	r3, [r1, #4]
 800066e:	e006      	b.n	800067e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000670:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	43db      	mvns	r3, r3
 8000678:	4929      	ldr	r1, [pc, #164]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800067a:	4013      	ands	r3, r2
 800067c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000686:	2b00      	cmp	r3, #0
 8000688:	d006      	beq.n	8000698 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800068c:	689a      	ldr	r2, [r3, #8]
 800068e:	4924      	ldr	r1, [pc, #144]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	4313      	orrs	r3, r2
 8000694:	608b      	str	r3, [r1, #8]
 8000696:	e006      	b.n	80006a6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800069a:	689a      	ldr	r2, [r3, #8]
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	43db      	mvns	r3, r3
 80006a0:	491f      	ldr	r1, [pc, #124]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006a2:	4013      	ands	r3, r2
 80006a4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d006      	beq.n	80006c0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006b4:	68da      	ldr	r2, [r3, #12]
 80006b6:	491a      	ldr	r1, [pc, #104]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	60cb      	str	r3, [r1, #12]
 80006be:	e006      	b.n	80006ce <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006c2:	68da      	ldr	r2, [r3, #12]
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	43db      	mvns	r3, r3
 80006c8:	4915      	ldr	r1, [pc, #84]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	3301      	adds	r3, #1
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	fa22 f303 	lsr.w	r3, r2, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	f47f aed0 	bne.w	8000484 <HAL_GPIO_Init+0x14>
  }
}
 80006e4:	bf00      	nop
 80006e6:	372c      	adds	r7, #44	; 0x2c
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	10210000 	.word	0x10210000
 80006f4:	10110000 	.word	0x10110000
 80006f8:	10120000 	.word	0x10120000
 80006fc:	10310000 	.word	0x10310000
 8000700:	10320000 	.word	0x10320000
 8000704:	10220000 	.word	0x10220000
 8000708:	40021000 	.word	0x40021000
 800070c:	40010000 	.word	0x40010000
 8000710:	40010800 	.word	0x40010800
 8000714:	40010c00 	.word	0x40010c00
 8000718:	40011000 	.word	0x40011000
 800071c:	40011400 	.word	0x40011400
 8000720:	40010400 	.word	0x40010400

08000724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	807b      	strh	r3, [r7, #2]
 8000730:	4613      	mov	r3, r2
 8000732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000734:	787b      	ldrb	r3, [r7, #1]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d003      	beq.n	8000742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800073a:	887a      	ldrh	r2, [r7, #2]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000740:	e003      	b.n	800074a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000742:	887b      	ldrh	r3, [r7, #2]
 8000744:	041a      	lsls	r2, r3, #16
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	611a      	str	r2, [r3, #16]
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	68da      	ldr	r2, [r3, #12]
 8000764:	887b      	ldrh	r3, [r7, #2]
 8000766:	4013      	ands	r3, r2
 8000768:	2b00      	cmp	r3, #0
 800076a:	d003      	beq.n	8000774 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800076c:	887a      	ldrh	r2, [r7, #2]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000772:	e002      	b.n	800077a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000774:	887a      	ldrh	r2, [r7, #2]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	611a      	str	r2, [r3, #16]
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000790:	695a      	ldr	r2, [r3, #20]
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	4013      	ands	r3, r2
 8000796:	2b00      	cmp	r3, #0
 8000798:	d006      	beq.n	80007a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800079a:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800079c:	88fb      	ldrh	r3, [r7, #6]
 800079e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80007a0:	88fb      	ldrh	r3, [r7, #6]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 f806 	bl	80007b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40010400 	.word	0x40010400

080007b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d101      	bne.n	80007da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e10f      	b.n	80009fa <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d106      	bne.n	80007f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f002 f868 	bl	80028c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2224      	movs	r2, #36	; 0x24
 80007f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f022 0201 	bic.w	r2, r2, #1
 800080a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800080c:	f001 fb40 	bl	8001e90 <HAL_RCC_GetPCLK1Freq>
 8000810:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	4a7b      	ldr	r2, [pc, #492]	; (8000a04 <HAL_I2C_Init+0x23c>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d807      	bhi.n	800082c <HAL_I2C_Init+0x64>
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4a7a      	ldr	r2, [pc, #488]	; (8000a08 <HAL_I2C_Init+0x240>)
 8000820:	4293      	cmp	r3, r2
 8000822:	bf94      	ite	ls
 8000824:	2301      	movls	r3, #1
 8000826:	2300      	movhi	r3, #0
 8000828:	b2db      	uxtb	r3, r3
 800082a:	e006      	b.n	800083a <HAL_I2C_Init+0x72>
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	4a77      	ldr	r2, [pc, #476]	; (8000a0c <HAL_I2C_Init+0x244>)
 8000830:	4293      	cmp	r3, r2
 8000832:	bf94      	ite	ls
 8000834:	2301      	movls	r3, #1
 8000836:	2300      	movhi	r3, #0
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	e0db      	b.n	80009fa <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	4a72      	ldr	r2, [pc, #456]	; (8000a10 <HAL_I2C_Init+0x248>)
 8000846:	fba2 2303 	umull	r2, r3, r2, r3
 800084a:	0c9b      	lsrs	r3, r3, #18
 800084c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	68ba      	ldr	r2, [r7, #8]
 800085e:	430a      	orrs	r2, r1
 8000860:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	6a1b      	ldr	r3, [r3, #32]
 8000868:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4a64      	ldr	r2, [pc, #400]	; (8000a04 <HAL_I2C_Init+0x23c>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d802      	bhi.n	800087c <HAL_I2C_Init+0xb4>
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	3301      	adds	r3, #1
 800087a:	e009      	b.n	8000890 <HAL_I2C_Init+0xc8>
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000882:	fb02 f303 	mul.w	r3, r2, r3
 8000886:	4a63      	ldr	r2, [pc, #396]	; (8000a14 <HAL_I2C_Init+0x24c>)
 8000888:	fba2 2303 	umull	r2, r3, r2, r3
 800088c:	099b      	lsrs	r3, r3, #6
 800088e:	3301      	adds	r3, #1
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	6812      	ldr	r2, [r2, #0]
 8000894:	430b      	orrs	r3, r1
 8000896:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80008a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	4956      	ldr	r1, [pc, #344]	; (8000a04 <HAL_I2C_Init+0x23c>)
 80008ac:	428b      	cmp	r3, r1
 80008ae:	d80d      	bhi.n	80008cc <HAL_I2C_Init+0x104>
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	1e59      	subs	r1, r3, #1
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80008be:	3301      	adds	r3, #1
 80008c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	bf38      	it	cc
 80008c8:	2304      	movcc	r3, #4
 80008ca:	e04f      	b.n	800096c <HAL_I2C_Init+0x1a4>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d111      	bne.n	80008f8 <HAL_I2C_Init+0x130>
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	1e58      	subs	r0, r3, #1
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6859      	ldr	r1, [r3, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	440b      	add	r3, r1
 80008e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80008e6:	3301      	adds	r3, #1
 80008e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	bf0c      	ite	eq
 80008f0:	2301      	moveq	r3, #1
 80008f2:	2300      	movne	r3, #0
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	e012      	b.n	800091e <HAL_I2C_Init+0x156>
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	1e58      	subs	r0, r3, #1
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6859      	ldr	r1, [r3, #4]
 8000900:	460b      	mov	r3, r1
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	440b      	add	r3, r1
 8000906:	0099      	lsls	r1, r3, #2
 8000908:	440b      	add	r3, r1
 800090a:	fbb0 f3f3 	udiv	r3, r0, r3
 800090e:	3301      	adds	r3, #1
 8000910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000914:	2b00      	cmp	r3, #0
 8000916:	bf0c      	ite	eq
 8000918:	2301      	moveq	r3, #1
 800091a:	2300      	movne	r3, #0
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_I2C_Init+0x15e>
 8000922:	2301      	movs	r3, #1
 8000924:	e022      	b.n	800096c <HAL_I2C_Init+0x1a4>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d10e      	bne.n	800094c <HAL_I2C_Init+0x184>
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	1e58      	subs	r0, r3, #1
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6859      	ldr	r1, [r3, #4]
 8000936:	460b      	mov	r3, r1
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	440b      	add	r3, r1
 800093c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000940:	3301      	adds	r3, #1
 8000942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800094a:	e00f      	b.n	800096c <HAL_I2C_Init+0x1a4>
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	1e58      	subs	r0, r3, #1
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6859      	ldr	r1, [r3, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	440b      	add	r3, r1
 800095a:	0099      	lsls	r1, r3, #2
 800095c:	440b      	add	r3, r1
 800095e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000962:	3301      	adds	r3, #1
 8000964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000968:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800096c:	6879      	ldr	r1, [r7, #4]
 800096e:	6809      	ldr	r1, [r1, #0]
 8000970:	4313      	orrs	r3, r2
 8000972:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	69da      	ldr	r2, [r3, #28]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6a1b      	ldr	r3, [r3, #32]
 8000986:	431a      	orrs	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	430a      	orrs	r2, r1
 800098e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800099a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	6911      	ldr	r1, [r2, #16]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	68d2      	ldr	r2, [r2, #12]
 80009a6:	4311      	orrs	r1, r2
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	6812      	ldr	r2, [r2, #0]
 80009ac:	430b      	orrs	r3, r1
 80009ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	695a      	ldr	r2, [r3, #20]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	431a      	orrs	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	430a      	orrs	r2, r1
 80009ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f042 0201 	orr.w	r2, r2, #1
 80009da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2220      	movs	r2, #32
 80009e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2200      	movs	r2, #0
 80009ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2200      	movs	r2, #0
 80009f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	000186a0 	.word	0x000186a0
 8000a08:	001e847f 	.word	0x001e847f
 8000a0c:	003d08ff 	.word	0x003d08ff
 8000a10:	431bde83 	.word	0x431bde83
 8000a14:	10624dd3 	.word	0x10624dd3

08000a18 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	4608      	mov	r0, r1
 8000a22:	4611      	mov	r1, r2
 8000a24:	461a      	mov	r2, r3
 8000a26:	4603      	mov	r3, r0
 8000a28:	817b      	strh	r3, [r7, #10]
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	813b      	strh	r3, [r7, #8]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000a32:	f7ff fbe3 	bl	80001fc <HAL_GetTick>
 8000a36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	2b20      	cmp	r3, #32
 8000a42:	f040 80d9 	bne.w	8000bf8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	2319      	movs	r3, #25
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	496d      	ldr	r1, [pc, #436]	; (8000c04 <HAL_I2C_Mem_Write+0x1ec>)
 8000a50:	68f8      	ldr	r0, [r7, #12]
 8000a52:	f000 fc6b 	bl	800132c <I2C_WaitOnFlagUntilTimeout>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	e0cc      	b.n	8000bfa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d101      	bne.n	8000a6e <HAL_I2C_Mem_Write+0x56>
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	e0c5      	b.n	8000bfa <HAL_I2C_Mem_Write+0x1e2>
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2201      	movs	r2, #1
 8000a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d007      	beq.n	8000a94 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f042 0201 	orr.w	r2, r2, #1
 8000a92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000aa2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	2221      	movs	r2, #33	; 0x21
 8000aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2240      	movs	r2, #64	; 0x40
 8000ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	6a3a      	ldr	r2, [r7, #32]
 8000abe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4a4d      	ldr	r2, [pc, #308]	; (8000c08 <HAL_I2C_Mem_Write+0x1f0>)
 8000ad4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000ad6:	88f8      	ldrh	r0, [r7, #6]
 8000ad8:	893a      	ldrh	r2, [r7, #8]
 8000ada:	8979      	ldrh	r1, [r7, #10]
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	9301      	str	r3, [sp, #4]
 8000ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f000 fac6 	bl	8001078 <I2C_RequestMemoryWrite>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d052      	beq.n	8000b98 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e081      	b.n	8000bfa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000af6:	697a      	ldr	r2, [r7, #20]
 8000af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f000 fcec 	bl	80014d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d00d      	beq.n	8000b22 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	d107      	bne.n	8000b1e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e06b      	b.n	8000bfa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b26:	781a      	ldrb	r2, [r3, #0]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b32:	1c5a      	adds	r2, r3, #1
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	2b04      	cmp	r3, #4
 8000b5e:	d11b      	bne.n	8000b98 <HAL_I2C_Mem_Write+0x180>
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d017      	beq.n	8000b98 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6c:	781a      	ldrb	r2, [r3, #0]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b78:	1c5a      	adds	r2, r3, #1
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b82:	3b01      	subs	r3, #1
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	3b01      	subs	r3, #1
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1aa      	bne.n	8000af6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	f000 fcd8 	bl	800155a <I2C_WaitOnBTFFlagUntilTimeout>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d00d      	beq.n	8000bcc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	d107      	bne.n	8000bc8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bc6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e016      	b.n	8000bfa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2220      	movs	r2, #32
 8000be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	e000      	b.n	8000bfa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8000bf8:	2302      	movs	r3, #2
  }
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	00100002 	.word	0x00100002
 8000c08:	ffff0000 	.word	0xffff0000

08000c0c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08c      	sub	sp, #48	; 0x30
 8000c10:	af02      	add	r7, sp, #8
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	4608      	mov	r0, r1
 8000c16:	4611      	mov	r1, r2
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	817b      	strh	r3, [r7, #10]
 8000c1e:	460b      	mov	r3, r1
 8000c20:	813b      	strh	r3, [r7, #8]
 8000c22:	4613      	mov	r3, r2
 8000c24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000c26:	f7ff fae9 	bl	80001fc <HAL_GetTick>
 8000c2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b20      	cmp	r3, #32
 8000c36:	f040 8218 	bne.w	800106a <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2319      	movs	r3, #25
 8000c40:	2201      	movs	r2, #1
 8000c42:	4981      	ldr	r1, [pc, #516]	; (8000e48 <HAL_I2C_Mem_Read+0x23c>)
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f000 fb71 	bl	800132c <I2C_WaitOnFlagUntilTimeout>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8000c50:	2302      	movs	r3, #2
 8000c52:	e20b      	b.n	800106c <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d101      	bne.n	8000c62 <HAL_I2C_Mem_Read+0x56>
 8000c5e:	2302      	movs	r3, #2
 8000c60:	e204      	b.n	800106c <HAL_I2C_Mem_Read+0x460>
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2201      	movs	r2, #1
 8000c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d007      	beq.n	8000c88 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f042 0201 	orr.w	r2, r2, #1
 8000c86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2222      	movs	r2, #34	; 0x22
 8000c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2240      	movs	r2, #64	; 0x40
 8000ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2200      	movs	r2, #0
 8000cac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4a61      	ldr	r2, [pc, #388]	; (8000e4c <HAL_I2C_Mem_Read+0x240>)
 8000cc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000cca:	88f8      	ldrh	r0, [r7, #6]
 8000ccc:	893a      	ldrh	r2, [r7, #8]
 8000cce:	8979      	ldrh	r1, [r7, #10]
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	9301      	str	r3, [sp, #4]
 8000cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	4603      	mov	r3, r0
 8000cda:	68f8      	ldr	r0, [r7, #12]
 8000cdc:	f000 fa56 	bl	800118c <I2C_RequestMemoryRead>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e1c0      	b.n	800106c <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d113      	bne.n	8000d1a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	623b      	str	r3, [r7, #32]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	695b      	ldr	r3, [r3, #20]
 8000cfc:	623b      	str	r3, [r7, #32]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	623b      	str	r3, [r7, #32]
 8000d06:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	e194      	b.n	8001044 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d11d      	bne.n	8000d5e <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d30:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d32:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	61fb      	str	r3, [r7, #28]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	61fb      	str	r3, [r7, #28]
 8000d48:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000d5a:	b662      	cpsie	i
 8000d5c:	e172      	b.n	8001044 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d11d      	bne.n	8000da2 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d76:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	61bb      	str	r3, [r7, #24]
 8000d8c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000d9e:	b662      	cpsie	i
 8000da0:	e150      	b.n	8001044 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000db0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	695b      	ldr	r3, [r3, #20]
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8000dc8:	e13c      	b.n	8001044 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	f200 80f5 	bhi.w	8000fbe <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d123      	bne.n	8000e24 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f000 fbfb 	bl	80015dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e13d      	b.n	800106c <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	691a      	ldr	r2, [r3, #16]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000e22:	e10f      	b.n	8001044 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d150      	bne.n	8000ece <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e32:	2200      	movs	r2, #0
 8000e34:	4906      	ldr	r1, [pc, #24]	; (8000e50 <HAL_I2C_Mem_Read+0x244>)
 8000e36:	68f8      	ldr	r0, [r7, #12]
 8000e38:	f000 fa78 	bl	800132c <I2C_WaitOnFlagUntilTimeout>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d008      	beq.n	8000e54 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e112      	b.n	800106c <HAL_I2C_Mem_Read+0x460>
 8000e46:	bf00      	nop
 8000e48:	00100002 	.word	0x00100002
 8000e4c:	ffff0000 	.word	0xffff0000
 8000e50:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e64:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	691a      	ldr	r2, [r3, #16]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e78:	1c5a      	adds	r2, r3, #1
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e82:	3b01      	subs	r3, #1
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	3b01      	subs	r3, #1
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8000e98:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	691a      	ldr	r2, [r3, #16]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eac:	1c5a      	adds	r2, r3, #1
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000ecc:	e0ba      	b.n	8001044 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	4967      	ldr	r1, [pc, #412]	; (8001074 <HAL_I2C_Mem_Read+0x468>)
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f000 fa27 	bl	800132c <I2C_WaitOnFlagUntilTimeout>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e0c1      	b.n	800106c <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ef6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	691a      	ldr	r2, [r3, #16]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0c:	1c5a      	adds	r2, r3, #1
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f16:	3b01      	subs	r3, #1
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	3b01      	subs	r3, #1
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f32:	2200      	movs	r2, #0
 8000f34:	494f      	ldr	r1, [pc, #316]	; (8001074 <HAL_I2C_Mem_Read+0x468>)
 8000f36:	68f8      	ldr	r0, [r7, #12]
 8000f38:	f000 f9f8 	bl	800132c <I2C_WaitOnFlagUntilTimeout>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e092      	b.n	800106c <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f54:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f68:	1c5a      	adds	r2, r3, #1
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f72:	3b01      	subs	r3, #1
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	3b01      	subs	r3, #1
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8000f88:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	691a      	ldr	r2, [r3, #16]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9c:	1c5a      	adds	r2, r3, #1
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000fbc:	e042      	b.n	8001044 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f000 fb0a 	bl	80015dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e04c      	b.n	800106c <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	691a      	ldr	r2, [r3, #16]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe4:	1c5a      	adds	r2, r3, #1
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	2b04      	cmp	r3, #4
 8001010:	d118      	bne.n	8001044 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	691a      	ldr	r2, [r3, #16]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	1c5a      	adds	r2, r3, #1
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800102e:	3b01      	subs	r3, #1
 8001030:	b29a      	uxth	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800103a:	b29b      	uxth	r3, r3
 800103c:	3b01      	subs	r3, #1
 800103e:	b29a      	uxth	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001048:	2b00      	cmp	r3, #0
 800104a:	f47f aebe 	bne.w	8000dca <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2220      	movs	r2, #32
 8001052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	e000      	b.n	800106c <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 800106a:	2302      	movs	r3, #2
  }
}
 800106c:	4618      	mov	r0, r3
 800106e:	3728      	adds	r7, #40	; 0x28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	00010004 	.word	0x00010004

08001078 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af02      	add	r7, sp, #8
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	4608      	mov	r0, r1
 8001082:	4611      	mov	r1, r2
 8001084:	461a      	mov	r2, r3
 8001086:	4603      	mov	r3, r0
 8001088:	817b      	strh	r3, [r7, #10]
 800108a:	460b      	mov	r3, r1
 800108c:	813b      	strh	r3, [r7, #8]
 800108e:	4613      	mov	r3, r2
 8001090:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f000 f93c 	bl	800132c <I2C_WaitOnFlagUntilTimeout>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e05f      	b.n	800117e <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80010be:	897b      	ldrh	r3, [r7, #10]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	461a      	mov	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80010cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	6a3a      	ldr	r2, [r7, #32]
 80010d2:	492d      	ldr	r1, [pc, #180]	; (8001188 <I2C_RequestMemoryWrite+0x110>)
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f000 f980 	bl	80013da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e04c      	b.n	800117e <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80010fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010fc:	6a39      	ldr	r1, [r7, #32]
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f000 f9ea 	bl	80014d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00d      	beq.n	8001126 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	2b04      	cmp	r3, #4
 8001110:	d107      	bne.n	8001122 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001120:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e02b      	b.n	800117e <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d105      	bne.n	8001138 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800112c:	893b      	ldrh	r3, [r7, #8]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	611a      	str	r2, [r3, #16]
 8001136:	e021      	b.n	800117c <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001138:	893b      	ldrh	r3, [r7, #8]
 800113a:	0a1b      	lsrs	r3, r3, #8
 800113c:	b29b      	uxth	r3, r3
 800113e:	b2da      	uxtb	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001148:	6a39      	ldr	r1, [r7, #32]
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f000 f9c4 	bl	80014d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00d      	beq.n	8001172 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	2b04      	cmp	r3, #4
 800115c:	d107      	bne.n	800116e <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800116c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e005      	b.n	800117e <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001172:	893b      	ldrh	r3, [r7, #8]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	00010002 	.word	0x00010002

0800118c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af02      	add	r7, sp, #8
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	4608      	mov	r0, r1
 8001196:	4611      	mov	r1, r2
 8001198:	461a      	mov	r2, r3
 800119a:	4603      	mov	r3, r0
 800119c:	817b      	strh	r3, [r7, #10]
 800119e:	460b      	mov	r3, r1
 80011a0:	813b      	strh	r3, [r7, #8]
 80011a2:	4613      	mov	r3, r2
 80011a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80011b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	6a3b      	ldr	r3, [r7, #32]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f000 f8aa 	bl	800132c <I2C_WaitOnFlagUntilTimeout>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e09e      	b.n	8001320 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80011e2:	897b      	ldrh	r3, [r7, #10]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	461a      	mov	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80011f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	6a3a      	ldr	r2, [r7, #32]
 80011f6:	494c      	ldr	r1, [pc, #304]	; (8001328 <I2C_RequestMemoryRead+0x19c>)
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f000 f8ee 	bl	80013da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e08b      	b.n	8001320 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800121e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001220:	6a39      	ldr	r1, [r7, #32]
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f000 f958 	bl	80014d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00d      	beq.n	800124a <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	2b04      	cmp	r3, #4
 8001234:	d107      	bne.n	8001246 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001244:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e06a      	b.n	8001320 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d105      	bne.n	800125c <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001250:	893b      	ldrh	r3, [r7, #8]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	611a      	str	r2, [r3, #16]
 800125a:	e021      	b.n	80012a0 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800125c:	893b      	ldrh	r3, [r7, #8]
 800125e:	0a1b      	lsrs	r3, r3, #8
 8001260:	b29b      	uxth	r3, r3
 8001262:	b2da      	uxtb	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800126a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800126c:	6a39      	ldr	r1, [r7, #32]
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f000 f932 	bl	80014d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00d      	beq.n	8001296 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	2b04      	cmp	r3, #4
 8001280:	d107      	bne.n	8001292 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001290:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e044      	b.n	8001320 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001296:	893b      	ldrh	r3, [r7, #8]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a2:	6a39      	ldr	r1, [r7, #32]
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f000 f917 	bl	80014d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00d      	beq.n	80012cc <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	d107      	bne.n	80012c8 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e029      	b.n	8001320 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	6a3b      	ldr	r3, [r7, #32]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	f000 f81f 	bl	800132c <I2C_WaitOnFlagUntilTimeout>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e013      	b.n	8001320 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80012f8:	897b      	ldrh	r3, [r7, #10]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	b2da      	uxtb	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130a:	6a3a      	ldr	r2, [r7, #32]
 800130c:	4906      	ldr	r1, [pc, #24]	; (8001328 <I2C_RequestMemoryRead+0x19c>)
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f000 f863 	bl	80013da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	00010002 	.word	0x00010002

0800132c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	4613      	mov	r3, r2
 800133a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800133c:	e025      	b.n	800138a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001344:	d021      	beq.n	800138a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001346:	f7fe ff59 	bl	80001fc <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	d302      	bcc.n	800135c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d116      	bne.n	800138a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2200      	movs	r2, #0
 8001360:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2220      	movs	r2, #32
 8001366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f043 0220 	orr.w	r2, r3, #32
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e023      	b.n	80013d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	0c1b      	lsrs	r3, r3, #16
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b01      	cmp	r3, #1
 8001392:	d10d      	bne.n	80013b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	4013      	ands	r3, r2
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	bf0c      	ite	eq
 80013a6:	2301      	moveq	r3, #1
 80013a8:	2300      	movne	r3, #0
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	461a      	mov	r2, r3
 80013ae:	e00c      	b.n	80013ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4013      	ands	r3, r2
 80013bc:	b29b      	uxth	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	bf0c      	ite	eq
 80013c2:	2301      	moveq	r3, #1
 80013c4:	2300      	movne	r3, #0
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	461a      	mov	r2, r3
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d0b6      	beq.n	800133e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b084      	sub	sp, #16
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80013e8:	e051      	b.n	800148e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f8:	d123      	bne.n	8001442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001408:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001412:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2220      	movs	r2, #32
 800141e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f043 0204 	orr.w	r2, r3, #4
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e046      	b.n	80014d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001448:	d021      	beq.n	800148e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800144a:	f7fe fed7 	bl	80001fc <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	429a      	cmp	r2, r3
 8001458:	d302      	bcc.n	8001460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d116      	bne.n	800148e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2200      	movs	r2, #0
 8001464:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2220      	movs	r2, #32
 800146a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f043 0220 	orr.w	r2, r3, #32
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e020      	b.n	80014d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	0c1b      	lsrs	r3, r3, #16
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b01      	cmp	r3, #1
 8001496:	d10c      	bne.n	80014b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	43da      	mvns	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	4013      	ands	r3, r2
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	bf14      	ite	ne
 80014aa:	2301      	movne	r3, #1
 80014ac:	2300      	moveq	r3, #0
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	e00b      	b.n	80014ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	43da      	mvns	r2, r3
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	4013      	ands	r3, r2
 80014be:	b29b      	uxth	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bf14      	ite	ne
 80014c4:	2301      	movne	r3, #1
 80014c6:	2300      	moveq	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d18d      	bne.n	80013ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014e4:	e02d      	b.n	8001542 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f000 f8ce 	bl	8001688 <I2C_IsAcknowledgeFailed>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e02d      	b.n	8001552 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014fc:	d021      	beq.n	8001542 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014fe:	f7fe fe7d 	bl	80001fc <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	68ba      	ldr	r2, [r7, #8]
 800150a:	429a      	cmp	r2, r3
 800150c:	d302      	bcc.n	8001514 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d116      	bne.n	8001542 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2200      	movs	r2, #0
 8001518:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2220      	movs	r2, #32
 800151e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f043 0220 	orr.w	r2, r3, #32
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e007      	b.n	8001552 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800154c:	2b80      	cmp	r3, #128	; 0x80
 800154e:	d1ca      	bne.n	80014e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001566:	e02d      	b.n	80015c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 f88d 	bl	8001688 <I2C_IsAcknowledgeFailed>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e02d      	b.n	80015d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800157e:	d021      	beq.n	80015c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001580:	f7fe fe3c 	bl	80001fc <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	429a      	cmp	r2, r3
 800158e:	d302      	bcc.n	8001596 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d116      	bne.n	80015c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2220      	movs	r2, #32
 80015a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	f043 0220 	orr.w	r2, r3, #32
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e007      	b.n	80015d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d1ca      	bne.n	8001568 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80015e8:	e042      	b.n	8001670 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	2b10      	cmp	r3, #16
 80015f6:	d119      	bne.n	800162c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f06f 0210 	mvn.w	r2, #16
 8001600:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2220      	movs	r2, #32
 800160c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e029      	b.n	8001680 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800162c:	f7fe fde6 	bl	80001fc <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	429a      	cmp	r2, r3
 800163a:	d302      	bcc.n	8001642 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d116      	bne.n	8001670 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2220      	movs	r2, #32
 800164c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f043 0220 	orr.w	r2, r3, #32
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e007      	b.n	8001680 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800167a:	2b40      	cmp	r3, #64	; 0x40
 800167c:	d1b5      	bne.n	80015ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800169a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800169e:	d11b      	bne.n	80016d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80016a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2220      	movs	r2, #32
 80016b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f043 0204 	orr.w	r2, r3, #4
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e26c      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 8087 	beq.w	8001812 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001704:	4b92      	ldr	r3, [pc, #584]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 030c 	and.w	r3, r3, #12
 800170c:	2b04      	cmp	r3, #4
 800170e:	d00c      	beq.n	800172a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001710:	4b8f      	ldr	r3, [pc, #572]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 030c 	and.w	r3, r3, #12
 8001718:	2b08      	cmp	r3, #8
 800171a:	d112      	bne.n	8001742 <HAL_RCC_OscConfig+0x5e>
 800171c:	4b8c      	ldr	r3, [pc, #560]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001728:	d10b      	bne.n	8001742 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172a:	4b89      	ldr	r3, [pc, #548]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d06c      	beq.n	8001810 <HAL_RCC_OscConfig+0x12c>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d168      	bne.n	8001810 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e246      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800174a:	d106      	bne.n	800175a <HAL_RCC_OscConfig+0x76>
 800174c:	4b80      	ldr	r3, [pc, #512]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a7f      	ldr	r2, [pc, #508]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	e02e      	b.n	80017b8 <HAL_RCC_OscConfig+0xd4>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0x98>
 8001762:	4b7b      	ldr	r3, [pc, #492]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a7a      	ldr	r2, [pc, #488]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b78      	ldr	r3, [pc, #480]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a77      	ldr	r2, [pc, #476]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001774:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e01d      	b.n	80017b8 <HAL_RCC_OscConfig+0xd4>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0xbc>
 8001786:	4b72      	ldr	r3, [pc, #456]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a71      	ldr	r2, [pc, #452]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 800178c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b6f      	ldr	r3, [pc, #444]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a6e      	ldr	r2, [pc, #440]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e00b      	b.n	80017b8 <HAL_RCC_OscConfig+0xd4>
 80017a0:	4b6b      	ldr	r3, [pc, #428]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a6a      	ldr	r2, [pc, #424]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b68      	ldr	r3, [pc, #416]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a67      	ldr	r2, [pc, #412]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d013      	beq.n	80017e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7fe fd1c 	bl	80001fc <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c8:	f7fe fd18 	bl	80001fc <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	; 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e1fa      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4b5d      	ldr	r3, [pc, #372]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0xe4>
 80017e6:	e014      	b.n	8001812 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7fe fd08 	bl	80001fc <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f0:	f7fe fd04 	bl	80001fc <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	; 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e1e6      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001802:	4b53      	ldr	r3, [pc, #332]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x10c>
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d063      	beq.n	80018e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800181e:	4b4c      	ldr	r3, [pc, #304]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00b      	beq.n	8001842 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800182a:	4b49      	ldr	r3, [pc, #292]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	2b08      	cmp	r3, #8
 8001834:	d11c      	bne.n	8001870 <HAL_RCC_OscConfig+0x18c>
 8001836:	4b46      	ldr	r3, [pc, #280]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d116      	bne.n	8001870 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001842:	4b43      	ldr	r3, [pc, #268]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d005      	beq.n	800185a <HAL_RCC_OscConfig+0x176>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d001      	beq.n	800185a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e1ba      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185a:	4b3d      	ldr	r3, [pc, #244]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	4939      	ldr	r1, [pc, #228]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186e:	e03a      	b.n	80018e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d020      	beq.n	80018ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001878:	4b36      	ldr	r3, [pc, #216]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187e:	f7fe fcbd 	bl	80001fc <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001886:	f7fe fcb9 	bl	80001fc <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e19b      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001898:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a4:	4b2a      	ldr	r3, [pc, #168]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4927      	ldr	r1, [pc, #156]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	600b      	str	r3, [r1, #0]
 80018b8:	e015      	b.n	80018e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ba:	4b26      	ldr	r3, [pc, #152]	; (8001954 <HAL_RCC_OscConfig+0x270>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c0:	f7fe fc9c 	bl	80001fc <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c8:	f7fe fc98 	bl	80001fc <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e17a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018da:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d03a      	beq.n	8001968 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d019      	beq.n	800192e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fa:	4b17      	ldr	r3, [pc, #92]	; (8001958 <HAL_RCC_OscConfig+0x274>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001900:	f7fe fc7c 	bl	80001fc <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001908:	f7fe fc78 	bl	80001fc <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e15a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <HAL_RCC_OscConfig+0x26c>)
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001926:	2001      	movs	r0, #1
 8001928:	f000 fada 	bl	8001ee0 <RCC_Delay>
 800192c:	e01c      	b.n	8001968 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_RCC_OscConfig+0x274>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001934:	f7fe fc62 	bl	80001fc <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800193a:	e00f      	b.n	800195c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193c:	f7fe fc5e 	bl	80001fc <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d908      	bls.n	800195c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e140      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000
 8001954:	42420000 	.word	0x42420000
 8001958:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195c:	4b9e      	ldr	r3, [pc, #632]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1e9      	bne.n	800193c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80a6 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001976:	2300      	movs	r3, #0
 8001978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800197a:	4b97      	ldr	r3, [pc, #604]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10d      	bne.n	80019a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4b94      	ldr	r3, [pc, #592]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4a93      	ldr	r2, [pc, #588]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001990:	61d3      	str	r3, [r2, #28]
 8001992:	4b91      	ldr	r3, [pc, #580]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800199e:	2301      	movs	r3, #1
 80019a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a2:	4b8e      	ldr	r3, [pc, #568]	; (8001bdc <HAL_RCC_OscConfig+0x4f8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d118      	bne.n	80019e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ae:	4b8b      	ldr	r3, [pc, #556]	; (8001bdc <HAL_RCC_OscConfig+0x4f8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a8a      	ldr	r2, [pc, #552]	; (8001bdc <HAL_RCC_OscConfig+0x4f8>)
 80019b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ba:	f7fe fc1f 	bl	80001fc <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c2:	f7fe fc1b 	bl	80001fc <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b64      	cmp	r3, #100	; 0x64
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e0fd      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d4:	4b81      	ldr	r3, [pc, #516]	; (8001bdc <HAL_RCC_OscConfig+0x4f8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x312>
 80019e8:	4b7b      	ldr	r3, [pc, #492]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	4a7a      	ldr	r2, [pc, #488]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6213      	str	r3, [r2, #32]
 80019f4:	e02d      	b.n	8001a52 <HAL_RCC_OscConfig+0x36e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x334>
 80019fe:	4b76      	ldr	r3, [pc, #472]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	4a75      	ldr	r2, [pc, #468]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a04:	f023 0301 	bic.w	r3, r3, #1
 8001a08:	6213      	str	r3, [r2, #32]
 8001a0a:	4b73      	ldr	r3, [pc, #460]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	4a72      	ldr	r2, [pc, #456]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a10:	f023 0304 	bic.w	r3, r3, #4
 8001a14:	6213      	str	r3, [r2, #32]
 8001a16:	e01c      	b.n	8001a52 <HAL_RCC_OscConfig+0x36e>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	2b05      	cmp	r3, #5
 8001a1e:	d10c      	bne.n	8001a3a <HAL_RCC_OscConfig+0x356>
 8001a20:	4b6d      	ldr	r3, [pc, #436]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	4a6c      	ldr	r2, [pc, #432]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	6213      	str	r3, [r2, #32]
 8001a2c:	4b6a      	ldr	r3, [pc, #424]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	4a69      	ldr	r2, [pc, #420]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	6213      	str	r3, [r2, #32]
 8001a38:	e00b      	b.n	8001a52 <HAL_RCC_OscConfig+0x36e>
 8001a3a:	4b67      	ldr	r3, [pc, #412]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	4a66      	ldr	r2, [pc, #408]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	f023 0301 	bic.w	r3, r3, #1
 8001a44:	6213      	str	r3, [r2, #32]
 8001a46:	4b64      	ldr	r3, [pc, #400]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	4a63      	ldr	r2, [pc, #396]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a4c:	f023 0304 	bic.w	r3, r3, #4
 8001a50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d015      	beq.n	8001a86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5a:	f7fe fbcf 	bl	80001fc <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f7fe fbcb 	bl	80001fc <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e0ab      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a78:	4b57      	ldr	r3, [pc, #348]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0ee      	beq.n	8001a62 <HAL_RCC_OscConfig+0x37e>
 8001a84:	e014      	b.n	8001ab0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a86:	f7fe fbb9 	bl	80001fc <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8c:	e00a      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8e:	f7fe fbb5 	bl	80001fc <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e095      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa4:	4b4c      	ldr	r3, [pc, #304]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1ee      	bne.n	8001a8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d105      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab6:	4b48      	ldr	r3, [pc, #288]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	4a47      	ldr	r2, [pc, #284]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 8081 	beq.w	8001bce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001acc:	4b42      	ldr	r3, [pc, #264]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d061      	beq.n	8001b9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d146      	bne.n	8001b6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae0:	4b3f      	ldr	r3, [pc, #252]	; (8001be0 <HAL_RCC_OscConfig+0x4fc>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7fe fb89 	bl	80001fc <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aee:	f7fe fb85 	bl	80001fc <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e067      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b00:	4b35      	ldr	r3, [pc, #212]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f0      	bne.n	8001aee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b14:	d108      	bne.n	8001b28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b16:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	492d      	ldr	r1, [pc, #180]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b28:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a19      	ldr	r1, [r3, #32]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	4927      	ldr	r1, [pc, #156]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b40:	4b27      	ldr	r3, [pc, #156]	; (8001be0 <HAL_RCC_OscConfig+0x4fc>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7fe fb59 	bl	80001fc <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4e:	f7fe fb55 	bl	80001fc <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e037      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b60:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x46a>
 8001b6c:	e02f      	b.n	8001bce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <HAL_RCC_OscConfig+0x4fc>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7fe fb42 	bl	80001fc <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7c:	f7fe fb3e 	bl	80001fc <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e020      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x498>
 8001b9a:	e018      	b.n	8001bce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e013      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_RCC_OscConfig+0x4f4>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d106      	bne.n	8001bca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d001      	beq.n	8001bce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40007000 	.word	0x40007000
 8001be0:	42420060 	.word	0x42420060

08001be4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0d0      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf8:	4b6a      	ldr	r3, [pc, #424]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d910      	bls.n	8001c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c06:	4b67      	ldr	r3, [pc, #412]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 0207 	bic.w	r2, r3, #7
 8001c0e:	4965      	ldr	r1, [pc, #404]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b63      	ldr	r3, [pc, #396]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0b8      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d020      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c40:	4b59      	ldr	r3, [pc, #356]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	4a58      	ldr	r2, [pc, #352]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c58:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	4a52      	ldr	r2, [pc, #328]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c64:	4b50      	ldr	r3, [pc, #320]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	494d      	ldr	r1, [pc, #308]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d040      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d107      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8a:	4b47      	ldr	r3, [pc, #284]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d115      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e07f      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca2:	4b41      	ldr	r3, [pc, #260]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e073      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb2:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e06b      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cc2:	4b39      	ldr	r3, [pc, #228]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f023 0203 	bic.w	r2, r3, #3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4936      	ldr	r1, [pc, #216]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cd4:	f7fe fa92 	bl	80001fc <HAL_GetTick>
 8001cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cdc:	f7fe fa8e 	bl	80001fc <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e053      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 020c 	and.w	r2, r3, #12
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d1eb      	bne.n	8001cdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d04:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d210      	bcs.n	8001d34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 0207 	bic.w	r2, r3, #7
 8001d1a:	4922      	ldr	r1, [pc, #136]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e032      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d40:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4916      	ldr	r1, [pc, #88]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	490e      	ldr	r1, [pc, #56]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d72:	f000 f821 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 8001d76:	4601      	mov	r1, r0
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <HAL_RCC_ClockConfig+0x1c8>)
 8001d84:	5cd3      	ldrb	r3, [r2, r3]
 8001d86:	fa21 f303 	lsr.w	r3, r1, r3
 8001d8a:	4a09      	ldr	r2, [pc, #36]	; (8001db0 <HAL_RCC_ClockConfig+0x1cc>)
 8001d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_RCC_ClockConfig+0x1d0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe f9f0 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40022000 	.word	0x40022000
 8001da8:	40021000 	.word	0x40021000
 8001dac:	08003430 	.word	0x08003430
 8001db0:	20000008 	.word	0x20000008
 8001db4:	20000000 	.word	0x20000000

08001db8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db8:	b490      	push	{r4, r7}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dbe:	4b2a      	ldr	r3, [pc, #168]	; (8001e68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001dc0:	1d3c      	adds	r4, r7, #4
 8001dc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001dc8:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001de2:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d002      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0x40>
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d003      	beq.n	8001dfe <HAL_RCC_GetSysClockFreq+0x46>
 8001df6:	e02d      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001df8:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dfa:	623b      	str	r3, [r7, #32]
      break;
 8001dfc:	e02d      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	0c9b      	lsrs	r3, r3, #18
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e10:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d013      	beq.n	8001e44 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e1c:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	0c5b      	lsrs	r3, r3, #17
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	4a0f      	ldr	r2, [pc, #60]	; (8001e74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e36:	fb02 f203 	mul.w	r2, r2, r3
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
 8001e42:	e004      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	4a0c      	ldr	r2, [pc, #48]	; (8001e78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e48:	fb02 f303 	mul.w	r3, r2, r3
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	623b      	str	r3, [r7, #32]
      break;
 8001e52:	e002      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e54:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e56:	623b      	str	r3, [r7, #32]
      break;
 8001e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3728      	adds	r7, #40	; 0x28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc90      	pop	{r4, r7}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	08003408 	.word	0x08003408
 8001e6c:	08003418 	.word	0x08003418
 8001e70:	40021000 	.word	0x40021000
 8001e74:	007a1200 	.word	0x007a1200
 8001e78:	003d0900 	.word	0x003d0900

08001e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e80:	4b02      	ldr	r3, [pc, #8]	; (8001e8c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	20000008 	.word	0x20000008

08001e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e94:	f7ff fff2 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001e98:	4601      	mov	r1, r0
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	4a03      	ldr	r2, [pc, #12]	; (8001eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ea6:	5cd3      	ldrb	r3, [r2, r3]
 8001ea8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	08003440 	.word	0x08003440

08001eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ebc:	f7ff ffde 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001ec0:	4601      	mov	r1, r0
 8001ec2:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	0adb      	lsrs	r3, r3, #11
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	4a03      	ldr	r2, [pc, #12]	; (8001edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ece:	5cd3      	ldrb	r3, [r2, r3]
 8001ed0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	08003440 	.word	0x08003440

08001ee0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <RCC_Delay+0x34>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <RCC_Delay+0x38>)
 8001eee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef2:	0a5b      	lsrs	r3, r3, #9
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001efc:	bf00      	nop
  }
  while (Delay --);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1e5a      	subs	r2, r3, #1
 8001f02:	60fa      	str	r2, [r7, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1f9      	bne.n	8001efc <RCC_Delay+0x1c>
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	20000008 	.word	0x20000008
 8001f18:	10624dd3 	.word	0x10624dd3

08001f1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e03f      	b.n	8001fae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d106      	bne.n	8001f48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 fd1a 	bl	800297c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2224      	movs	r2, #36	; 0x24
 8001f4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f90b 	bl	800217c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b088      	sub	sp, #32
 8001fba:	af02      	add	r7, sp, #8
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	603b      	str	r3, [r7, #0]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b20      	cmp	r3, #32
 8001fd4:	f040 8083 	bne.w	80020de <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <HAL_UART_Transmit+0x2e>
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e07b      	b.n	80020e0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_UART_Transmit+0x40>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e074      	b.n	80020e0 <HAL_UART_Transmit+0x12a>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2221      	movs	r2, #33	; 0x21
 8002008:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800200c:	f7fe f8f6 	bl	80001fc <HAL_GetTick>
 8002010:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	88fa      	ldrh	r2, [r7, #6]
 8002016:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	88fa      	ldrh	r2, [r7, #6]
 800201c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800201e:	e042      	b.n	80020a6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002024:	b29b      	uxth	r3, r3
 8002026:	3b01      	subs	r3, #1
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002036:	d122      	bne.n	800207e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	2200      	movs	r2, #0
 8002040:	2180      	movs	r1, #128	; 0x80
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 f850 	bl	80020e8 <UART_WaitOnFlagUntilTimeout>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e046      	b.n	80020e0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002064:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d103      	bne.n	8002076 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	3302      	adds	r3, #2
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	e017      	b.n	80020a6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	3301      	adds	r3, #1
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	e013      	b.n	80020a6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2200      	movs	r2, #0
 8002086:	2180      	movs	r1, #128	; 0x80
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 f82d 	bl	80020e8 <UART_WaitOnFlagUntilTimeout>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e023      	b.n	80020e0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	1c5a      	adds	r2, r3, #1
 800209c:	60ba      	str	r2, [r7, #8]
 800209e:	781a      	ldrb	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1b7      	bne.n	8002020 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	2200      	movs	r2, #0
 80020b8:	2140      	movs	r1, #64	; 0x40
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f814 	bl	80020e8 <UART_WaitOnFlagUntilTimeout>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e00a      	b.n	80020e0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2220      	movs	r2, #32
 80020ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	e000      	b.n	80020e0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80020de:	2302      	movs	r3, #2
  }
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	4613      	mov	r3, r2
 80020f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020f8:	e02c      	b.n	8002154 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002100:	d028      	beq.n	8002154 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d007      	beq.n	8002118 <UART_WaitOnFlagUntilTimeout+0x30>
 8002108:	f7fe f878 	bl	80001fc <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	429a      	cmp	r2, r3
 8002116:	d21d      	bcs.n	8002154 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002126:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695a      	ldr	r2, [r3, #20]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0201 	bic.w	r2, r2, #1
 8002136:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e00f      	b.n	8002174 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	4013      	ands	r3, r2
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	429a      	cmp	r2, r3
 8002162:	bf0c      	ite	eq
 8002164:	2301      	moveq	r3, #1
 8002166:	2300      	movne	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	429a      	cmp	r2, r3
 8002170:	d0c3      	beq.n	80020fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80021b6:	f023 030c 	bic.w	r3, r3, #12
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	68f9      	ldr	r1, [r7, #12]
 80021c0:	430b      	orrs	r3, r1
 80021c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699a      	ldr	r2, [r3, #24]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a52      	ldr	r2, [pc, #328]	; (8002328 <UART_SetConfig+0x1ac>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d14e      	bne.n	8002282 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021e4:	f7ff fe68 	bl	8001eb8 <HAL_RCC_GetPCLK2Freq>
 80021e8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	009a      	lsls	r2, r3, #2
 80021f4:	441a      	add	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002200:	4a4a      	ldr	r2, [pc, #296]	; (800232c <UART_SetConfig+0x1b0>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	0119      	lsls	r1, r3, #4
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	009a      	lsls	r2, r3, #2
 8002214:	441a      	add	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002220:	4b42      	ldr	r3, [pc, #264]	; (800232c <UART_SetConfig+0x1b0>)
 8002222:	fba3 0302 	umull	r0, r3, r3, r2
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	2064      	movs	r0, #100	; 0x64
 800222a:	fb00 f303 	mul.w	r3, r0, r3
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	3332      	adds	r3, #50	; 0x32
 8002234:	4a3d      	ldr	r2, [pc, #244]	; (800232c <UART_SetConfig+0x1b0>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002240:	4419      	add	r1, r3
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	009a      	lsls	r2, r3, #2
 800224c:	441a      	add	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	fbb2 f2f3 	udiv	r2, r2, r3
 8002258:	4b34      	ldr	r3, [pc, #208]	; (800232c <UART_SetConfig+0x1b0>)
 800225a:	fba3 0302 	umull	r0, r3, r3, r2
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	2064      	movs	r0, #100	; 0x64
 8002262:	fb00 f303 	mul.w	r3, r0, r3
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	011b      	lsls	r3, r3, #4
 800226a:	3332      	adds	r3, #50	; 0x32
 800226c:	4a2f      	ldr	r2, [pc, #188]	; (800232c <UART_SetConfig+0x1b0>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	f003 020f 	and.w	r2, r3, #15
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	440a      	add	r2, r1
 800227e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002280:	e04d      	b.n	800231e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002282:	f7ff fe05 	bl	8001e90 <HAL_RCC_GetPCLK1Freq>
 8002286:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	009a      	lsls	r2, r3, #2
 8002292:	441a      	add	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	fbb2 f3f3 	udiv	r3, r2, r3
 800229e:	4a23      	ldr	r2, [pc, #140]	; (800232c <UART_SetConfig+0x1b0>)
 80022a0:	fba2 2303 	umull	r2, r3, r2, r3
 80022a4:	095b      	lsrs	r3, r3, #5
 80022a6:	0119      	lsls	r1, r3, #4
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	009a      	lsls	r2, r3, #2
 80022b2:	441a      	add	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80022be:	4b1b      	ldr	r3, [pc, #108]	; (800232c <UART_SetConfig+0x1b0>)
 80022c0:	fba3 0302 	umull	r0, r3, r3, r2
 80022c4:	095b      	lsrs	r3, r3, #5
 80022c6:	2064      	movs	r0, #100	; 0x64
 80022c8:	fb00 f303 	mul.w	r3, r0, r3
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	3332      	adds	r3, #50	; 0x32
 80022d2:	4a16      	ldr	r2, [pc, #88]	; (800232c <UART_SetConfig+0x1b0>)
 80022d4:	fba2 2303 	umull	r2, r3, r2, r3
 80022d8:	095b      	lsrs	r3, r3, #5
 80022da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022de:	4419      	add	r1, r3
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	009a      	lsls	r2, r3, #2
 80022ea:	441a      	add	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <UART_SetConfig+0x1b0>)
 80022f8:	fba3 0302 	umull	r0, r3, r3, r2
 80022fc:	095b      	lsrs	r3, r3, #5
 80022fe:	2064      	movs	r0, #100	; 0x64
 8002300:	fb00 f303 	mul.w	r3, r0, r3
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	3332      	adds	r3, #50	; 0x32
 800230a:	4a08      	ldr	r2, [pc, #32]	; (800232c <UART_SetConfig+0x1b0>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	f003 020f 	and.w	r2, r3, #15
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	440a      	add	r2, r1
 800231c:	609a      	str	r2, [r3, #8]
}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40013800 	.word	0x40013800
 800232c:	51eb851f 	.word	0x51eb851f

08002330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002336:	f7fd ff09 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800233a:	f000 f855 	bl	80023e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800233e:	f000 f8f1 	bl	8002524 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002342:	f000 f897 	bl	8002474 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002346:	f000 f8c3 	bl	80024d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  begin(&hi2c1, 0x20 );
 800234a:	2120      	movs	r1, #32
 800234c:	4822      	ldr	r0, [pc, #136]	; (80023d8 <main+0xa8>)
 800234e:	f000 fa1b 	bl	8002788 <begin>
  for(uint8_t i=0; i<15; i++){
 8002352:	2300      	movs	r3, #0
 8002354:	75fb      	strb	r3, [r7, #23]
 8002356:	e00c      	b.n	8002372 <main+0x42>
      pinMode(i, INPUT);
 8002358:	7dfb      	ldrb	r3, [r7, #23]
 800235a:	2100      	movs	r1, #0
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fa31 	bl	80027c4 <pinMode>
      pullUp(i, HIGH);
 8002362:	7dfb      	ldrb	r3, [r7, #23]
 8002364:	2101      	movs	r1, #1
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fa44 	bl	80027f4 <pullUp>
  for(uint8_t i=0; i<15; i++){
 800236c:	7dfb      	ldrb	r3, [r7, #23]
 800236e:	3301      	adds	r3, #1
 8002370:	75fb      	strb	r3, [r7, #23]
 8002372:	7dfb      	ldrb	r3, [r7, #23]
 8002374:	2b0e      	cmp	r3, #14
 8002376:	d9ef      	bls.n	8002358 <main+0x28>
//		  HAL_UART_Transmit(&huart2, &buffer, sizeof(buffer), 100);
//		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//		  delay(100);
//	  }
//	  delay(100);
	  for(uint8_t i=0; i<15; i++){
 8002378:	2300      	movs	r3, #0
 800237a:	75bb      	strb	r3, [r7, #22]
 800237c:	e027      	b.n	80023ce <main+0x9e>
	      if(!digitalRead(i)){
 800237e:	7dbb      	ldrb	r3, [r7, #22]
 8002380:	4618      	mov	r0, r3
 8002382:	f000 fa49 	bl	8002818 <digitalRead>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d11a      	bne.n	80023c2 <main+0x92>
	    	sprintf(&buffer, "Pin:  %d \r\n", i);
 800238c:	7dba      	ldrb	r2, [r7, #22]
 800238e:	463b      	mov	r3, r7
 8002390:	4912      	ldr	r1, [pc, #72]	; (80023dc <main+0xac>)
 8002392:	4618      	mov	r0, r3
 8002394:	f000 fc1a 	bl	8002bcc <siprintf>
	    	HAL_UART_Transmit(&huart2, &buffer, sizeof(buffer), 100);
 8002398:	4639      	mov	r1, r7
 800239a:	2364      	movs	r3, #100	; 0x64
 800239c:	2214      	movs	r2, #20
 800239e:	4810      	ldr	r0, [pc, #64]	; (80023e0 <main+0xb0>)
 80023a0:	f7ff fe09 	bl	8001fb6 <HAL_UART_Transmit>

	    	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80023a4:	2120      	movs	r1, #32
 80023a6:	480f      	ldr	r0, [pc, #60]	; (80023e4 <main+0xb4>)
 80023a8:	f7fe f9d4 	bl	8000754 <HAL_GPIO_TogglePin>
	        while(!digitalRead(i)){
 80023ac:	e002      	b.n	80023b4 <main+0x84>
	        delay(100);
 80023ae:	2064      	movs	r0, #100	; 0x64
 80023b0:	f7fd ff2e 	bl	8000210 <HAL_Delay>
	        while(!digitalRead(i)){
 80023b4:	7dbb      	ldrb	r3, [r7, #22]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fa2e 	bl	8002818 <digitalRead>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f5      	beq.n	80023ae <main+0x7e>
	        }
	      }
	      delay(100);
 80023c2:	2064      	movs	r0, #100	; 0x64
 80023c4:	f7fd ff24 	bl	8000210 <HAL_Delay>
	  for(uint8_t i=0; i<15; i++){
 80023c8:	7dbb      	ldrb	r3, [r7, #22]
 80023ca:	3301      	adds	r3, #1
 80023cc:	75bb      	strb	r3, [r7, #22]
 80023ce:	7dbb      	ldrb	r3, [r7, #22]
 80023d0:	2b0e      	cmp	r3, #14
 80023d2:	d9d4      	bls.n	800237e <main+0x4e>
 80023d4:	e7d0      	b.n	8002378 <main+0x48>
 80023d6:	bf00      	nop
 80023d8:	200000a4 	.word	0x200000a4
 80023dc:	0800341c 	.word	0x0800341c
 80023e0:	20000100 	.word	0x20000100
 80023e4:	40010800 	.word	0x40010800

080023e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b090      	sub	sp, #64	; 0x40
 80023ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ee:	f107 0318 	add.w	r3, r7, #24
 80023f2:	2228      	movs	r2, #40	; 0x28
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 fbe0 	bl	8002bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023fc:	1d3b      	adds	r3, r7, #4
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	609a      	str	r2, [r3, #8]
 8002406:	60da      	str	r2, [r3, #12]
 8002408:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800240a:	2301      	movs	r3, #1
 800240c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800240e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002412:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002414:	2300      	movs	r3, #0
 8002416:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002418:	2301      	movs	r3, #1
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800241c:	2302      	movs	r3, #2
 800241e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002420:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002424:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002426:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800242a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800242c:	f107 0318 	add.w	r3, r7, #24
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff f957 	bl	80016e4 <HAL_RCC_OscConfig>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800243c:	f000 f8e0 	bl	8002600 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002440:	230f      	movs	r3, #15
 8002442:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002444:	2302      	movs	r3, #2
 8002446:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800244c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002450:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002456:	1d3b      	adds	r3, r7, #4
 8002458:	2102      	movs	r1, #2
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fbc2 	bl	8001be4 <HAL_RCC_ClockConfig>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002466:	f000 f8cb 	bl	8002600 <Error_Handler>
  }
}
 800246a:	bf00      	nop
 800246c:	3740      	adds	r7, #64	; 0x40
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002478:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <MX_I2C1_Init+0x50>)
 800247a:	4a13      	ldr	r2, [pc, #76]	; (80024c8 <MX_I2C1_Init+0x54>)
 800247c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <MX_I2C1_Init+0x50>)
 8002480:	4a12      	ldr	r2, [pc, #72]	; (80024cc <MX_I2C1_Init+0x58>)
 8002482:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002484:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <MX_I2C1_Init+0x50>)
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800248a:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <MX_I2C1_Init+0x50>)
 800248c:	2200      	movs	r2, #0
 800248e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <MX_I2C1_Init+0x50>)
 8002492:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002496:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002498:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <MX_I2C1_Init+0x50>)
 800249a:	2200      	movs	r2, #0
 800249c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <MX_I2C1_Init+0x50>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024a4:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <MX_I2C1_Init+0x50>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <MX_I2C1_Init+0x50>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024b0:	4804      	ldr	r0, [pc, #16]	; (80024c4 <MX_I2C1_Init+0x50>)
 80024b2:	f7fe f989 	bl	80007c8 <HAL_I2C_Init>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024bc:	f000 f8a0 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	200000a4 	.word	0x200000a4
 80024c8:	40005400 	.word	0x40005400
 80024cc:	000186a0 	.word	0x000186a0

080024d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024d4:	4b11      	ldr	r3, [pc, #68]	; (800251c <MX_USART2_UART_Init+0x4c>)
 80024d6:	4a12      	ldr	r2, [pc, #72]	; (8002520 <MX_USART2_UART_Init+0x50>)
 80024d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <MX_USART2_UART_Init+0x4c>)
 80024dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <MX_USART2_UART_Init+0x4c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <MX_USART2_UART_Init+0x4c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024ee:	4b0b      	ldr	r3, [pc, #44]	; (800251c <MX_USART2_UART_Init+0x4c>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024f4:	4b09      	ldr	r3, [pc, #36]	; (800251c <MX_USART2_UART_Init+0x4c>)
 80024f6:	220c      	movs	r2, #12
 80024f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024fa:	4b08      	ldr	r3, [pc, #32]	; (800251c <MX_USART2_UART_Init+0x4c>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <MX_USART2_UART_Init+0x4c>)
 8002502:	2200      	movs	r2, #0
 8002504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002506:	4805      	ldr	r0, [pc, #20]	; (800251c <MX_USART2_UART_Init+0x4c>)
 8002508:	f7ff fd08 	bl	8001f1c <HAL_UART_Init>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002512:	f000 f875 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000100 	.word	0x20000100
 8002520:	40004400 	.word	0x40004400

08002524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252a:	f107 0310 	add.w	r3, r7, #16
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002538:	4b2d      	ldr	r3, [pc, #180]	; (80025f0 <MX_GPIO_Init+0xcc>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	4a2c      	ldr	r2, [pc, #176]	; (80025f0 <MX_GPIO_Init+0xcc>)
 800253e:	f043 0310 	orr.w	r3, r3, #16
 8002542:	6193      	str	r3, [r2, #24]
 8002544:	4b2a      	ldr	r3, [pc, #168]	; (80025f0 <MX_GPIO_Init+0xcc>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002550:	4b27      	ldr	r3, [pc, #156]	; (80025f0 <MX_GPIO_Init+0xcc>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	4a26      	ldr	r2, [pc, #152]	; (80025f0 <MX_GPIO_Init+0xcc>)
 8002556:	f043 0320 	orr.w	r3, r3, #32
 800255a:	6193      	str	r3, [r2, #24]
 800255c:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <MX_GPIO_Init+0xcc>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002568:	4b21      	ldr	r3, [pc, #132]	; (80025f0 <MX_GPIO_Init+0xcc>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	4a20      	ldr	r2, [pc, #128]	; (80025f0 <MX_GPIO_Init+0xcc>)
 800256e:	f043 0304 	orr.w	r3, r3, #4
 8002572:	6193      	str	r3, [r2, #24]
 8002574:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <MX_GPIO_Init+0xcc>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002580:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <MX_GPIO_Init+0xcc>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	4a1a      	ldr	r2, [pc, #104]	; (80025f0 <MX_GPIO_Init+0xcc>)
 8002586:	f043 0308 	orr.w	r3, r3, #8
 800258a:	6193      	str	r3, [r2, #24]
 800258c:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <MX_GPIO_Init+0xcc>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	603b      	str	r3, [r7, #0]
 8002596:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002598:	2200      	movs	r2, #0
 800259a:	2120      	movs	r1, #32
 800259c:	4815      	ldr	r0, [pc, #84]	; (80025f4 <MX_GPIO_Init+0xd0>)
 800259e:	f7fe f8c1 	bl	8000724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80025a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025a8:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <MX_GPIO_Init+0xd4>)
 80025aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80025b0:	f107 0310 	add.w	r3, r7, #16
 80025b4:	4619      	mov	r1, r3
 80025b6:	4811      	ldr	r0, [pc, #68]	; (80025fc <MX_GPIO_Init+0xd8>)
 80025b8:	f7fd ff5a 	bl	8000470 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80025bc:	2320      	movs	r3, #32
 80025be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c0:	2301      	movs	r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c8:	2302      	movs	r3, #2
 80025ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80025cc:	f107 0310 	add.w	r3, r7, #16
 80025d0:	4619      	mov	r1, r3
 80025d2:	4808      	ldr	r0, [pc, #32]	; (80025f4 <MX_GPIO_Init+0xd0>)
 80025d4:	f7fd ff4c 	bl	8000470 <HAL_GPIO_Init>


  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80025d8:	2200      	movs	r2, #0
 80025da:	2100      	movs	r1, #0
 80025dc:	2028      	movs	r0, #40	; 0x28
 80025de:	f7fd ff10 	bl	8000402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025e2:	2028      	movs	r0, #40	; 0x28
 80025e4:	f7fd ff29 	bl	800043a <HAL_NVIC_EnableIRQ>

}
 80025e8:	bf00      	nop
 80025ea:	3720      	adds	r7, #32
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40010800 	.word	0x40010800
 80025f8:	10110000 	.word	0x10110000
 80025fc:	40011000 	.word	0x40011000

08002600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_UART_Transmit(&huart2, "ERROR\r\n", 10, 150);
 8002604:	2396      	movs	r3, #150	; 0x96
 8002606:	220a      	movs	r2, #10
 8002608:	4906      	ldr	r1, [pc, #24]	; (8002624 <Error_Handler+0x24>)
 800260a:	4807      	ldr	r0, [pc, #28]	; (8002628 <Error_Handler+0x28>)
 800260c:	f7ff fcd3 	bl	8001fb6 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002610:	2120      	movs	r1, #32
 8002612:	4806      	ldr	r0, [pc, #24]	; (800262c <Error_Handler+0x2c>)
 8002614:	f7fe f89e 	bl	8000754 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8002618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800261c:	f7fd fdf8 	bl	8000210 <HAL_Delay>
  /* USER CODE END Error_Handler_Debug */
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	08003428 	.word	0x08003428
 8002628:	20000100 	.word	0x20000100
 800262c:	40010800 	.word	0x40010800

08002630 <bitForPin>:
static uint8_t data = 0;

/**
 * Bit number associated to a give Pin
 */
uint8_t bitForPin(uint8_t pin){
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
	return pin%8;
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	b2db      	uxtb	r3, r3
}
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <regForPin>:

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
 8002656:	460b      	mov	r3, r1
 8002658:	71bb      	strb	r3, [r7, #6]
 800265a:	4613      	mov	r3, r2
 800265c:	717b      	strb	r3, [r7, #5]
	return(pin<8) ?portAaddr:portBaddr;
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	2b07      	cmp	r3, #7
 8002662:	d801      	bhi.n	8002668 <regForPin+0x1c>
 8002664:	79bb      	ldrb	r3, [r7, #6]
 8002666:	e000      	b.n	800266a <regForPin+0x1e>
 8002668:	797b      	ldrb	r3, [r7, #5]
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <writeRegister>:

void writeRegister(uint8_t regAddr, uint8_t regValue){
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af04      	add	r7, sp, #16
 800267a:	4603      	mov	r3, r0
 800267c:	460a      	mov	r2, r1
 800267e:	71fb      	strb	r3, [r7, #7]
 8002680:	4613      	mov	r3, r2
 8002682:	71bb      	strb	r3, [r7, #6]
	uint8_t data[1] = { regValue };
 8002684:	79bb      	ldrb	r3, [r7, #6]
 8002686:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write((I2C_HandleTypeDef*) I2C, (uint16_t) (i2caddr), regAddr, 1, data, 1, 350);
 8002688:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <writeRegister+0x40>)
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <writeRegister+0x44>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	b299      	uxth	r1, r3
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	b29a      	uxth	r2, r3
 8002696:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800269a:	9302      	str	r3, [sp, #8]
 800269c:	2301      	movs	r3, #1
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	f107 030c 	add.w	r3, r7, #12
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	2301      	movs	r3, #1
 80026a8:	f7fe f9b6 	bl	8000a18 <HAL_I2C_Mem_Write>
}
 80026ac:	bf00      	nop
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	2000008c 	.word	0x2000008c
 80026b8:	20000090 	.word	0x20000090

080026bc <updateRegisterBit>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4604      	mov	r4, r0
 80026c4:	4608      	mov	r0, r1
 80026c6:	4611      	mov	r1, r2
 80026c8:	461a      	mov	r2, r3
 80026ca:	4623      	mov	r3, r4
 80026cc:	71fb      	strb	r3, [r7, #7]
 80026ce:	4603      	mov	r3, r0
 80026d0:	71bb      	strb	r3, [r7, #6]
 80026d2:	460b      	mov	r3, r1
 80026d4:	717b      	strb	r3, [r7, #5]
 80026d6:	4613      	mov	r3, r2
 80026d8:	713b      	strb	r3, [r7, #4]
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
 80026da:	793a      	ldrb	r2, [r7, #4]
 80026dc:	7979      	ldrb	r1, [r7, #5]
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff ffb3 	bl	800264c <regForPin>
 80026e6:	4603      	mov	r3, r0
 80026e8:	73bb      	strb	r3, [r7, #14]
	uint8_t bit=bitForPin(pin);
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff ff9f 	bl	8002630 <bitForPin>
 80026f2:	4603      	mov	r3, r0
 80026f4:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
 80026f6:	7bbb      	ldrb	r3, [r7, #14]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 f823 	bl	8002744 <readRegister>
 80026fe:	4603      	mov	r3, r0
 8002700:	73fb      	strb	r3, [r7, #15]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
 8002702:	79bb      	ldrb	r3, [r7, #6]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <updateRegisterBit+0x5e>
 8002708:	7b7b      	ldrb	r3, [r7, #13]
 800270a:	2201      	movs	r2, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	b2da      	uxtb	r2, r3
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	4313      	orrs	r3, r2
 8002716:	73fb      	strb	r3, [r7, #15]
 8002718:	e009      	b.n	800272e <updateRegisterBit+0x72>
 800271a:	7b7b      	ldrb	r3, [r7, #13]
 800271c:	2201      	movs	r2, #1
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	b2da      	uxtb	r2, r3
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	4013      	ands	r3, r2
 800272c:	73fb      	strb	r3, [r7, #15]

	writeRegister(regAddr,regValue);
 800272e:	7bfa      	ldrb	r2, [r7, #15]
 8002730:	7bbb      	ldrb	r3, [r7, #14]
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff9d 	bl	8002674 <writeRegister>
}
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	bd90      	pop	{r4, r7, pc}
	...

08002744 <readRegister>:


/**
 * Reads a given register
 */
uint8_t readRegister(uint8_t addr){
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af04      	add	r7, sp, #16
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
//	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
//	wiresend(addr);
//	Wire.endTransmission();
//	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
//	return wirerecv();
	HAL_I2C_Mem_Read((I2C_HandleTypeDef*) I2C, (uint16_t)(i2caddr), addr, 1, &data, 1, 350);
 800274e:	4b0b      	ldr	r3, [pc, #44]	; (800277c <readRegister+0x38>)
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <readRegister+0x3c>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	b299      	uxth	r1, r3
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	b29a      	uxth	r2, r3
 800275c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8002760:	9302      	str	r3, [sp, #8]
 8002762:	2301      	movs	r3, #1
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	4b07      	ldr	r3, [pc, #28]	; (8002784 <readRegister+0x40>)
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	2301      	movs	r3, #1
 800276c:	f7fe fa4e 	bl	8000c0c <HAL_I2C_Mem_Read>
	return data;
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <readRegister+0x40>)
 8002772:	781b      	ldrb	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	2000008c 	.word	0x2000008c
 8002780:	20000090 	.word	0x20000090
 8002784:	20000091 	.word	0x20000091

08002788 <begin>:

// Functions for Arduino like
void begin(I2C_HandleTypeDef * I2C_Handler, uint8_t addr) {
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	70fb      	strb	r3, [r7, #3]

	I2C = I2C_Handler;
 8002794:	4a09      	ldr	r2, [pc, #36]	; (80027bc <begin+0x34>)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6013      	str	r3, [r2, #0]
	i2caddr = addr<<1;
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <begin+0x38>)
 80027a2:	701a      	strb	r2, [r3, #0]

	// all inputs on port A and B
	writeRegister(MCP23017_IODIRA,0xff);
 80027a4:	21ff      	movs	r1, #255	; 0xff
 80027a6:	2000      	movs	r0, #0
 80027a8:	f7ff ff64 	bl	8002674 <writeRegister>
	writeRegister(MCP23017_IODIRB,0xff);
 80027ac:	21ff      	movs	r1, #255	; 0xff
 80027ae:	2001      	movs	r0, #1
 80027b0:	f7ff ff60 	bl	8002674 <writeRegister>
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	2000008c 	.word	0x2000008c
 80027c0:	20000090 	.word	0x20000090

080027c4 <pinMode>:

/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void pinMode(uint8_t p, uint8_t d) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	460a      	mov	r2, r1
 80027ce:	71fb      	strb	r3, [r7, #7]
 80027d0:	4613      	mov	r3, r2
 80027d2:	71bb      	strb	r3, [r7, #6]
	updateRegisterBit(p,(d==INPUT),MCP23017_IODIRA,MCP23017_IODIRB);
 80027d4:	79bb      	ldrb	r3, [r7, #6]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	bf0c      	ite	eq
 80027da:	2301      	moveq	r3, #1
 80027dc:	2300      	movne	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	4619      	mov	r1, r3
 80027e2:	79f8      	ldrb	r0, [r7, #7]
 80027e4:	2301      	movs	r3, #1
 80027e6:	2200      	movs	r2, #0
 80027e8:	f7ff ff68 	bl	80026bc <updateRegisterBit>
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <pullUp>:

/**
 * Enable a pullUp resistor for a given pin
 */
void pullUp(uint8_t p, uint8_t d) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	460a      	mov	r2, r1
 80027fe:	71fb      	strb	r3, [r7, #7]
 8002800:	4613      	mov	r3, r2
 8002802:	71bb      	strb	r3, [r7, #6]
	updateRegisterBit(p,d,MCP23017_GPPUA,MCP23017_GPPUB);
 8002804:	79b9      	ldrb	r1, [r7, #6]
 8002806:	79f8      	ldrb	r0, [r7, #7]
 8002808:	230d      	movs	r3, #13
 800280a:	220c      	movs	r2, #12
 800280c:	f7ff ff56 	bl	80026bc <updateRegisterBit>
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <digitalRead>:


uint8_t digitalRead(uint8_t pin) {
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
	uint8_t bit=bitForPin(pin);
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff03 	bl	8002630 <bitForPin>
 800282a:	4603      	mov	r3, r0
 800282c:	73fb      	strb	r3, [r7, #15]
	uint8_t regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	2213      	movs	r2, #19
 8002832:	2112      	movs	r1, #18
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff09 	bl	800264c <regForPin>
 800283a:	4603      	mov	r3, r0
 800283c:	73bb      	strb	r3, [r7, #14]
	return (readRegister(regAddr) >> bit) & 0x1;
 800283e:	7bbb      	ldrb	r3, [r7, #14]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff7f 	bl	8002744 <readRegister>
 8002846:	4603      	mov	r3, r0
 8002848:	461a      	mov	r2, r3
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	fa42 f303 	asr.w	r3, r2, r3
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	b2db      	uxtb	r3, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002866:	4b15      	ldr	r3, [pc, #84]	; (80028bc <HAL_MspInit+0x5c>)
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	4a14      	ldr	r2, [pc, #80]	; (80028bc <HAL_MspInit+0x5c>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	6193      	str	r3, [r2, #24]
 8002872:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_MspInit+0x5c>)
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <HAL_MspInit+0x5c>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	4a0e      	ldr	r2, [pc, #56]	; (80028bc <HAL_MspInit+0x5c>)
 8002884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002888:	61d3      	str	r3, [r2, #28]
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <HAL_MspInit+0x5c>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_MspInit+0x60>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <HAL_MspInit+0x60>)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40010000 	.word	0x40010000

080028c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	; 0x28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a23      	ldr	r2, [pc, #140]	; (800296c <HAL_I2C_MspInit+0xa8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d13e      	bne.n	8002962 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e4:	4b22      	ldr	r3, [pc, #136]	; (8002970 <HAL_I2C_MspInit+0xac>)
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	4a21      	ldr	r2, [pc, #132]	; (8002970 <HAL_I2C_MspInit+0xac>)
 80028ea:	f043 0308 	orr.w	r3, r3, #8
 80028ee:	6193      	str	r3, [r2, #24]
 80028f0:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <HAL_I2C_MspInit+0xac>)
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002902:	2312      	movs	r3, #18
 8002904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002906:	2303      	movs	r3, #3
 8002908:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290a:	f107 0314 	add.w	r3, r7, #20
 800290e:	4619      	mov	r1, r3
 8002910:	4818      	ldr	r0, [pc, #96]	; (8002974 <HAL_I2C_MspInit+0xb0>)
 8002912:	f7fd fdad 	bl	8000470 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002916:	4b18      	ldr	r3, [pc, #96]	; (8002978 <HAL_I2C_MspInit+0xb4>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	f043 0302 	orr.w	r3, r3, #2
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
 800292c:	4a12      	ldr	r2, [pc, #72]	; (8002978 <HAL_I2C_MspInit+0xb4>)
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002932:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <HAL_I2C_MspInit+0xac>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	4a0e      	ldr	r2, [pc, #56]	; (8002970 <HAL_I2C_MspInit+0xac>)
 8002938:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800293c:	61d3      	str	r3, [r2, #28]
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <HAL_I2C_MspInit+0xac>)
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */
    __HAL_RCC_I2C1_FORCE_RESET();
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_I2C_MspInit+0xac>)
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	4a08      	ldr	r2, [pc, #32]	; (8002970 <HAL_I2C_MspInit+0xac>)
 8002950:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002954:	6113      	str	r3, [r2, #16]
    __HAL_RCC_I2C1_RELEASE_RESET();
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <HAL_I2C_MspInit+0xac>)
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	4a05      	ldr	r2, [pc, #20]	; (8002970 <HAL_I2C_MspInit+0xac>)
 800295c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002960:	6113      	str	r3, [r2, #16]
  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002962:	bf00      	nop
 8002964:	3728      	adds	r7, #40	; 0x28
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40005400 	.word	0x40005400
 8002970:	40021000 	.word	0x40021000
 8002974:	40010c00 	.word	0x40010c00
 8002978:	40010000 	.word	0x40010000

0800297c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002984:	f107 0310 	add.w	r3, r7, #16
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a15      	ldr	r2, [pc, #84]	; (80029ec <HAL_UART_MspInit+0x70>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d123      	bne.n	80029e4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800299c:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <HAL_UART_MspInit+0x74>)
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	4a13      	ldr	r2, [pc, #76]	; (80029f0 <HAL_UART_MspInit+0x74>)
 80029a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a6:	61d3      	str	r3, [r2, #28]
 80029a8:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <HAL_UART_MspInit+0x74>)
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b4:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <HAL_UART_MspInit+0x74>)
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <HAL_UART_MspInit+0x74>)
 80029ba:	f043 0304 	orr.w	r3, r3, #4
 80029be:	6193      	str	r3, [r2, #24]
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_UART_MspInit+0x74>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029cc:	230c      	movs	r3, #12
 80029ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d0:	2302      	movs	r3, #2
 80029d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d4:	2302      	movs	r3, #2
 80029d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d8:	f107 0310 	add.w	r3, r7, #16
 80029dc:	4619      	mov	r1, r3
 80029de:	4805      	ldr	r0, [pc, #20]	; (80029f4 <HAL_UART_MspInit+0x78>)
 80029e0:	f7fd fd46 	bl	8000470 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029e4:	bf00      	nop
 80029e6:	3720      	adds	r7, #32
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40004400 	.word	0x40004400
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40010800 	.word	0x40010800

080029f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a08:	e7fe      	b.n	8002a08 <HardFault_Handler+0x4>

08002a0a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a0e:	e7fe      	b.n	8002a0e <MemManage_Handler+0x4>

08002a10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a14:	e7fe      	b.n	8002a14 <BusFault_Handler+0x4>

08002a16 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a1a:	e7fe      	b.n	8002a1a <UsageFault_Handler+0x4>

08002a1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a44:	f7fd fbc8 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a48:	bf00      	nop
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002a50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002a54:	f7fd fe96 	bl	8000784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a58:	bf00      	nop
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <_sbrk+0x50>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <_sbrk+0x16>
		heap_end = &end;
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <_sbrk+0x50>)
 8002a6e:	4a10      	ldr	r2, [pc, #64]	; (8002ab0 <_sbrk+0x54>)
 8002a70:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <_sbrk+0x50>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <_sbrk+0x50>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4413      	add	r3, r2
 8002a80:	466a      	mov	r2, sp
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d907      	bls.n	8002a96 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002a86:	f000 f86f 	bl	8002b68 <__errno>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	230c      	movs	r3, #12
 8002a8e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a94:	e006      	b.n	8002aa4 <_sbrk+0x48>
	}

	heap_end += incr;
 8002a96:	4b05      	ldr	r3, [pc, #20]	; (8002aac <_sbrk+0x50>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	4a03      	ldr	r2, [pc, #12]	; (8002aac <_sbrk+0x50>)
 8002aa0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20000094 	.word	0x20000094
 8002ab0:	20000148 	.word	0x20000148

08002ab4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002ab8:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <SystemInit+0x5c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a14      	ldr	r2, [pc, #80]	; (8002b10 <SystemInit+0x5c>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002ac4:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <SystemInit+0x5c>)
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4911      	ldr	r1, [pc, #68]	; (8002b10 <SystemInit+0x5c>)
 8002aca:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <SystemInit+0x60>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <SystemInit+0x5c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0e      	ldr	r2, [pc, #56]	; (8002b10 <SystemInit+0x5c>)
 8002ad6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ade:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <SystemInit+0x5c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <SystemInit+0x5c>)
 8002ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002aec:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <SystemInit+0x5c>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4a07      	ldr	r2, [pc, #28]	; (8002b10 <SystemInit+0x5c>)
 8002af2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002af6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002af8:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <SystemInit+0x5c>)
 8002afa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002afe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002b00:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <SystemInit+0x64>)
 8002b02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b06:	609a      	str	r2, [r3, #8]
#endif 
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	40021000 	.word	0x40021000
 8002b14:	f8ff0000 	.word	0xf8ff0000
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002b1c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002b1e:	e003      	b.n	8002b28 <LoopCopyDataInit>

08002b20 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002b22:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002b24:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002b26:	3104      	adds	r1, #4

08002b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002b28:	480a      	ldr	r0, [pc, #40]	; (8002b54 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002b2c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002b2e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002b30:	d3f6      	bcc.n	8002b20 <CopyDataInit>
  ldr r2, =_sbss
 8002b32:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002b34:	e002      	b.n	8002b3c <LoopFillZerobss>

08002b36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002b36:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002b38:	f842 3b04 	str.w	r3, [r2], #4

08002b3c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002b3c:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002b3e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002b40:	d3f9      	bcc.n	8002b36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b42:	f7ff ffb7 	bl	8002ab4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b46:	f000 f815 	bl	8002b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b4a:	f7ff fbf1 	bl	8002330 <main>
  bx lr
 8002b4e:	4770      	bx	lr
  ldr r3, =_sidata
 8002b50:	08003484 	.word	0x08003484
  ldr r0, =_sdata
 8002b54:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002b58:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8002b5c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002b60:	20000144 	.word	0x20000144

08002b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b64:	e7fe      	b.n	8002b64 <ADC1_2_IRQHandler>
	...

08002b68 <__errno>:
 8002b68:	4b01      	ldr	r3, [pc, #4]	; (8002b70 <__errno+0x8>)
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	2000000c 	.word	0x2000000c

08002b74 <__libc_init_array>:
 8002b74:	b570      	push	{r4, r5, r6, lr}
 8002b76:	2500      	movs	r5, #0
 8002b78:	4e0c      	ldr	r6, [pc, #48]	; (8002bac <__libc_init_array+0x38>)
 8002b7a:	4c0d      	ldr	r4, [pc, #52]	; (8002bb0 <__libc_init_array+0x3c>)
 8002b7c:	1ba4      	subs	r4, r4, r6
 8002b7e:	10a4      	asrs	r4, r4, #2
 8002b80:	42a5      	cmp	r5, r4
 8002b82:	d109      	bne.n	8002b98 <__libc_init_array+0x24>
 8002b84:	f000 fc34 	bl	80033f0 <_init>
 8002b88:	2500      	movs	r5, #0
 8002b8a:	4e0a      	ldr	r6, [pc, #40]	; (8002bb4 <__libc_init_array+0x40>)
 8002b8c:	4c0a      	ldr	r4, [pc, #40]	; (8002bb8 <__libc_init_array+0x44>)
 8002b8e:	1ba4      	subs	r4, r4, r6
 8002b90:	10a4      	asrs	r4, r4, #2
 8002b92:	42a5      	cmp	r5, r4
 8002b94:	d105      	bne.n	8002ba2 <__libc_init_array+0x2e>
 8002b96:	bd70      	pop	{r4, r5, r6, pc}
 8002b98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b9c:	4798      	blx	r3
 8002b9e:	3501      	adds	r5, #1
 8002ba0:	e7ee      	b.n	8002b80 <__libc_init_array+0xc>
 8002ba2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ba6:	4798      	blx	r3
 8002ba8:	3501      	adds	r5, #1
 8002baa:	e7f2      	b.n	8002b92 <__libc_init_array+0x1e>
 8002bac:	0800347c 	.word	0x0800347c
 8002bb0:	0800347c 	.word	0x0800347c
 8002bb4:	0800347c 	.word	0x0800347c
 8002bb8:	08003480 	.word	0x08003480

08002bbc <memset>:
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	4402      	add	r2, r0
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d100      	bne.n	8002bc6 <memset+0xa>
 8002bc4:	4770      	bx	lr
 8002bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bca:	e7f9      	b.n	8002bc0 <memset+0x4>

08002bcc <siprintf>:
 8002bcc:	b40e      	push	{r1, r2, r3}
 8002bce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002bd2:	b500      	push	{lr}
 8002bd4:	b09c      	sub	sp, #112	; 0x70
 8002bd6:	ab1d      	add	r3, sp, #116	; 0x74
 8002bd8:	9002      	str	r0, [sp, #8]
 8002bda:	9006      	str	r0, [sp, #24]
 8002bdc:	9107      	str	r1, [sp, #28]
 8002bde:	9104      	str	r1, [sp, #16]
 8002be0:	4808      	ldr	r0, [pc, #32]	; (8002c04 <siprintf+0x38>)
 8002be2:	4909      	ldr	r1, [pc, #36]	; (8002c08 <siprintf+0x3c>)
 8002be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002be8:	9105      	str	r1, [sp, #20]
 8002bea:	6800      	ldr	r0, [r0, #0]
 8002bec:	a902      	add	r1, sp, #8
 8002bee:	9301      	str	r3, [sp, #4]
 8002bf0:	f000 f866 	bl	8002cc0 <_svfiprintf_r>
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	9b02      	ldr	r3, [sp, #8]
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	b01c      	add	sp, #112	; 0x70
 8002bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c00:	b003      	add	sp, #12
 8002c02:	4770      	bx	lr
 8002c04:	2000000c 	.word	0x2000000c
 8002c08:	ffff0208 	.word	0xffff0208

08002c0c <__ssputs_r>:
 8002c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c10:	688e      	ldr	r6, [r1, #8]
 8002c12:	4682      	mov	sl, r0
 8002c14:	429e      	cmp	r6, r3
 8002c16:	460c      	mov	r4, r1
 8002c18:	4690      	mov	r8, r2
 8002c1a:	4699      	mov	r9, r3
 8002c1c:	d837      	bhi.n	8002c8e <__ssputs_r+0x82>
 8002c1e:	898a      	ldrh	r2, [r1, #12]
 8002c20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c24:	d031      	beq.n	8002c8a <__ssputs_r+0x7e>
 8002c26:	2302      	movs	r3, #2
 8002c28:	6825      	ldr	r5, [r4, #0]
 8002c2a:	6909      	ldr	r1, [r1, #16]
 8002c2c:	1a6f      	subs	r7, r5, r1
 8002c2e:	6965      	ldr	r5, [r4, #20]
 8002c30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c34:	fb95 f5f3 	sdiv	r5, r5, r3
 8002c38:	f109 0301 	add.w	r3, r9, #1
 8002c3c:	443b      	add	r3, r7
 8002c3e:	429d      	cmp	r5, r3
 8002c40:	bf38      	it	cc
 8002c42:	461d      	movcc	r5, r3
 8002c44:	0553      	lsls	r3, r2, #21
 8002c46:	d530      	bpl.n	8002caa <__ssputs_r+0x9e>
 8002c48:	4629      	mov	r1, r5
 8002c4a:	f000 fb37 	bl	80032bc <_malloc_r>
 8002c4e:	4606      	mov	r6, r0
 8002c50:	b950      	cbnz	r0, 8002c68 <__ssputs_r+0x5c>
 8002c52:	230c      	movs	r3, #12
 8002c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c58:	f8ca 3000 	str.w	r3, [sl]
 8002c5c:	89a3      	ldrh	r3, [r4, #12]
 8002c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c62:	81a3      	strh	r3, [r4, #12]
 8002c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c68:	463a      	mov	r2, r7
 8002c6a:	6921      	ldr	r1, [r4, #16]
 8002c6c:	f000 fab6 	bl	80031dc <memcpy>
 8002c70:	89a3      	ldrh	r3, [r4, #12]
 8002c72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c7a:	81a3      	strh	r3, [r4, #12]
 8002c7c:	6126      	str	r6, [r4, #16]
 8002c7e:	443e      	add	r6, r7
 8002c80:	6026      	str	r6, [r4, #0]
 8002c82:	464e      	mov	r6, r9
 8002c84:	6165      	str	r5, [r4, #20]
 8002c86:	1bed      	subs	r5, r5, r7
 8002c88:	60a5      	str	r5, [r4, #8]
 8002c8a:	454e      	cmp	r6, r9
 8002c8c:	d900      	bls.n	8002c90 <__ssputs_r+0x84>
 8002c8e:	464e      	mov	r6, r9
 8002c90:	4632      	mov	r2, r6
 8002c92:	4641      	mov	r1, r8
 8002c94:	6820      	ldr	r0, [r4, #0]
 8002c96:	f000 faac 	bl	80031f2 <memmove>
 8002c9a:	68a3      	ldr	r3, [r4, #8]
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	1b9b      	subs	r3, r3, r6
 8002ca0:	60a3      	str	r3, [r4, #8]
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	441e      	add	r6, r3
 8002ca6:	6026      	str	r6, [r4, #0]
 8002ca8:	e7dc      	b.n	8002c64 <__ssputs_r+0x58>
 8002caa:	462a      	mov	r2, r5
 8002cac:	f000 fb60 	bl	8003370 <_realloc_r>
 8002cb0:	4606      	mov	r6, r0
 8002cb2:	2800      	cmp	r0, #0
 8002cb4:	d1e2      	bne.n	8002c7c <__ssputs_r+0x70>
 8002cb6:	6921      	ldr	r1, [r4, #16]
 8002cb8:	4650      	mov	r0, sl
 8002cba:	f000 fab3 	bl	8003224 <_free_r>
 8002cbe:	e7c8      	b.n	8002c52 <__ssputs_r+0x46>

08002cc0 <_svfiprintf_r>:
 8002cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cc4:	461d      	mov	r5, r3
 8002cc6:	898b      	ldrh	r3, [r1, #12]
 8002cc8:	b09d      	sub	sp, #116	; 0x74
 8002cca:	061f      	lsls	r7, r3, #24
 8002ccc:	4680      	mov	r8, r0
 8002cce:	460c      	mov	r4, r1
 8002cd0:	4616      	mov	r6, r2
 8002cd2:	d50f      	bpl.n	8002cf4 <_svfiprintf_r+0x34>
 8002cd4:	690b      	ldr	r3, [r1, #16]
 8002cd6:	b96b      	cbnz	r3, 8002cf4 <_svfiprintf_r+0x34>
 8002cd8:	2140      	movs	r1, #64	; 0x40
 8002cda:	f000 faef 	bl	80032bc <_malloc_r>
 8002cde:	6020      	str	r0, [r4, #0]
 8002ce0:	6120      	str	r0, [r4, #16]
 8002ce2:	b928      	cbnz	r0, 8002cf0 <_svfiprintf_r+0x30>
 8002ce4:	230c      	movs	r3, #12
 8002ce6:	f8c8 3000 	str.w	r3, [r8]
 8002cea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cee:	e0c8      	b.n	8002e82 <_svfiprintf_r+0x1c2>
 8002cf0:	2340      	movs	r3, #64	; 0x40
 8002cf2:	6163      	str	r3, [r4, #20]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8002cf8:	2320      	movs	r3, #32
 8002cfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cfe:	2330      	movs	r3, #48	; 0x30
 8002d00:	f04f 0b01 	mov.w	fp, #1
 8002d04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d08:	9503      	str	r5, [sp, #12]
 8002d0a:	4637      	mov	r7, r6
 8002d0c:	463d      	mov	r5, r7
 8002d0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002d12:	b10b      	cbz	r3, 8002d18 <_svfiprintf_r+0x58>
 8002d14:	2b25      	cmp	r3, #37	; 0x25
 8002d16:	d13e      	bne.n	8002d96 <_svfiprintf_r+0xd6>
 8002d18:	ebb7 0a06 	subs.w	sl, r7, r6
 8002d1c:	d00b      	beq.n	8002d36 <_svfiprintf_r+0x76>
 8002d1e:	4653      	mov	r3, sl
 8002d20:	4632      	mov	r2, r6
 8002d22:	4621      	mov	r1, r4
 8002d24:	4640      	mov	r0, r8
 8002d26:	f7ff ff71 	bl	8002c0c <__ssputs_r>
 8002d2a:	3001      	adds	r0, #1
 8002d2c:	f000 80a4 	beq.w	8002e78 <_svfiprintf_r+0x1b8>
 8002d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d32:	4453      	add	r3, sl
 8002d34:	9309      	str	r3, [sp, #36]	; 0x24
 8002d36:	783b      	ldrb	r3, [r7, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 809d 	beq.w	8002e78 <_svfiprintf_r+0x1b8>
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d48:	9304      	str	r3, [sp, #16]
 8002d4a:	9307      	str	r3, [sp, #28]
 8002d4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d50:	931a      	str	r3, [sp, #104]	; 0x68
 8002d52:	462f      	mov	r7, r5
 8002d54:	2205      	movs	r2, #5
 8002d56:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002d5a:	4850      	ldr	r0, [pc, #320]	; (8002e9c <_svfiprintf_r+0x1dc>)
 8002d5c:	f000 fa30 	bl	80031c0 <memchr>
 8002d60:	9b04      	ldr	r3, [sp, #16]
 8002d62:	b9d0      	cbnz	r0, 8002d9a <_svfiprintf_r+0xda>
 8002d64:	06d9      	lsls	r1, r3, #27
 8002d66:	bf44      	itt	mi
 8002d68:	2220      	movmi	r2, #32
 8002d6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002d6e:	071a      	lsls	r2, r3, #28
 8002d70:	bf44      	itt	mi
 8002d72:	222b      	movmi	r2, #43	; 0x2b
 8002d74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002d78:	782a      	ldrb	r2, [r5, #0]
 8002d7a:	2a2a      	cmp	r2, #42	; 0x2a
 8002d7c:	d015      	beq.n	8002daa <_svfiprintf_r+0xea>
 8002d7e:	462f      	mov	r7, r5
 8002d80:	2000      	movs	r0, #0
 8002d82:	250a      	movs	r5, #10
 8002d84:	9a07      	ldr	r2, [sp, #28]
 8002d86:	4639      	mov	r1, r7
 8002d88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d8c:	3b30      	subs	r3, #48	; 0x30
 8002d8e:	2b09      	cmp	r3, #9
 8002d90:	d94d      	bls.n	8002e2e <_svfiprintf_r+0x16e>
 8002d92:	b1b8      	cbz	r0, 8002dc4 <_svfiprintf_r+0x104>
 8002d94:	e00f      	b.n	8002db6 <_svfiprintf_r+0xf6>
 8002d96:	462f      	mov	r7, r5
 8002d98:	e7b8      	b.n	8002d0c <_svfiprintf_r+0x4c>
 8002d9a:	4a40      	ldr	r2, [pc, #256]	; (8002e9c <_svfiprintf_r+0x1dc>)
 8002d9c:	463d      	mov	r5, r7
 8002d9e:	1a80      	subs	r0, r0, r2
 8002da0:	fa0b f000 	lsl.w	r0, fp, r0
 8002da4:	4318      	orrs	r0, r3
 8002da6:	9004      	str	r0, [sp, #16]
 8002da8:	e7d3      	b.n	8002d52 <_svfiprintf_r+0x92>
 8002daa:	9a03      	ldr	r2, [sp, #12]
 8002dac:	1d11      	adds	r1, r2, #4
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	9103      	str	r1, [sp, #12]
 8002db2:	2a00      	cmp	r2, #0
 8002db4:	db01      	blt.n	8002dba <_svfiprintf_r+0xfa>
 8002db6:	9207      	str	r2, [sp, #28]
 8002db8:	e004      	b.n	8002dc4 <_svfiprintf_r+0x104>
 8002dba:	4252      	negs	r2, r2
 8002dbc:	f043 0302 	orr.w	r3, r3, #2
 8002dc0:	9207      	str	r2, [sp, #28]
 8002dc2:	9304      	str	r3, [sp, #16]
 8002dc4:	783b      	ldrb	r3, [r7, #0]
 8002dc6:	2b2e      	cmp	r3, #46	; 0x2e
 8002dc8:	d10c      	bne.n	8002de4 <_svfiprintf_r+0x124>
 8002dca:	787b      	ldrb	r3, [r7, #1]
 8002dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8002dce:	d133      	bne.n	8002e38 <_svfiprintf_r+0x178>
 8002dd0:	9b03      	ldr	r3, [sp, #12]
 8002dd2:	3702      	adds	r7, #2
 8002dd4:	1d1a      	adds	r2, r3, #4
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	9203      	str	r2, [sp, #12]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	bfb8      	it	lt
 8002dde:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002de2:	9305      	str	r3, [sp, #20]
 8002de4:	4d2e      	ldr	r5, [pc, #184]	; (8002ea0 <_svfiprintf_r+0x1e0>)
 8002de6:	2203      	movs	r2, #3
 8002de8:	7839      	ldrb	r1, [r7, #0]
 8002dea:	4628      	mov	r0, r5
 8002dec:	f000 f9e8 	bl	80031c0 <memchr>
 8002df0:	b138      	cbz	r0, 8002e02 <_svfiprintf_r+0x142>
 8002df2:	2340      	movs	r3, #64	; 0x40
 8002df4:	1b40      	subs	r0, r0, r5
 8002df6:	fa03 f000 	lsl.w	r0, r3, r0
 8002dfa:	9b04      	ldr	r3, [sp, #16]
 8002dfc:	3701      	adds	r7, #1
 8002dfe:	4303      	orrs	r3, r0
 8002e00:	9304      	str	r3, [sp, #16]
 8002e02:	7839      	ldrb	r1, [r7, #0]
 8002e04:	2206      	movs	r2, #6
 8002e06:	4827      	ldr	r0, [pc, #156]	; (8002ea4 <_svfiprintf_r+0x1e4>)
 8002e08:	1c7e      	adds	r6, r7, #1
 8002e0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e0e:	f000 f9d7 	bl	80031c0 <memchr>
 8002e12:	2800      	cmp	r0, #0
 8002e14:	d038      	beq.n	8002e88 <_svfiprintf_r+0x1c8>
 8002e16:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <_svfiprintf_r+0x1e8>)
 8002e18:	bb13      	cbnz	r3, 8002e60 <_svfiprintf_r+0x1a0>
 8002e1a:	9b03      	ldr	r3, [sp, #12]
 8002e1c:	3307      	adds	r3, #7
 8002e1e:	f023 0307 	bic.w	r3, r3, #7
 8002e22:	3308      	adds	r3, #8
 8002e24:	9303      	str	r3, [sp, #12]
 8002e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e28:	444b      	add	r3, r9
 8002e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8002e2c:	e76d      	b.n	8002d0a <_svfiprintf_r+0x4a>
 8002e2e:	fb05 3202 	mla	r2, r5, r2, r3
 8002e32:	2001      	movs	r0, #1
 8002e34:	460f      	mov	r7, r1
 8002e36:	e7a6      	b.n	8002d86 <_svfiprintf_r+0xc6>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	250a      	movs	r5, #10
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	3701      	adds	r7, #1
 8002e40:	9305      	str	r3, [sp, #20]
 8002e42:	4638      	mov	r0, r7
 8002e44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e48:	3a30      	subs	r2, #48	; 0x30
 8002e4a:	2a09      	cmp	r2, #9
 8002e4c:	d903      	bls.n	8002e56 <_svfiprintf_r+0x196>
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0c8      	beq.n	8002de4 <_svfiprintf_r+0x124>
 8002e52:	9105      	str	r1, [sp, #20]
 8002e54:	e7c6      	b.n	8002de4 <_svfiprintf_r+0x124>
 8002e56:	fb05 2101 	mla	r1, r5, r1, r2
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	4607      	mov	r7, r0
 8002e5e:	e7f0      	b.n	8002e42 <_svfiprintf_r+0x182>
 8002e60:	ab03      	add	r3, sp, #12
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	4622      	mov	r2, r4
 8002e66:	4b11      	ldr	r3, [pc, #68]	; (8002eac <_svfiprintf_r+0x1ec>)
 8002e68:	a904      	add	r1, sp, #16
 8002e6a:	4640      	mov	r0, r8
 8002e6c:	f3af 8000 	nop.w
 8002e70:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002e74:	4681      	mov	r9, r0
 8002e76:	d1d6      	bne.n	8002e26 <_svfiprintf_r+0x166>
 8002e78:	89a3      	ldrh	r3, [r4, #12]
 8002e7a:	065b      	lsls	r3, r3, #25
 8002e7c:	f53f af35 	bmi.w	8002cea <_svfiprintf_r+0x2a>
 8002e80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e82:	b01d      	add	sp, #116	; 0x74
 8002e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e88:	ab03      	add	r3, sp, #12
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	4622      	mov	r2, r4
 8002e8e:	4b07      	ldr	r3, [pc, #28]	; (8002eac <_svfiprintf_r+0x1ec>)
 8002e90:	a904      	add	r1, sp, #16
 8002e92:	4640      	mov	r0, r8
 8002e94:	f000 f882 	bl	8002f9c <_printf_i>
 8002e98:	e7ea      	b.n	8002e70 <_svfiprintf_r+0x1b0>
 8002e9a:	bf00      	nop
 8002e9c:	08003448 	.word	0x08003448
 8002ea0:	0800344e 	.word	0x0800344e
 8002ea4:	08003452 	.word	0x08003452
 8002ea8:	00000000 	.word	0x00000000
 8002eac:	08002c0d 	.word	0x08002c0d

08002eb0 <_printf_common>:
 8002eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002eb4:	4691      	mov	r9, r2
 8002eb6:	461f      	mov	r7, r3
 8002eb8:	688a      	ldr	r2, [r1, #8]
 8002eba:	690b      	ldr	r3, [r1, #16]
 8002ebc:	4606      	mov	r6, r0
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	bfb8      	it	lt
 8002ec2:	4613      	movlt	r3, r2
 8002ec4:	f8c9 3000 	str.w	r3, [r9]
 8002ec8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ecc:	460c      	mov	r4, r1
 8002ece:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ed2:	b112      	cbz	r2, 8002eda <_printf_common+0x2a>
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	f8c9 3000 	str.w	r3, [r9]
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	0699      	lsls	r1, r3, #26
 8002ede:	bf42      	ittt	mi
 8002ee0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002ee4:	3302      	addmi	r3, #2
 8002ee6:	f8c9 3000 	strmi.w	r3, [r9]
 8002eea:	6825      	ldr	r5, [r4, #0]
 8002eec:	f015 0506 	ands.w	r5, r5, #6
 8002ef0:	d107      	bne.n	8002f02 <_printf_common+0x52>
 8002ef2:	f104 0a19 	add.w	sl, r4, #25
 8002ef6:	68e3      	ldr	r3, [r4, #12]
 8002ef8:	f8d9 2000 	ldr.w	r2, [r9]
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	42ab      	cmp	r3, r5
 8002f00:	dc29      	bgt.n	8002f56 <_printf_common+0xa6>
 8002f02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002f06:	6822      	ldr	r2, [r4, #0]
 8002f08:	3300      	adds	r3, #0
 8002f0a:	bf18      	it	ne
 8002f0c:	2301      	movne	r3, #1
 8002f0e:	0692      	lsls	r2, r2, #26
 8002f10:	d42e      	bmi.n	8002f70 <_printf_common+0xc0>
 8002f12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f16:	4639      	mov	r1, r7
 8002f18:	4630      	mov	r0, r6
 8002f1a:	47c0      	blx	r8
 8002f1c:	3001      	adds	r0, #1
 8002f1e:	d021      	beq.n	8002f64 <_printf_common+0xb4>
 8002f20:	6823      	ldr	r3, [r4, #0]
 8002f22:	68e5      	ldr	r5, [r4, #12]
 8002f24:	f003 0306 	and.w	r3, r3, #6
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	bf18      	it	ne
 8002f2c:	2500      	movne	r5, #0
 8002f2e:	f8d9 2000 	ldr.w	r2, [r9]
 8002f32:	f04f 0900 	mov.w	r9, #0
 8002f36:	bf08      	it	eq
 8002f38:	1aad      	subeq	r5, r5, r2
 8002f3a:	68a3      	ldr	r3, [r4, #8]
 8002f3c:	6922      	ldr	r2, [r4, #16]
 8002f3e:	bf08      	it	eq
 8002f40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f44:	4293      	cmp	r3, r2
 8002f46:	bfc4      	itt	gt
 8002f48:	1a9b      	subgt	r3, r3, r2
 8002f4a:	18ed      	addgt	r5, r5, r3
 8002f4c:	341a      	adds	r4, #26
 8002f4e:	454d      	cmp	r5, r9
 8002f50:	d11a      	bne.n	8002f88 <_printf_common+0xd8>
 8002f52:	2000      	movs	r0, #0
 8002f54:	e008      	b.n	8002f68 <_printf_common+0xb8>
 8002f56:	2301      	movs	r3, #1
 8002f58:	4652      	mov	r2, sl
 8002f5a:	4639      	mov	r1, r7
 8002f5c:	4630      	mov	r0, r6
 8002f5e:	47c0      	blx	r8
 8002f60:	3001      	adds	r0, #1
 8002f62:	d103      	bne.n	8002f6c <_printf_common+0xbc>
 8002f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f6c:	3501      	adds	r5, #1
 8002f6e:	e7c2      	b.n	8002ef6 <_printf_common+0x46>
 8002f70:	2030      	movs	r0, #48	; 0x30
 8002f72:	18e1      	adds	r1, r4, r3
 8002f74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f7e:	4422      	add	r2, r4
 8002f80:	3302      	adds	r3, #2
 8002f82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f86:	e7c4      	b.n	8002f12 <_printf_common+0x62>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	4622      	mov	r2, r4
 8002f8c:	4639      	mov	r1, r7
 8002f8e:	4630      	mov	r0, r6
 8002f90:	47c0      	blx	r8
 8002f92:	3001      	adds	r0, #1
 8002f94:	d0e6      	beq.n	8002f64 <_printf_common+0xb4>
 8002f96:	f109 0901 	add.w	r9, r9, #1
 8002f9a:	e7d8      	b.n	8002f4e <_printf_common+0x9e>

08002f9c <_printf_i>:
 8002f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fa0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002fa4:	460c      	mov	r4, r1
 8002fa6:	7e09      	ldrb	r1, [r1, #24]
 8002fa8:	b085      	sub	sp, #20
 8002faa:	296e      	cmp	r1, #110	; 0x6e
 8002fac:	4617      	mov	r7, r2
 8002fae:	4606      	mov	r6, r0
 8002fb0:	4698      	mov	r8, r3
 8002fb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002fb4:	f000 80b3 	beq.w	800311e <_printf_i+0x182>
 8002fb8:	d822      	bhi.n	8003000 <_printf_i+0x64>
 8002fba:	2963      	cmp	r1, #99	; 0x63
 8002fbc:	d036      	beq.n	800302c <_printf_i+0x90>
 8002fbe:	d80a      	bhi.n	8002fd6 <_printf_i+0x3a>
 8002fc0:	2900      	cmp	r1, #0
 8002fc2:	f000 80b9 	beq.w	8003138 <_printf_i+0x19c>
 8002fc6:	2958      	cmp	r1, #88	; 0x58
 8002fc8:	f000 8083 	beq.w	80030d2 <_printf_i+0x136>
 8002fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002fd4:	e032      	b.n	800303c <_printf_i+0xa0>
 8002fd6:	2964      	cmp	r1, #100	; 0x64
 8002fd8:	d001      	beq.n	8002fde <_printf_i+0x42>
 8002fda:	2969      	cmp	r1, #105	; 0x69
 8002fdc:	d1f6      	bne.n	8002fcc <_printf_i+0x30>
 8002fde:	6820      	ldr	r0, [r4, #0]
 8002fe0:	6813      	ldr	r3, [r2, #0]
 8002fe2:	0605      	lsls	r5, r0, #24
 8002fe4:	f103 0104 	add.w	r1, r3, #4
 8002fe8:	d52a      	bpl.n	8003040 <_printf_i+0xa4>
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6011      	str	r1, [r2, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	da03      	bge.n	8002ffa <_printf_i+0x5e>
 8002ff2:	222d      	movs	r2, #45	; 0x2d
 8002ff4:	425b      	negs	r3, r3
 8002ff6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002ffa:	486f      	ldr	r0, [pc, #444]	; (80031b8 <_printf_i+0x21c>)
 8002ffc:	220a      	movs	r2, #10
 8002ffe:	e039      	b.n	8003074 <_printf_i+0xd8>
 8003000:	2973      	cmp	r1, #115	; 0x73
 8003002:	f000 809d 	beq.w	8003140 <_printf_i+0x1a4>
 8003006:	d808      	bhi.n	800301a <_printf_i+0x7e>
 8003008:	296f      	cmp	r1, #111	; 0x6f
 800300a:	d020      	beq.n	800304e <_printf_i+0xb2>
 800300c:	2970      	cmp	r1, #112	; 0x70
 800300e:	d1dd      	bne.n	8002fcc <_printf_i+0x30>
 8003010:	6823      	ldr	r3, [r4, #0]
 8003012:	f043 0320 	orr.w	r3, r3, #32
 8003016:	6023      	str	r3, [r4, #0]
 8003018:	e003      	b.n	8003022 <_printf_i+0x86>
 800301a:	2975      	cmp	r1, #117	; 0x75
 800301c:	d017      	beq.n	800304e <_printf_i+0xb2>
 800301e:	2978      	cmp	r1, #120	; 0x78
 8003020:	d1d4      	bne.n	8002fcc <_printf_i+0x30>
 8003022:	2378      	movs	r3, #120	; 0x78
 8003024:	4865      	ldr	r0, [pc, #404]	; (80031bc <_printf_i+0x220>)
 8003026:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800302a:	e055      	b.n	80030d8 <_printf_i+0x13c>
 800302c:	6813      	ldr	r3, [r2, #0]
 800302e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003032:	1d19      	adds	r1, r3, #4
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6011      	str	r1, [r2, #0]
 8003038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800303c:	2301      	movs	r3, #1
 800303e:	e08c      	b.n	800315a <_printf_i+0x1be>
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003046:	6011      	str	r1, [r2, #0]
 8003048:	bf18      	it	ne
 800304a:	b21b      	sxthne	r3, r3
 800304c:	e7cf      	b.n	8002fee <_printf_i+0x52>
 800304e:	6813      	ldr	r3, [r2, #0]
 8003050:	6825      	ldr	r5, [r4, #0]
 8003052:	1d18      	adds	r0, r3, #4
 8003054:	6010      	str	r0, [r2, #0]
 8003056:	0628      	lsls	r0, r5, #24
 8003058:	d501      	bpl.n	800305e <_printf_i+0xc2>
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	e002      	b.n	8003064 <_printf_i+0xc8>
 800305e:	0668      	lsls	r0, r5, #25
 8003060:	d5fb      	bpl.n	800305a <_printf_i+0xbe>
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	296f      	cmp	r1, #111	; 0x6f
 8003066:	bf14      	ite	ne
 8003068:	220a      	movne	r2, #10
 800306a:	2208      	moveq	r2, #8
 800306c:	4852      	ldr	r0, [pc, #328]	; (80031b8 <_printf_i+0x21c>)
 800306e:	2100      	movs	r1, #0
 8003070:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003074:	6865      	ldr	r5, [r4, #4]
 8003076:	2d00      	cmp	r5, #0
 8003078:	60a5      	str	r5, [r4, #8]
 800307a:	f2c0 8095 	blt.w	80031a8 <_printf_i+0x20c>
 800307e:	6821      	ldr	r1, [r4, #0]
 8003080:	f021 0104 	bic.w	r1, r1, #4
 8003084:	6021      	str	r1, [r4, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d13d      	bne.n	8003106 <_printf_i+0x16a>
 800308a:	2d00      	cmp	r5, #0
 800308c:	f040 808e 	bne.w	80031ac <_printf_i+0x210>
 8003090:	4665      	mov	r5, ip
 8003092:	2a08      	cmp	r2, #8
 8003094:	d10b      	bne.n	80030ae <_printf_i+0x112>
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	07db      	lsls	r3, r3, #31
 800309a:	d508      	bpl.n	80030ae <_printf_i+0x112>
 800309c:	6923      	ldr	r3, [r4, #16]
 800309e:	6862      	ldr	r2, [r4, #4]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	bfde      	ittt	le
 80030a4:	2330      	movle	r3, #48	; 0x30
 80030a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030aa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80030ae:	ebac 0305 	sub.w	r3, ip, r5
 80030b2:	6123      	str	r3, [r4, #16]
 80030b4:	f8cd 8000 	str.w	r8, [sp]
 80030b8:	463b      	mov	r3, r7
 80030ba:	aa03      	add	r2, sp, #12
 80030bc:	4621      	mov	r1, r4
 80030be:	4630      	mov	r0, r6
 80030c0:	f7ff fef6 	bl	8002eb0 <_printf_common>
 80030c4:	3001      	adds	r0, #1
 80030c6:	d14d      	bne.n	8003164 <_printf_i+0x1c8>
 80030c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030cc:	b005      	add	sp, #20
 80030ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80030d2:	4839      	ldr	r0, [pc, #228]	; (80031b8 <_printf_i+0x21c>)
 80030d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80030d8:	6813      	ldr	r3, [r2, #0]
 80030da:	6821      	ldr	r1, [r4, #0]
 80030dc:	1d1d      	adds	r5, r3, #4
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6015      	str	r5, [r2, #0]
 80030e2:	060a      	lsls	r2, r1, #24
 80030e4:	d50b      	bpl.n	80030fe <_printf_i+0x162>
 80030e6:	07ca      	lsls	r2, r1, #31
 80030e8:	bf44      	itt	mi
 80030ea:	f041 0120 	orrmi.w	r1, r1, #32
 80030ee:	6021      	strmi	r1, [r4, #0]
 80030f0:	b91b      	cbnz	r3, 80030fa <_printf_i+0x15e>
 80030f2:	6822      	ldr	r2, [r4, #0]
 80030f4:	f022 0220 	bic.w	r2, r2, #32
 80030f8:	6022      	str	r2, [r4, #0]
 80030fa:	2210      	movs	r2, #16
 80030fc:	e7b7      	b.n	800306e <_printf_i+0xd2>
 80030fe:	064d      	lsls	r5, r1, #25
 8003100:	bf48      	it	mi
 8003102:	b29b      	uxthmi	r3, r3
 8003104:	e7ef      	b.n	80030e6 <_printf_i+0x14a>
 8003106:	4665      	mov	r5, ip
 8003108:	fbb3 f1f2 	udiv	r1, r3, r2
 800310c:	fb02 3311 	mls	r3, r2, r1, r3
 8003110:	5cc3      	ldrb	r3, [r0, r3]
 8003112:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003116:	460b      	mov	r3, r1
 8003118:	2900      	cmp	r1, #0
 800311a:	d1f5      	bne.n	8003108 <_printf_i+0x16c>
 800311c:	e7b9      	b.n	8003092 <_printf_i+0xf6>
 800311e:	6813      	ldr	r3, [r2, #0]
 8003120:	6825      	ldr	r5, [r4, #0]
 8003122:	1d18      	adds	r0, r3, #4
 8003124:	6961      	ldr	r1, [r4, #20]
 8003126:	6010      	str	r0, [r2, #0]
 8003128:	0628      	lsls	r0, r5, #24
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	d501      	bpl.n	8003132 <_printf_i+0x196>
 800312e:	6019      	str	r1, [r3, #0]
 8003130:	e002      	b.n	8003138 <_printf_i+0x19c>
 8003132:	066a      	lsls	r2, r5, #25
 8003134:	d5fb      	bpl.n	800312e <_printf_i+0x192>
 8003136:	8019      	strh	r1, [r3, #0]
 8003138:	2300      	movs	r3, #0
 800313a:	4665      	mov	r5, ip
 800313c:	6123      	str	r3, [r4, #16]
 800313e:	e7b9      	b.n	80030b4 <_printf_i+0x118>
 8003140:	6813      	ldr	r3, [r2, #0]
 8003142:	1d19      	adds	r1, r3, #4
 8003144:	6011      	str	r1, [r2, #0]
 8003146:	681d      	ldr	r5, [r3, #0]
 8003148:	6862      	ldr	r2, [r4, #4]
 800314a:	2100      	movs	r1, #0
 800314c:	4628      	mov	r0, r5
 800314e:	f000 f837 	bl	80031c0 <memchr>
 8003152:	b108      	cbz	r0, 8003158 <_printf_i+0x1bc>
 8003154:	1b40      	subs	r0, r0, r5
 8003156:	6060      	str	r0, [r4, #4]
 8003158:	6863      	ldr	r3, [r4, #4]
 800315a:	6123      	str	r3, [r4, #16]
 800315c:	2300      	movs	r3, #0
 800315e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003162:	e7a7      	b.n	80030b4 <_printf_i+0x118>
 8003164:	6923      	ldr	r3, [r4, #16]
 8003166:	462a      	mov	r2, r5
 8003168:	4639      	mov	r1, r7
 800316a:	4630      	mov	r0, r6
 800316c:	47c0      	blx	r8
 800316e:	3001      	adds	r0, #1
 8003170:	d0aa      	beq.n	80030c8 <_printf_i+0x12c>
 8003172:	6823      	ldr	r3, [r4, #0]
 8003174:	079b      	lsls	r3, r3, #30
 8003176:	d413      	bmi.n	80031a0 <_printf_i+0x204>
 8003178:	68e0      	ldr	r0, [r4, #12]
 800317a:	9b03      	ldr	r3, [sp, #12]
 800317c:	4298      	cmp	r0, r3
 800317e:	bfb8      	it	lt
 8003180:	4618      	movlt	r0, r3
 8003182:	e7a3      	b.n	80030cc <_printf_i+0x130>
 8003184:	2301      	movs	r3, #1
 8003186:	464a      	mov	r2, r9
 8003188:	4639      	mov	r1, r7
 800318a:	4630      	mov	r0, r6
 800318c:	47c0      	blx	r8
 800318e:	3001      	adds	r0, #1
 8003190:	d09a      	beq.n	80030c8 <_printf_i+0x12c>
 8003192:	3501      	adds	r5, #1
 8003194:	68e3      	ldr	r3, [r4, #12]
 8003196:	9a03      	ldr	r2, [sp, #12]
 8003198:	1a9b      	subs	r3, r3, r2
 800319a:	42ab      	cmp	r3, r5
 800319c:	dcf2      	bgt.n	8003184 <_printf_i+0x1e8>
 800319e:	e7eb      	b.n	8003178 <_printf_i+0x1dc>
 80031a0:	2500      	movs	r5, #0
 80031a2:	f104 0919 	add.w	r9, r4, #25
 80031a6:	e7f5      	b.n	8003194 <_printf_i+0x1f8>
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1ac      	bne.n	8003106 <_printf_i+0x16a>
 80031ac:	7803      	ldrb	r3, [r0, #0]
 80031ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031b6:	e76c      	b.n	8003092 <_printf_i+0xf6>
 80031b8:	08003459 	.word	0x08003459
 80031bc:	0800346a 	.word	0x0800346a

080031c0 <memchr>:
 80031c0:	b510      	push	{r4, lr}
 80031c2:	b2c9      	uxtb	r1, r1
 80031c4:	4402      	add	r2, r0
 80031c6:	4290      	cmp	r0, r2
 80031c8:	4603      	mov	r3, r0
 80031ca:	d101      	bne.n	80031d0 <memchr+0x10>
 80031cc:	2300      	movs	r3, #0
 80031ce:	e003      	b.n	80031d8 <memchr+0x18>
 80031d0:	781c      	ldrb	r4, [r3, #0]
 80031d2:	3001      	adds	r0, #1
 80031d4:	428c      	cmp	r4, r1
 80031d6:	d1f6      	bne.n	80031c6 <memchr+0x6>
 80031d8:	4618      	mov	r0, r3
 80031da:	bd10      	pop	{r4, pc}

080031dc <memcpy>:
 80031dc:	b510      	push	{r4, lr}
 80031de:	1e43      	subs	r3, r0, #1
 80031e0:	440a      	add	r2, r1
 80031e2:	4291      	cmp	r1, r2
 80031e4:	d100      	bne.n	80031e8 <memcpy+0xc>
 80031e6:	bd10      	pop	{r4, pc}
 80031e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031f0:	e7f7      	b.n	80031e2 <memcpy+0x6>

080031f2 <memmove>:
 80031f2:	4288      	cmp	r0, r1
 80031f4:	b510      	push	{r4, lr}
 80031f6:	eb01 0302 	add.w	r3, r1, r2
 80031fa:	d807      	bhi.n	800320c <memmove+0x1a>
 80031fc:	1e42      	subs	r2, r0, #1
 80031fe:	4299      	cmp	r1, r3
 8003200:	d00a      	beq.n	8003218 <memmove+0x26>
 8003202:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003206:	f802 4f01 	strb.w	r4, [r2, #1]!
 800320a:	e7f8      	b.n	80031fe <memmove+0xc>
 800320c:	4283      	cmp	r3, r0
 800320e:	d9f5      	bls.n	80031fc <memmove+0xa>
 8003210:	1881      	adds	r1, r0, r2
 8003212:	1ad2      	subs	r2, r2, r3
 8003214:	42d3      	cmn	r3, r2
 8003216:	d100      	bne.n	800321a <memmove+0x28>
 8003218:	bd10      	pop	{r4, pc}
 800321a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800321e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003222:	e7f7      	b.n	8003214 <memmove+0x22>

08003224 <_free_r>:
 8003224:	b538      	push	{r3, r4, r5, lr}
 8003226:	4605      	mov	r5, r0
 8003228:	2900      	cmp	r1, #0
 800322a:	d043      	beq.n	80032b4 <_free_r+0x90>
 800322c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003230:	1f0c      	subs	r4, r1, #4
 8003232:	2b00      	cmp	r3, #0
 8003234:	bfb8      	it	lt
 8003236:	18e4      	addlt	r4, r4, r3
 8003238:	f000 f8d0 	bl	80033dc <__malloc_lock>
 800323c:	4a1e      	ldr	r2, [pc, #120]	; (80032b8 <_free_r+0x94>)
 800323e:	6813      	ldr	r3, [r2, #0]
 8003240:	4610      	mov	r0, r2
 8003242:	b933      	cbnz	r3, 8003252 <_free_r+0x2e>
 8003244:	6063      	str	r3, [r4, #4]
 8003246:	6014      	str	r4, [r2, #0]
 8003248:	4628      	mov	r0, r5
 800324a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800324e:	f000 b8c6 	b.w	80033de <__malloc_unlock>
 8003252:	42a3      	cmp	r3, r4
 8003254:	d90b      	bls.n	800326e <_free_r+0x4a>
 8003256:	6821      	ldr	r1, [r4, #0]
 8003258:	1862      	adds	r2, r4, r1
 800325a:	4293      	cmp	r3, r2
 800325c:	bf01      	itttt	eq
 800325e:	681a      	ldreq	r2, [r3, #0]
 8003260:	685b      	ldreq	r3, [r3, #4]
 8003262:	1852      	addeq	r2, r2, r1
 8003264:	6022      	streq	r2, [r4, #0]
 8003266:	6063      	str	r3, [r4, #4]
 8003268:	6004      	str	r4, [r0, #0]
 800326a:	e7ed      	b.n	8003248 <_free_r+0x24>
 800326c:	4613      	mov	r3, r2
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	b10a      	cbz	r2, 8003276 <_free_r+0x52>
 8003272:	42a2      	cmp	r2, r4
 8003274:	d9fa      	bls.n	800326c <_free_r+0x48>
 8003276:	6819      	ldr	r1, [r3, #0]
 8003278:	1858      	adds	r0, r3, r1
 800327a:	42a0      	cmp	r0, r4
 800327c:	d10b      	bne.n	8003296 <_free_r+0x72>
 800327e:	6820      	ldr	r0, [r4, #0]
 8003280:	4401      	add	r1, r0
 8003282:	1858      	adds	r0, r3, r1
 8003284:	4282      	cmp	r2, r0
 8003286:	6019      	str	r1, [r3, #0]
 8003288:	d1de      	bne.n	8003248 <_free_r+0x24>
 800328a:	6810      	ldr	r0, [r2, #0]
 800328c:	6852      	ldr	r2, [r2, #4]
 800328e:	4401      	add	r1, r0
 8003290:	6019      	str	r1, [r3, #0]
 8003292:	605a      	str	r2, [r3, #4]
 8003294:	e7d8      	b.n	8003248 <_free_r+0x24>
 8003296:	d902      	bls.n	800329e <_free_r+0x7a>
 8003298:	230c      	movs	r3, #12
 800329a:	602b      	str	r3, [r5, #0]
 800329c:	e7d4      	b.n	8003248 <_free_r+0x24>
 800329e:	6820      	ldr	r0, [r4, #0]
 80032a0:	1821      	adds	r1, r4, r0
 80032a2:	428a      	cmp	r2, r1
 80032a4:	bf01      	itttt	eq
 80032a6:	6811      	ldreq	r1, [r2, #0]
 80032a8:	6852      	ldreq	r2, [r2, #4]
 80032aa:	1809      	addeq	r1, r1, r0
 80032ac:	6021      	streq	r1, [r4, #0]
 80032ae:	6062      	str	r2, [r4, #4]
 80032b0:	605c      	str	r4, [r3, #4]
 80032b2:	e7c9      	b.n	8003248 <_free_r+0x24>
 80032b4:	bd38      	pop	{r3, r4, r5, pc}
 80032b6:	bf00      	nop
 80032b8:	20000098 	.word	0x20000098

080032bc <_malloc_r>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	1ccd      	adds	r5, r1, #3
 80032c0:	f025 0503 	bic.w	r5, r5, #3
 80032c4:	3508      	adds	r5, #8
 80032c6:	2d0c      	cmp	r5, #12
 80032c8:	bf38      	it	cc
 80032ca:	250c      	movcc	r5, #12
 80032cc:	2d00      	cmp	r5, #0
 80032ce:	4606      	mov	r6, r0
 80032d0:	db01      	blt.n	80032d6 <_malloc_r+0x1a>
 80032d2:	42a9      	cmp	r1, r5
 80032d4:	d903      	bls.n	80032de <_malloc_r+0x22>
 80032d6:	230c      	movs	r3, #12
 80032d8:	6033      	str	r3, [r6, #0]
 80032da:	2000      	movs	r0, #0
 80032dc:	bd70      	pop	{r4, r5, r6, pc}
 80032de:	f000 f87d 	bl	80033dc <__malloc_lock>
 80032e2:	4a21      	ldr	r2, [pc, #132]	; (8003368 <_malloc_r+0xac>)
 80032e4:	6814      	ldr	r4, [r2, #0]
 80032e6:	4621      	mov	r1, r4
 80032e8:	b991      	cbnz	r1, 8003310 <_malloc_r+0x54>
 80032ea:	4c20      	ldr	r4, [pc, #128]	; (800336c <_malloc_r+0xb0>)
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	b91b      	cbnz	r3, 80032f8 <_malloc_r+0x3c>
 80032f0:	4630      	mov	r0, r6
 80032f2:	f000 f863 	bl	80033bc <_sbrk_r>
 80032f6:	6020      	str	r0, [r4, #0]
 80032f8:	4629      	mov	r1, r5
 80032fa:	4630      	mov	r0, r6
 80032fc:	f000 f85e 	bl	80033bc <_sbrk_r>
 8003300:	1c43      	adds	r3, r0, #1
 8003302:	d124      	bne.n	800334e <_malloc_r+0x92>
 8003304:	230c      	movs	r3, #12
 8003306:	4630      	mov	r0, r6
 8003308:	6033      	str	r3, [r6, #0]
 800330a:	f000 f868 	bl	80033de <__malloc_unlock>
 800330e:	e7e4      	b.n	80032da <_malloc_r+0x1e>
 8003310:	680b      	ldr	r3, [r1, #0]
 8003312:	1b5b      	subs	r3, r3, r5
 8003314:	d418      	bmi.n	8003348 <_malloc_r+0x8c>
 8003316:	2b0b      	cmp	r3, #11
 8003318:	d90f      	bls.n	800333a <_malloc_r+0x7e>
 800331a:	600b      	str	r3, [r1, #0]
 800331c:	18cc      	adds	r4, r1, r3
 800331e:	50cd      	str	r5, [r1, r3]
 8003320:	4630      	mov	r0, r6
 8003322:	f000 f85c 	bl	80033de <__malloc_unlock>
 8003326:	f104 000b 	add.w	r0, r4, #11
 800332a:	1d23      	adds	r3, r4, #4
 800332c:	f020 0007 	bic.w	r0, r0, #7
 8003330:	1ac3      	subs	r3, r0, r3
 8003332:	d0d3      	beq.n	80032dc <_malloc_r+0x20>
 8003334:	425a      	negs	r2, r3
 8003336:	50e2      	str	r2, [r4, r3]
 8003338:	e7d0      	b.n	80032dc <_malloc_r+0x20>
 800333a:	684b      	ldr	r3, [r1, #4]
 800333c:	428c      	cmp	r4, r1
 800333e:	bf16      	itet	ne
 8003340:	6063      	strne	r3, [r4, #4]
 8003342:	6013      	streq	r3, [r2, #0]
 8003344:	460c      	movne	r4, r1
 8003346:	e7eb      	b.n	8003320 <_malloc_r+0x64>
 8003348:	460c      	mov	r4, r1
 800334a:	6849      	ldr	r1, [r1, #4]
 800334c:	e7cc      	b.n	80032e8 <_malloc_r+0x2c>
 800334e:	1cc4      	adds	r4, r0, #3
 8003350:	f024 0403 	bic.w	r4, r4, #3
 8003354:	42a0      	cmp	r0, r4
 8003356:	d005      	beq.n	8003364 <_malloc_r+0xa8>
 8003358:	1a21      	subs	r1, r4, r0
 800335a:	4630      	mov	r0, r6
 800335c:	f000 f82e 	bl	80033bc <_sbrk_r>
 8003360:	3001      	adds	r0, #1
 8003362:	d0cf      	beq.n	8003304 <_malloc_r+0x48>
 8003364:	6025      	str	r5, [r4, #0]
 8003366:	e7db      	b.n	8003320 <_malloc_r+0x64>
 8003368:	20000098 	.word	0x20000098
 800336c:	2000009c 	.word	0x2000009c

08003370 <_realloc_r>:
 8003370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003372:	4607      	mov	r7, r0
 8003374:	4614      	mov	r4, r2
 8003376:	460e      	mov	r6, r1
 8003378:	b921      	cbnz	r1, 8003384 <_realloc_r+0x14>
 800337a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800337e:	4611      	mov	r1, r2
 8003380:	f7ff bf9c 	b.w	80032bc <_malloc_r>
 8003384:	b922      	cbnz	r2, 8003390 <_realloc_r+0x20>
 8003386:	f7ff ff4d 	bl	8003224 <_free_r>
 800338a:	4625      	mov	r5, r4
 800338c:	4628      	mov	r0, r5
 800338e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003390:	f000 f826 	bl	80033e0 <_malloc_usable_size_r>
 8003394:	42a0      	cmp	r0, r4
 8003396:	d20f      	bcs.n	80033b8 <_realloc_r+0x48>
 8003398:	4621      	mov	r1, r4
 800339a:	4638      	mov	r0, r7
 800339c:	f7ff ff8e 	bl	80032bc <_malloc_r>
 80033a0:	4605      	mov	r5, r0
 80033a2:	2800      	cmp	r0, #0
 80033a4:	d0f2      	beq.n	800338c <_realloc_r+0x1c>
 80033a6:	4631      	mov	r1, r6
 80033a8:	4622      	mov	r2, r4
 80033aa:	f7ff ff17 	bl	80031dc <memcpy>
 80033ae:	4631      	mov	r1, r6
 80033b0:	4638      	mov	r0, r7
 80033b2:	f7ff ff37 	bl	8003224 <_free_r>
 80033b6:	e7e9      	b.n	800338c <_realloc_r+0x1c>
 80033b8:	4635      	mov	r5, r6
 80033ba:	e7e7      	b.n	800338c <_realloc_r+0x1c>

080033bc <_sbrk_r>:
 80033bc:	b538      	push	{r3, r4, r5, lr}
 80033be:	2300      	movs	r3, #0
 80033c0:	4c05      	ldr	r4, [pc, #20]	; (80033d8 <_sbrk_r+0x1c>)
 80033c2:	4605      	mov	r5, r0
 80033c4:	4608      	mov	r0, r1
 80033c6:	6023      	str	r3, [r4, #0]
 80033c8:	f7ff fb48 	bl	8002a5c <_sbrk>
 80033cc:	1c43      	adds	r3, r0, #1
 80033ce:	d102      	bne.n	80033d6 <_sbrk_r+0x1a>
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	b103      	cbz	r3, 80033d6 <_sbrk_r+0x1a>
 80033d4:	602b      	str	r3, [r5, #0]
 80033d6:	bd38      	pop	{r3, r4, r5, pc}
 80033d8:	20000140 	.word	0x20000140

080033dc <__malloc_lock>:
 80033dc:	4770      	bx	lr

080033de <__malloc_unlock>:
 80033de:	4770      	bx	lr

080033e0 <_malloc_usable_size_r>:
 80033e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033e4:	1f18      	subs	r0, r3, #4
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	bfbc      	itt	lt
 80033ea:	580b      	ldrlt	r3, [r1, r0]
 80033ec:	18c0      	addlt	r0, r0, r3
 80033ee:	4770      	bx	lr

080033f0 <_init>:
 80033f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f2:	bf00      	nop
 80033f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033f6:	bc08      	pop	{r3}
 80033f8:	469e      	mov	lr, r3
 80033fa:	4770      	bx	lr

080033fc <_fini>:
 80033fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fe:	bf00      	nop
 8003400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003402:	bc08      	pop	{r3}
 8003404:	469e      	mov	lr, r3
 8003406:	4770      	bx	lr
