
pcf8574-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bd8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001ce4  08001ce4  00011ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d20  08001d20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d20  08001d20  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d20  08001d20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d20  08001d20  00011d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d24  08001d24  00011d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08001d34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08001d34  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e92  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014d9  00000000  00000000  00027ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008c8  00000000  00000000  000293a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000830  00000000  00000000  00029c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012f65  00000000  00000000  0002a498  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006ae2  00000000  00000000  0003d3fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00068b15  00000000  00000000  00043edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ac9f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023c8  00000000  00000000  000aca70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ccc 	.word	0x08001ccc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001ccc 	.word	0x08001ccc

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f945 	bl	80003ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fc2c 	bl	80019c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f95d 	bl	8000456 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 f925 	bl	8000402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000028 	.word	0x20000028

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000028 	.word	0x20000028

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	db0b      	blt.n	80002e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	f003 021f 	and.w	r2, r3, #31
 80002d0:	4906      	ldr	r1, [pc, #24]	; (80002ec <__NVIC_EnableIRQ+0x34>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	095b      	lsrs	r3, r3, #5
 80002d8:	2001      	movs	r0, #1
 80002da:	fa00 f202 	lsl.w	r2, r0, r2
 80002de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	2b00      	cmp	r3, #0
 8000302:	db0a      	blt.n	800031a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	b2da      	uxtb	r2, r3
 8000308:	490c      	ldr	r1, [pc, #48]	; (800033c <__NVIC_SetPriority+0x4c>)
 800030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030e:	0112      	lsls	r2, r2, #4
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	440b      	add	r3, r1
 8000314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000318:	e00a      	b.n	8000330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4908      	ldr	r1, [pc, #32]	; (8000340 <__NVIC_SetPriority+0x50>)
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 030f 	and.w	r3, r3, #15
 8000326:	3b04      	subs	r3, #4
 8000328:	0112      	lsls	r2, r2, #4
 800032a:	b2d2      	uxtb	r2, r2
 800032c:	440b      	add	r3, r1
 800032e:	761a      	strb	r2, [r3, #24]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000e100 	.word	0xe000e100
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000344:	b480      	push	{r7}
 8000346:	b089      	sub	sp, #36	; 0x24
 8000348:	af00      	add	r7, sp, #0
 800034a:	60f8      	str	r0, [r7, #12]
 800034c:	60b9      	str	r1, [r7, #8]
 800034e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f003 0307 	and.w	r3, r3, #7
 8000356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000358:	69fb      	ldr	r3, [r7, #28]
 800035a:	f1c3 0307 	rsb	r3, r3, #7
 800035e:	2b04      	cmp	r3, #4
 8000360:	bf28      	it	cs
 8000362:	2304      	movcs	r3, #4
 8000364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3304      	adds	r3, #4
 800036a:	2b06      	cmp	r3, #6
 800036c:	d902      	bls.n	8000374 <NVIC_EncodePriority+0x30>
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	3b03      	subs	r3, #3
 8000372:	e000      	b.n	8000376 <NVIC_EncodePriority+0x32>
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800037c:	69bb      	ldr	r3, [r7, #24]
 800037e:	fa02 f303 	lsl.w	r3, r2, r3
 8000382:	43da      	mvns	r2, r3
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	401a      	ands	r2, r3
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800038c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	fa01 f303 	lsl.w	r3, r1, r3
 8000396:	43d9      	mvns	r1, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039c:	4313      	orrs	r3, r2
         );
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3724      	adds	r7, #36	; 0x24
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b8:	d301      	bcc.n	80003be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ba:	2301      	movs	r3, #1
 80003bc:	e00f      	b.n	80003de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003be:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <SysTick_Config+0x40>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003c6:	210f      	movs	r1, #15
 80003c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003cc:	f7ff ff90 	bl	80002f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <SysTick_Config+0x40>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003d6:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <SysTick_Config+0x40>)
 80003d8:	2207      	movs	r2, #7
 80003da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003dc:	2300      	movs	r3, #0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	e000e010 	.word	0xe000e010

080003ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f7ff ff2d 	bl	8000254 <__NVIC_SetPriorityGrouping>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000402:	b580      	push	{r7, lr}
 8000404:	b086      	sub	sp, #24
 8000406:	af00      	add	r7, sp, #0
 8000408:	4603      	mov	r3, r0
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
 800040e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000414:	f7ff ff42 	bl	800029c <__NVIC_GetPriorityGrouping>
 8000418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	68b9      	ldr	r1, [r7, #8]
 800041e:	6978      	ldr	r0, [r7, #20]
 8000420:	f7ff ff90 	bl	8000344 <NVIC_EncodePriority>
 8000424:	4602      	mov	r2, r0
 8000426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800042a:	4611      	mov	r1, r2
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff5f 	bl	80002f0 <__NVIC_SetPriority>
}
 8000432:	bf00      	nop
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	b082      	sub	sp, #8
 800043e:	af00      	add	r7, sp, #0
 8000440:	4603      	mov	r3, r0
 8000442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff35 	bl	80002b8 <__NVIC_EnableIRQ>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b082      	sub	sp, #8
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ffa2 	bl	80003a8 <SysTick_Config>
 8000464:	4603      	mov	r3, r0
}
 8000466:	4618      	mov	r0, r3
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000470:	b480      	push	{r7}
 8000472:	b08b      	sub	sp, #44	; 0x2c
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800047a:	2300      	movs	r3, #0
 800047c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800047e:	2300      	movs	r3, #0
 8000480:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000482:	e127      	b.n	80006d4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000484:	2201      	movs	r2, #1
 8000486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000488:	fa02 f303 	lsl.w	r3, r2, r3
 800048c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	69fa      	ldr	r2, [r7, #28]
 8000494:	4013      	ands	r3, r2
 8000496:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000498:	69ba      	ldr	r2, [r7, #24]
 800049a:	69fb      	ldr	r3, [r7, #28]
 800049c:	429a      	cmp	r2, r3
 800049e:	f040 8116 	bne.w	80006ce <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	2b12      	cmp	r3, #18
 80004a8:	d034      	beq.n	8000514 <HAL_GPIO_Init+0xa4>
 80004aa:	2b12      	cmp	r3, #18
 80004ac:	d80d      	bhi.n	80004ca <HAL_GPIO_Init+0x5a>
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	d02b      	beq.n	800050a <HAL_GPIO_Init+0x9a>
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d804      	bhi.n	80004c0 <HAL_GPIO_Init+0x50>
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d031      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d01c      	beq.n	80004f8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004be:	e048      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d043      	beq.n	800054c <HAL_GPIO_Init+0xdc>
 80004c4:	2b11      	cmp	r3, #17
 80004c6:	d01b      	beq.n	8000500 <HAL_GPIO_Init+0x90>
          break;
 80004c8:	e043      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004ca:	4a89      	ldr	r2, [pc, #548]	; (80006f0 <HAL_GPIO_Init+0x280>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d026      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004d0:	4a87      	ldr	r2, [pc, #540]	; (80006f0 <HAL_GPIO_Init+0x280>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d806      	bhi.n	80004e4 <HAL_GPIO_Init+0x74>
 80004d6:	4a87      	ldr	r2, [pc, #540]	; (80006f4 <HAL_GPIO_Init+0x284>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d020      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004dc:	4a86      	ldr	r2, [pc, #536]	; (80006f8 <HAL_GPIO_Init+0x288>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d01d      	beq.n	800051e <HAL_GPIO_Init+0xae>
          break;
 80004e2:	e036      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004e4:	4a85      	ldr	r2, [pc, #532]	; (80006fc <HAL_GPIO_Init+0x28c>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d019      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004ea:	4a85      	ldr	r2, [pc, #532]	; (8000700 <HAL_GPIO_Init+0x290>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d016      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004f0:	4a84      	ldr	r2, [pc, #528]	; (8000704 <HAL_GPIO_Init+0x294>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d013      	beq.n	800051e <HAL_GPIO_Init+0xae>
          break;
 80004f6:	e02c      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	623b      	str	r3, [r7, #32]
          break;
 80004fe:	e028      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	3304      	adds	r3, #4
 8000506:	623b      	str	r3, [r7, #32]
          break;
 8000508:	e023      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	3308      	adds	r3, #8
 8000510:	623b      	str	r3, [r7, #32]
          break;
 8000512:	e01e      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	330c      	adds	r3, #12
 800051a:	623b      	str	r3, [r7, #32]
          break;
 800051c:	e019      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d102      	bne.n	800052c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000526:	2304      	movs	r3, #4
 8000528:	623b      	str	r3, [r7, #32]
          break;
 800052a:	e012      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d105      	bne.n	8000540 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000534:	2308      	movs	r3, #8
 8000536:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	69fa      	ldr	r2, [r7, #28]
 800053c:	611a      	str	r2, [r3, #16]
          break;
 800053e:	e008      	b.n	8000552 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000540:	2308      	movs	r3, #8
 8000542:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	69fa      	ldr	r2, [r7, #28]
 8000548:	615a      	str	r2, [r3, #20]
          break;
 800054a:	e002      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]
          break;
 8000550:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000552:	69bb      	ldr	r3, [r7, #24]
 8000554:	2bff      	cmp	r3, #255	; 0xff
 8000556:	d801      	bhi.n	800055c <HAL_GPIO_Init+0xec>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	e001      	b.n	8000560 <HAL_GPIO_Init+0xf0>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3304      	adds	r3, #4
 8000560:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000562:	69bb      	ldr	r3, [r7, #24]
 8000564:	2bff      	cmp	r3, #255	; 0xff
 8000566:	d802      	bhi.n	800056e <HAL_GPIO_Init+0xfe>
 8000568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	e002      	b.n	8000574 <HAL_GPIO_Init+0x104>
 800056e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000570:	3b08      	subs	r3, #8
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	210f      	movs	r1, #15
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	fa01 f303 	lsl.w	r3, r1, r3
 8000582:	43db      	mvns	r3, r3
 8000584:	401a      	ands	r2, r3
 8000586:	6a39      	ldr	r1, [r7, #32]
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	431a      	orrs	r2, r3
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	2b00      	cmp	r3, #0
 800059e:	f000 8096 	beq.w	80006ce <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005a2:	4b59      	ldr	r3, [pc, #356]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a58      	ldr	r2, [pc, #352]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6193      	str	r3, [r2, #24]
 80005ae:	4b56      	ldr	r3, [pc, #344]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80005ba:	4a54      	ldr	r2, [pc, #336]	; (800070c <HAL_GPIO_Init+0x29c>)
 80005bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005be:	089b      	lsrs	r3, r3, #2
 80005c0:	3302      	adds	r3, #2
 80005c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ca:	f003 0303 	and.w	r3, r3, #3
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	220f      	movs	r2, #15
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	43db      	mvns	r3, r3
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	4013      	ands	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a4b      	ldr	r2, [pc, #300]	; (8000710 <HAL_GPIO_Init+0x2a0>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d013      	beq.n	800060e <HAL_GPIO_Init+0x19e>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a4a      	ldr	r2, [pc, #296]	; (8000714 <HAL_GPIO_Init+0x2a4>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d00d      	beq.n	800060a <HAL_GPIO_Init+0x19a>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a49      	ldr	r2, [pc, #292]	; (8000718 <HAL_GPIO_Init+0x2a8>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d007      	beq.n	8000606 <HAL_GPIO_Init+0x196>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a48      	ldr	r2, [pc, #288]	; (800071c <HAL_GPIO_Init+0x2ac>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d101      	bne.n	8000602 <HAL_GPIO_Init+0x192>
 80005fe:	2303      	movs	r3, #3
 8000600:	e006      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 8000602:	2304      	movs	r3, #4
 8000604:	e004      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 8000606:	2302      	movs	r3, #2
 8000608:	e002      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 800060a:	2301      	movs	r3, #1
 800060c:	e000      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 800060e:	2300      	movs	r3, #0
 8000610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000612:	f002 0203 	and.w	r2, r2, #3
 8000616:	0092      	lsls	r2, r2, #2
 8000618:	4093      	lsls	r3, r2
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	4313      	orrs	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000620:	493a      	ldr	r1, [pc, #232]	; (800070c <HAL_GPIO_Init+0x29c>)
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	089b      	lsrs	r3, r3, #2
 8000626:	3302      	adds	r3, #2
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000636:	2b00      	cmp	r3, #0
 8000638:	d006      	beq.n	8000648 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800063a:	4b39      	ldr	r3, [pc, #228]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	4938      	ldr	r1, [pc, #224]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	4313      	orrs	r3, r2
 8000644:	600b      	str	r3, [r1, #0]
 8000646:	e006      	b.n	8000656 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000648:	4b35      	ldr	r3, [pc, #212]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	43db      	mvns	r3, r3
 8000650:	4933      	ldr	r1, [pc, #204]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000652:	4013      	ands	r3, r2
 8000654:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065e:	2b00      	cmp	r3, #0
 8000660:	d006      	beq.n	8000670 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000662:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000664:	685a      	ldr	r2, [r3, #4]
 8000666:	492e      	ldr	r1, [pc, #184]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	4313      	orrs	r3, r2
 800066c:	604b      	str	r3, [r1, #4]
 800066e:	e006      	b.n	800067e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000670:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	43db      	mvns	r3, r3
 8000678:	4929      	ldr	r1, [pc, #164]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800067a:	4013      	ands	r3, r2
 800067c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000686:	2b00      	cmp	r3, #0
 8000688:	d006      	beq.n	8000698 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800068c:	689a      	ldr	r2, [r3, #8]
 800068e:	4924      	ldr	r1, [pc, #144]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	4313      	orrs	r3, r2
 8000694:	608b      	str	r3, [r1, #8]
 8000696:	e006      	b.n	80006a6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800069a:	689a      	ldr	r2, [r3, #8]
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	43db      	mvns	r3, r3
 80006a0:	491f      	ldr	r1, [pc, #124]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006a2:	4013      	ands	r3, r2
 80006a4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d006      	beq.n	80006c0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006b4:	68da      	ldr	r2, [r3, #12]
 80006b6:	491a      	ldr	r1, [pc, #104]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	60cb      	str	r3, [r1, #12]
 80006be:	e006      	b.n	80006ce <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006c2:	68da      	ldr	r2, [r3, #12]
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	43db      	mvns	r3, r3
 80006c8:	4915      	ldr	r1, [pc, #84]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	3301      	adds	r3, #1
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	fa22 f303 	lsr.w	r3, r2, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	f47f aed0 	bne.w	8000484 <HAL_GPIO_Init+0x14>
  }
}
 80006e4:	bf00      	nop
 80006e6:	372c      	adds	r7, #44	; 0x2c
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	10210000 	.word	0x10210000
 80006f4:	10110000 	.word	0x10110000
 80006f8:	10120000 	.word	0x10120000
 80006fc:	10310000 	.word	0x10310000
 8000700:	10320000 	.word	0x10320000
 8000704:	10220000 	.word	0x10220000
 8000708:	40021000 	.word	0x40021000
 800070c:	40010000 	.word	0x40010000
 8000710:	40010800 	.word	0x40010800
 8000714:	40010c00 	.word	0x40010c00
 8000718:	40011000 	.word	0x40011000
 800071c:	40011400 	.word	0x40011400
 8000720:	40010400 	.word	0x40010400

08000724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	807b      	strh	r3, [r7, #2]
 8000730:	4613      	mov	r3, r2
 8000732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000734:	787b      	ldrb	r3, [r7, #1]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d003      	beq.n	8000742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800073a:	887a      	ldrh	r2, [r7, #2]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000740:	e003      	b.n	800074a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000742:	887b      	ldrh	r3, [r7, #2]
 8000744:	041a      	lsls	r2, r3, #16
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	611a      	str	r2, [r3, #16]
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	68da      	ldr	r2, [r3, #12]
 8000764:	887b      	ldrh	r3, [r7, #2]
 8000766:	4013      	ands	r3, r2
 8000768:	2b00      	cmp	r3, #0
 800076a:	d003      	beq.n	8000774 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800076c:	887a      	ldrh	r2, [r7, #2]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000772:	e002      	b.n	800077a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000774:	887a      	ldrh	r2, [r7, #2]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	611a      	str	r2, [r3, #16]
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000790:	695a      	ldr	r2, [r3, #20]
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	4013      	ands	r3, r2
 8000796:	2b00      	cmp	r3, #0
 8000798:	d006      	beq.n	80007a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800079a:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800079c:	88fb      	ldrh	r3, [r7, #6]
 800079e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80007a0:	88fb      	ldrh	r3, [r7, #6]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 f806 	bl	80007b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40010400 	.word	0x40010400

080007b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d101      	bne.n	80007da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e10f      	b.n	80009fa <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d106      	bne.n	80007f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f001 f91a 	bl	8001a28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2224      	movs	r2, #36	; 0x24
 80007f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f022 0201 	bic.w	r2, r2, #1
 800080a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800080c:	f000 fcda 	bl	80011c4 <HAL_RCC_GetPCLK1Freq>
 8000810:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	4a7b      	ldr	r2, [pc, #492]	; (8000a04 <HAL_I2C_Init+0x23c>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d807      	bhi.n	800082c <HAL_I2C_Init+0x64>
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4a7a      	ldr	r2, [pc, #488]	; (8000a08 <HAL_I2C_Init+0x240>)
 8000820:	4293      	cmp	r3, r2
 8000822:	bf94      	ite	ls
 8000824:	2301      	movls	r3, #1
 8000826:	2300      	movhi	r3, #0
 8000828:	b2db      	uxtb	r3, r3
 800082a:	e006      	b.n	800083a <HAL_I2C_Init+0x72>
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	4a77      	ldr	r2, [pc, #476]	; (8000a0c <HAL_I2C_Init+0x244>)
 8000830:	4293      	cmp	r3, r2
 8000832:	bf94      	ite	ls
 8000834:	2301      	movls	r3, #1
 8000836:	2300      	movhi	r3, #0
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	e0db      	b.n	80009fa <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	4a72      	ldr	r2, [pc, #456]	; (8000a10 <HAL_I2C_Init+0x248>)
 8000846:	fba2 2303 	umull	r2, r3, r2, r3
 800084a:	0c9b      	lsrs	r3, r3, #18
 800084c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	68ba      	ldr	r2, [r7, #8]
 800085e:	430a      	orrs	r2, r1
 8000860:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	6a1b      	ldr	r3, [r3, #32]
 8000868:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4a64      	ldr	r2, [pc, #400]	; (8000a04 <HAL_I2C_Init+0x23c>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d802      	bhi.n	800087c <HAL_I2C_Init+0xb4>
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	3301      	adds	r3, #1
 800087a:	e009      	b.n	8000890 <HAL_I2C_Init+0xc8>
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000882:	fb02 f303 	mul.w	r3, r2, r3
 8000886:	4a63      	ldr	r2, [pc, #396]	; (8000a14 <HAL_I2C_Init+0x24c>)
 8000888:	fba2 2303 	umull	r2, r3, r2, r3
 800088c:	099b      	lsrs	r3, r3, #6
 800088e:	3301      	adds	r3, #1
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	6812      	ldr	r2, [r2, #0]
 8000894:	430b      	orrs	r3, r1
 8000896:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80008a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	4956      	ldr	r1, [pc, #344]	; (8000a04 <HAL_I2C_Init+0x23c>)
 80008ac:	428b      	cmp	r3, r1
 80008ae:	d80d      	bhi.n	80008cc <HAL_I2C_Init+0x104>
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	1e59      	subs	r1, r3, #1
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80008be:	3301      	adds	r3, #1
 80008c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	bf38      	it	cc
 80008c8:	2304      	movcc	r3, #4
 80008ca:	e04f      	b.n	800096c <HAL_I2C_Init+0x1a4>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d111      	bne.n	80008f8 <HAL_I2C_Init+0x130>
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	1e58      	subs	r0, r3, #1
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6859      	ldr	r1, [r3, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	440b      	add	r3, r1
 80008e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80008e6:	3301      	adds	r3, #1
 80008e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	bf0c      	ite	eq
 80008f0:	2301      	moveq	r3, #1
 80008f2:	2300      	movne	r3, #0
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	e012      	b.n	800091e <HAL_I2C_Init+0x156>
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	1e58      	subs	r0, r3, #1
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6859      	ldr	r1, [r3, #4]
 8000900:	460b      	mov	r3, r1
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	440b      	add	r3, r1
 8000906:	0099      	lsls	r1, r3, #2
 8000908:	440b      	add	r3, r1
 800090a:	fbb0 f3f3 	udiv	r3, r0, r3
 800090e:	3301      	adds	r3, #1
 8000910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000914:	2b00      	cmp	r3, #0
 8000916:	bf0c      	ite	eq
 8000918:	2301      	moveq	r3, #1
 800091a:	2300      	movne	r3, #0
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_I2C_Init+0x15e>
 8000922:	2301      	movs	r3, #1
 8000924:	e022      	b.n	800096c <HAL_I2C_Init+0x1a4>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d10e      	bne.n	800094c <HAL_I2C_Init+0x184>
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	1e58      	subs	r0, r3, #1
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6859      	ldr	r1, [r3, #4]
 8000936:	460b      	mov	r3, r1
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	440b      	add	r3, r1
 800093c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000940:	3301      	adds	r3, #1
 8000942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800094a:	e00f      	b.n	800096c <HAL_I2C_Init+0x1a4>
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	1e58      	subs	r0, r3, #1
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6859      	ldr	r1, [r3, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	440b      	add	r3, r1
 800095a:	0099      	lsls	r1, r3, #2
 800095c:	440b      	add	r3, r1
 800095e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000962:	3301      	adds	r3, #1
 8000964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000968:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800096c:	6879      	ldr	r1, [r7, #4]
 800096e:	6809      	ldr	r1, [r1, #0]
 8000970:	4313      	orrs	r3, r2
 8000972:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	69da      	ldr	r2, [r3, #28]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6a1b      	ldr	r3, [r3, #32]
 8000986:	431a      	orrs	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	430a      	orrs	r2, r1
 800098e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800099a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	6911      	ldr	r1, [r2, #16]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	68d2      	ldr	r2, [r2, #12]
 80009a6:	4311      	orrs	r1, r2
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	6812      	ldr	r2, [r2, #0]
 80009ac:	430b      	orrs	r3, r1
 80009ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	695a      	ldr	r2, [r3, #20]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	431a      	orrs	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	430a      	orrs	r2, r1
 80009ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f042 0201 	orr.w	r2, r2, #1
 80009da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2220      	movs	r2, #32
 80009e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2200      	movs	r2, #0
 80009ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2200      	movs	r2, #0
 80009f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	000186a0 	.word	0x000186a0
 8000a08:	001e847f 	.word	0x001e847f
 8000a0c:	003d08ff 	.word	0x003d08ff
 8000a10:	431bde83 	.word	0x431bde83
 8000a14:	10624dd3 	.word	0x10624dd3

08000a18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d101      	bne.n	8000a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e26c      	b.n	8000f04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	f000 8087 	beq.w	8000b46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a38:	4b92      	ldr	r3, [pc, #584]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f003 030c 	and.w	r3, r3, #12
 8000a40:	2b04      	cmp	r3, #4
 8000a42:	d00c      	beq.n	8000a5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a44:	4b8f      	ldr	r3, [pc, #572]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f003 030c 	and.w	r3, r3, #12
 8000a4c:	2b08      	cmp	r3, #8
 8000a4e:	d112      	bne.n	8000a76 <HAL_RCC_OscConfig+0x5e>
 8000a50:	4b8c      	ldr	r3, [pc, #560]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a5c:	d10b      	bne.n	8000a76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a5e:	4b89      	ldr	r3, [pc, #548]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d06c      	beq.n	8000b44 <HAL_RCC_OscConfig+0x12c>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d168      	bne.n	8000b44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e246      	b.n	8000f04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a7e:	d106      	bne.n	8000a8e <HAL_RCC_OscConfig+0x76>
 8000a80:	4b80      	ldr	r3, [pc, #512]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a7f      	ldr	r2, [pc, #508]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	e02e      	b.n	8000aec <HAL_RCC_OscConfig+0xd4>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d10c      	bne.n	8000ab0 <HAL_RCC_OscConfig+0x98>
 8000a96:	4b7b      	ldr	r3, [pc, #492]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a7a      	ldr	r2, [pc, #488]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aa0:	6013      	str	r3, [r2, #0]
 8000aa2:	4b78      	ldr	r3, [pc, #480]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a77      	ldr	r2, [pc, #476]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	e01d      	b.n	8000aec <HAL_RCC_OscConfig+0xd4>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ab8:	d10c      	bne.n	8000ad4 <HAL_RCC_OscConfig+0xbc>
 8000aba:	4b72      	ldr	r3, [pc, #456]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a71      	ldr	r2, [pc, #452]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ac4:	6013      	str	r3, [r2, #0]
 8000ac6:	4b6f      	ldr	r3, [pc, #444]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a6e      	ldr	r2, [pc, #440]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ad0:	6013      	str	r3, [r2, #0]
 8000ad2:	e00b      	b.n	8000aec <HAL_RCC_OscConfig+0xd4>
 8000ad4:	4b6b      	ldr	r3, [pc, #428]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a6a      	ldr	r2, [pc, #424]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ade:	6013      	str	r3, [r2, #0]
 8000ae0:	4b68      	ldr	r3, [pc, #416]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a67      	ldr	r2, [pc, #412]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d013      	beq.n	8000b1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000af4:	f7ff fb82 	bl	80001fc <HAL_GetTick>
 8000af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000afa:	e008      	b.n	8000b0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000afc:	f7ff fb7e 	bl	80001fc <HAL_GetTick>
 8000b00:	4602      	mov	r2, r0
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	2b64      	cmp	r3, #100	; 0x64
 8000b08:	d901      	bls.n	8000b0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	e1fa      	b.n	8000f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b0e:	4b5d      	ldr	r3, [pc, #372]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d0f0      	beq.n	8000afc <HAL_RCC_OscConfig+0xe4>
 8000b1a:	e014      	b.n	8000b46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b1c:	f7ff fb6e 	bl	80001fc <HAL_GetTick>
 8000b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b22:	e008      	b.n	8000b36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b24:	f7ff fb6a 	bl	80001fc <HAL_GetTick>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	2b64      	cmp	r3, #100	; 0x64
 8000b30:	d901      	bls.n	8000b36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b32:	2303      	movs	r3, #3
 8000b34:	e1e6      	b.n	8000f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b36:	4b53      	ldr	r3, [pc, #332]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d1f0      	bne.n	8000b24 <HAL_RCC_OscConfig+0x10c>
 8000b42:	e000      	b.n	8000b46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d063      	beq.n	8000c1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b52:	4b4c      	ldr	r3, [pc, #304]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 030c 	and.w	r3, r3, #12
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d00b      	beq.n	8000b76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b5e:	4b49      	ldr	r3, [pc, #292]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 030c 	and.w	r3, r3, #12
 8000b66:	2b08      	cmp	r3, #8
 8000b68:	d11c      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x18c>
 8000b6a:	4b46      	ldr	r3, [pc, #280]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d116      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b76:	4b43      	ldr	r3, [pc, #268]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d005      	beq.n	8000b8e <HAL_RCC_OscConfig+0x176>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	691b      	ldr	r3, [r3, #16]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d001      	beq.n	8000b8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e1ba      	b.n	8000f04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b8e:	4b3d      	ldr	r3, [pc, #244]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	4939      	ldr	r1, [pc, #228]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ba2:	e03a      	b.n	8000c1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	691b      	ldr	r3, [r3, #16]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d020      	beq.n	8000bee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bac:	4b36      	ldr	r3, [pc, #216]	; (8000c88 <HAL_RCC_OscConfig+0x270>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb2:	f7ff fb23 	bl	80001fc <HAL_GetTick>
 8000bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bb8:	e008      	b.n	8000bcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bba:	f7ff fb1f 	bl	80001fc <HAL_GetTick>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d901      	bls.n	8000bcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	e19b      	b.n	8000f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bcc:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f003 0302 	and.w	r3, r3, #2
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d0f0      	beq.n	8000bba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bd8:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	4927      	ldr	r1, [pc, #156]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000be8:	4313      	orrs	r3, r2
 8000bea:	600b      	str	r3, [r1, #0]
 8000bec:	e015      	b.n	8000c1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bee:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <HAL_RCC_OscConfig+0x270>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf4:	f7ff fb02 	bl	80001fc <HAL_GetTick>
 8000bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bfa:	e008      	b.n	8000c0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bfc:	f7ff fafe 	bl	80001fc <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d901      	bls.n	8000c0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	e17a      	b.n	8000f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d1f0      	bne.n	8000bfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0308 	and.w	r3, r3, #8
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d03a      	beq.n	8000c9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d019      	beq.n	8000c62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <HAL_RCC_OscConfig+0x274>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c34:	f7ff fae2 	bl	80001fc <HAL_GetTick>
 8000c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c3a:	e008      	b.n	8000c4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c3c:	f7ff fade 	bl	80001fc <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d901      	bls.n	8000c4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	e15a      	b.n	8000f04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <HAL_RCC_OscConfig+0x26c>)
 8000c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0f0      	beq.n	8000c3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f000 fada 	bl	8001214 <RCC_Delay>
 8000c60:	e01c      	b.n	8000c9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_RCC_OscConfig+0x274>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c68:	f7ff fac8 	bl	80001fc <HAL_GetTick>
 8000c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c6e:	e00f      	b.n	8000c90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c70:	f7ff fac4 	bl	80001fc <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d908      	bls.n	8000c90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e140      	b.n	8000f04 <HAL_RCC_OscConfig+0x4ec>
 8000c82:	bf00      	nop
 8000c84:	40021000 	.word	0x40021000
 8000c88:	42420000 	.word	0x42420000
 8000c8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c90:	4b9e      	ldr	r3, [pc, #632]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c94:	f003 0302 	and.w	r3, r3, #2
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d1e9      	bne.n	8000c70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 80a6 	beq.w	8000df6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000caa:	2300      	movs	r3, #0
 8000cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cae:	4b97      	ldr	r3, [pc, #604]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d10d      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b94      	ldr	r3, [pc, #592]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	4a93      	ldr	r2, [pc, #588]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	61d3      	str	r3, [r2, #28]
 8000cc6:	4b91      	ldr	r3, [pc, #580]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cd6:	4b8e      	ldr	r3, [pc, #568]	; (8000f10 <HAL_RCC_OscConfig+0x4f8>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d118      	bne.n	8000d14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ce2:	4b8b      	ldr	r3, [pc, #556]	; (8000f10 <HAL_RCC_OscConfig+0x4f8>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a8a      	ldr	r2, [pc, #552]	; (8000f10 <HAL_RCC_OscConfig+0x4f8>)
 8000ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cee:	f7ff fa85 	bl	80001fc <HAL_GetTick>
 8000cf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cf4:	e008      	b.n	8000d08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cf6:	f7ff fa81 	bl	80001fc <HAL_GetTick>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	2b64      	cmp	r3, #100	; 0x64
 8000d02:	d901      	bls.n	8000d08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d04:	2303      	movs	r3, #3
 8000d06:	e0fd      	b.n	8000f04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d08:	4b81      	ldr	r3, [pc, #516]	; (8000f10 <HAL_RCC_OscConfig+0x4f8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0f0      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d106      	bne.n	8000d2a <HAL_RCC_OscConfig+0x312>
 8000d1c:	4b7b      	ldr	r3, [pc, #492]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000d1e:	6a1b      	ldr	r3, [r3, #32]
 8000d20:	4a7a      	ldr	r2, [pc, #488]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6213      	str	r3, [r2, #32]
 8000d28:	e02d      	b.n	8000d86 <HAL_RCC_OscConfig+0x36e>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d10c      	bne.n	8000d4c <HAL_RCC_OscConfig+0x334>
 8000d32:	4b76      	ldr	r3, [pc, #472]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000d34:	6a1b      	ldr	r3, [r3, #32]
 8000d36:	4a75      	ldr	r2, [pc, #468]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000d38:	f023 0301 	bic.w	r3, r3, #1
 8000d3c:	6213      	str	r3, [r2, #32]
 8000d3e:	4b73      	ldr	r3, [pc, #460]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000d40:	6a1b      	ldr	r3, [r3, #32]
 8000d42:	4a72      	ldr	r2, [pc, #456]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000d44:	f023 0304 	bic.w	r3, r3, #4
 8000d48:	6213      	str	r3, [r2, #32]
 8000d4a:	e01c      	b.n	8000d86 <HAL_RCC_OscConfig+0x36e>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	2b05      	cmp	r3, #5
 8000d52:	d10c      	bne.n	8000d6e <HAL_RCC_OscConfig+0x356>
 8000d54:	4b6d      	ldr	r3, [pc, #436]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000d56:	6a1b      	ldr	r3, [r3, #32]
 8000d58:	4a6c      	ldr	r2, [pc, #432]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000d5a:	f043 0304 	orr.w	r3, r3, #4
 8000d5e:	6213      	str	r3, [r2, #32]
 8000d60:	4b6a      	ldr	r3, [pc, #424]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000d62:	6a1b      	ldr	r3, [r3, #32]
 8000d64:	4a69      	ldr	r2, [pc, #420]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6213      	str	r3, [r2, #32]
 8000d6c:	e00b      	b.n	8000d86 <HAL_RCC_OscConfig+0x36e>
 8000d6e:	4b67      	ldr	r3, [pc, #412]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000d70:	6a1b      	ldr	r3, [r3, #32]
 8000d72:	4a66      	ldr	r2, [pc, #408]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000d74:	f023 0301 	bic.w	r3, r3, #1
 8000d78:	6213      	str	r3, [r2, #32]
 8000d7a:	4b64      	ldr	r3, [pc, #400]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000d7c:	6a1b      	ldr	r3, [r3, #32]
 8000d7e:	4a63      	ldr	r2, [pc, #396]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000d80:	f023 0304 	bic.w	r3, r3, #4
 8000d84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d015      	beq.n	8000dba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d8e:	f7ff fa35 	bl	80001fc <HAL_GetTick>
 8000d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d94:	e00a      	b.n	8000dac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d96:	f7ff fa31 	bl	80001fc <HAL_GetTick>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d901      	bls.n	8000dac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000da8:	2303      	movs	r3, #3
 8000daa:	e0ab      	b.n	8000f04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dac:	4b57      	ldr	r3, [pc, #348]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000dae:	6a1b      	ldr	r3, [r3, #32]
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0ee      	beq.n	8000d96 <HAL_RCC_OscConfig+0x37e>
 8000db8:	e014      	b.n	8000de4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dba:	f7ff fa1f 	bl	80001fc <HAL_GetTick>
 8000dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dc0:	e00a      	b.n	8000dd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dc2:	f7ff fa1b 	bl	80001fc <HAL_GetTick>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d901      	bls.n	8000dd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	e095      	b.n	8000f04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dd8:	4b4c      	ldr	r3, [pc, #304]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000dda:	6a1b      	ldr	r3, [r3, #32]
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1ee      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000de4:	7dfb      	ldrb	r3, [r7, #23]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d105      	bne.n	8000df6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dea:	4b48      	ldr	r3, [pc, #288]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	4a47      	ldr	r2, [pc, #284]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000df0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000df4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f000 8081 	beq.w	8000f02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e00:	4b42      	ldr	r3, [pc, #264]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 030c 	and.w	r3, r3, #12
 8000e08:	2b08      	cmp	r3, #8
 8000e0a:	d061      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	69db      	ldr	r3, [r3, #28]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d146      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e14:	4b3f      	ldr	r3, [pc, #252]	; (8000f14 <HAL_RCC_OscConfig+0x4fc>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1a:	f7ff f9ef 	bl	80001fc <HAL_GetTick>
 8000e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e20:	e008      	b.n	8000e34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e22:	f7ff f9eb 	bl	80001fc <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d901      	bls.n	8000e34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	e067      	b.n	8000f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e34:	4b35      	ldr	r3, [pc, #212]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1f0      	bne.n	8000e22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6a1b      	ldr	r3, [r3, #32]
 8000e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e48:	d108      	bne.n	8000e5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e4a:	4b30      	ldr	r3, [pc, #192]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	492d      	ldr	r1, [pc, #180]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e5c:	4b2b      	ldr	r3, [pc, #172]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a19      	ldr	r1, [r3, #32]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6c:	430b      	orrs	r3, r1
 8000e6e:	4927      	ldr	r1, [pc, #156]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000e70:	4313      	orrs	r3, r2
 8000e72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e74:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <HAL_RCC_OscConfig+0x4fc>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7a:	f7ff f9bf 	bl	80001fc <HAL_GetTick>
 8000e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e80:	e008      	b.n	8000e94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e82:	f7ff f9bb 	bl	80001fc <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d901      	bls.n	8000e94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e037      	b.n	8000f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e94:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0f0      	beq.n	8000e82 <HAL_RCC_OscConfig+0x46a>
 8000ea0:	e02f      	b.n	8000f02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <HAL_RCC_OscConfig+0x4fc>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea8:	f7ff f9a8 	bl	80001fc <HAL_GetTick>
 8000eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eae:	e008      	b.n	8000ec2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eb0:	f7ff f9a4 	bl	80001fc <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d901      	bls.n	8000ec2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e020      	b.n	8000f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1f0      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x498>
 8000ece:	e018      	b.n	8000f02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69db      	ldr	r3, [r3, #28]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d101      	bne.n	8000edc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e013      	b.n	8000f04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000edc:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <HAL_RCC_OscConfig+0x4f4>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d106      	bne.n	8000efe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d001      	beq.n	8000f02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e000      	b.n	8000f04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40007000 	.word	0x40007000
 8000f14:	42420060 	.word	0x42420060

08000f18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d101      	bne.n	8000f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e0d0      	b.n	80010ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f2c:	4b6a      	ldr	r3, [pc, #424]	; (80010d8 <HAL_RCC_ClockConfig+0x1c0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d910      	bls.n	8000f5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f3a:	4b67      	ldr	r3, [pc, #412]	; (80010d8 <HAL_RCC_ClockConfig+0x1c0>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f023 0207 	bic.w	r2, r3, #7
 8000f42:	4965      	ldr	r1, [pc, #404]	; (80010d8 <HAL_RCC_ClockConfig+0x1c0>)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f4a:	4b63      	ldr	r3, [pc, #396]	; (80010d8 <HAL_RCC_ClockConfig+0x1c0>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d001      	beq.n	8000f5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e0b8      	b.n	80010ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d020      	beq.n	8000faa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d005      	beq.n	8000f80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f74:	4b59      	ldr	r3, [pc, #356]	; (80010dc <HAL_RCC_ClockConfig+0x1c4>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	4a58      	ldr	r2, [pc, #352]	; (80010dc <HAL_RCC_ClockConfig+0x1c4>)
 8000f7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0308 	and.w	r3, r3, #8
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d005      	beq.n	8000f98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f8c:	4b53      	ldr	r3, [pc, #332]	; (80010dc <HAL_RCC_ClockConfig+0x1c4>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	4a52      	ldr	r2, [pc, #328]	; (80010dc <HAL_RCC_ClockConfig+0x1c4>)
 8000f92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000f96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f98:	4b50      	ldr	r3, [pc, #320]	; (80010dc <HAL_RCC_ClockConfig+0x1c4>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	494d      	ldr	r1, [pc, #308]	; (80010dc <HAL_RCC_ClockConfig+0x1c4>)
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d040      	beq.n	8001038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d107      	bne.n	8000fce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fbe:	4b47      	ldr	r3, [pc, #284]	; (80010dc <HAL_RCC_ClockConfig+0x1c4>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d115      	bne.n	8000ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e07f      	b.n	80010ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d107      	bne.n	8000fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fd6:	4b41      	ldr	r3, [pc, #260]	; (80010dc <HAL_RCC_ClockConfig+0x1c4>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d109      	bne.n	8000ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e073      	b.n	80010ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe6:	4b3d      	ldr	r3, [pc, #244]	; (80010dc <HAL_RCC_ClockConfig+0x1c4>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e06b      	b.n	80010ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ff6:	4b39      	ldr	r3, [pc, #228]	; (80010dc <HAL_RCC_ClockConfig+0x1c4>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f023 0203 	bic.w	r2, r3, #3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	4936      	ldr	r1, [pc, #216]	; (80010dc <HAL_RCC_ClockConfig+0x1c4>)
 8001004:	4313      	orrs	r3, r2
 8001006:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001008:	f7ff f8f8 	bl	80001fc <HAL_GetTick>
 800100c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800100e:	e00a      	b.n	8001026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001010:	f7ff f8f4 	bl	80001fc <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	f241 3288 	movw	r2, #5000	; 0x1388
 800101e:	4293      	cmp	r3, r2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e053      	b.n	80010ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001026:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <HAL_RCC_ClockConfig+0x1c4>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 020c 	and.w	r2, r3, #12
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	429a      	cmp	r2, r3
 8001036:	d1eb      	bne.n	8001010 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001038:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <HAL_RCC_ClockConfig+0x1c0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	429a      	cmp	r2, r3
 8001044:	d210      	bcs.n	8001068 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001046:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f023 0207 	bic.w	r2, r3, #7
 800104e:	4922      	ldr	r1, [pc, #136]	; (80010d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	4313      	orrs	r3, r2
 8001054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001056:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	d001      	beq.n	8001068 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e032      	b.n	80010ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	2b00      	cmp	r3, #0
 8001072:	d008      	beq.n	8001086 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_RCC_ClockConfig+0x1c4>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	4916      	ldr	r1, [pc, #88]	; (80010dc <HAL_RCC_ClockConfig+0x1c4>)
 8001082:	4313      	orrs	r3, r2
 8001084:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0308 	and.w	r3, r3, #8
 800108e:	2b00      	cmp	r3, #0
 8001090:	d009      	beq.n	80010a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001092:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_RCC_ClockConfig+0x1c4>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	490e      	ldr	r1, [pc, #56]	; (80010dc <HAL_RCC_ClockConfig+0x1c4>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010a6:	f000 f821 	bl	80010ec <HAL_RCC_GetSysClockFreq>
 80010aa:	4601      	mov	r1, r0
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_RCC_ClockConfig+0x1c4>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <HAL_RCC_ClockConfig+0x1c8>)
 80010b8:	5cd3      	ldrb	r3, [r2, r3]
 80010ba:	fa21 f303 	lsr.w	r3, r1, r3
 80010be:	4a09      	ldr	r2, [pc, #36]	; (80010e4 <HAL_RCC_ClockConfig+0x1cc>)
 80010c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <HAL_RCC_ClockConfig+0x1d0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff f856 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40022000 	.word	0x40022000
 80010dc:	40021000 	.word	0x40021000
 80010e0:	08001d08 	.word	0x08001d08
 80010e4:	20000008 	.word	0x20000008
 80010e8:	20000000 	.word	0x20000000

080010ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010ec:	b490      	push	{r4, r7}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010f2:	4b2a      	ldr	r3, [pc, #168]	; (800119c <HAL_RCC_GetSysClockFreq+0xb0>)
 80010f4:	1d3c      	adds	r4, r7, #4
 80010f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010fc:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001116:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b04      	cmp	r3, #4
 8001124:	d002      	beq.n	800112c <HAL_RCC_GetSysClockFreq+0x40>
 8001126:	2b08      	cmp	r3, #8
 8001128:	d003      	beq.n	8001132 <HAL_RCC_GetSysClockFreq+0x46>
 800112a:	e02d      	b.n	8001188 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800112c:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800112e:	623b      	str	r3, [r7, #32]
      break;
 8001130:	e02d      	b.n	800118e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	0c9b      	lsrs	r3, r3, #18
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800113e:	4413      	add	r3, r2
 8001140:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001144:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d013      	beq.n	8001178 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	0c5b      	lsrs	r3, r3, #17
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800115e:	4413      	add	r3, r2
 8001160:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001164:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800116a:	fb02 f203 	mul.w	r2, r2, r3
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	fbb2 f3f3 	udiv	r3, r2, r3
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
 8001176:	e004      	b.n	8001182 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	4a0c      	ldr	r2, [pc, #48]	; (80011ac <HAL_RCC_GetSysClockFreq+0xc0>)
 800117c:	fb02 f303 	mul.w	r3, r2, r3
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	623b      	str	r3, [r7, #32]
      break;
 8001186:	e002      	b.n	800118e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800118a:	623b      	str	r3, [r7, #32]
      break;
 800118c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800118e:	6a3b      	ldr	r3, [r7, #32]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3728      	adds	r7, #40	; 0x28
 8001194:	46bd      	mov	sp, r7
 8001196:	bc90      	pop	{r4, r7}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	08001ce4 	.word	0x08001ce4
 80011a0:	08001cf4 	.word	0x08001cf4
 80011a4:	40021000 	.word	0x40021000
 80011a8:	007a1200 	.word	0x007a1200
 80011ac:	003d0900 	.word	0x003d0900

080011b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011b4:	4b02      	ldr	r3, [pc, #8]	; (80011c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	20000008 	.word	0x20000008

080011c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80011c8:	f7ff fff2 	bl	80011b0 <HAL_RCC_GetHCLKFreq>
 80011cc:	4601      	mov	r1, r0
 80011ce:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	0a1b      	lsrs	r3, r3, #8
 80011d4:	f003 0307 	and.w	r3, r3, #7
 80011d8:	4a03      	ldr	r2, [pc, #12]	; (80011e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80011da:	5cd3      	ldrb	r3, [r2, r3]
 80011dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40021000 	.word	0x40021000
 80011e8:	08001d18 	.word	0x08001d18

080011ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80011f0:	f7ff ffde 	bl	80011b0 <HAL_RCC_GetHCLKFreq>
 80011f4:	4601      	mov	r1, r0
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <HAL_RCC_GetPCLK2Freq+0x20>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	0adb      	lsrs	r3, r3, #11
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	4a03      	ldr	r2, [pc, #12]	; (8001210 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001202:	5cd3      	ldrb	r3, [r2, r3]
 8001204:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001208:	4618      	mov	r0, r3
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40021000 	.word	0x40021000
 8001210:	08001d18 	.word	0x08001d18

08001214 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <RCC_Delay+0x34>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0a      	ldr	r2, [pc, #40]	; (800124c <RCC_Delay+0x38>)
 8001222:	fba2 2303 	umull	r2, r3, r2, r3
 8001226:	0a5b      	lsrs	r3, r3, #9
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	fb02 f303 	mul.w	r3, r2, r3
 800122e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001230:	bf00      	nop
  }
  while (Delay --);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	1e5a      	subs	r2, r3, #1
 8001236:	60fa      	str	r2, [r7, #12]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f9      	bne.n	8001230 <RCC_Delay+0x1c>
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000008 	.word	0x20000008
 800124c:	10624dd3 	.word	0x10624dd3

08001250 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e03f      	b.n	80012e2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d106      	bne.n	800127c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 fc32 	bl	8001ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2224      	movs	r2, #36	; 0x24
 8001280:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001292:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 f90b 	bl	80014b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	691a      	ldr	r2, [r3, #16]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80012a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	695a      	ldr	r2, [r3, #20]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80012b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2220      	movs	r2, #32
 80012d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2220      	movs	r2, #32
 80012dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b088      	sub	sp, #32
 80012ee:	af02      	add	r7, sp, #8
 80012f0:	60f8      	str	r0, [r7, #12]
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	4613      	mov	r3, r2
 80012f8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b20      	cmp	r3, #32
 8001308:	f040 8083 	bne.w	8001412 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d002      	beq.n	8001318 <HAL_UART_Transmit+0x2e>
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e07b      	b.n	8001414 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001322:	2b01      	cmp	r3, #1
 8001324:	d101      	bne.n	800132a <HAL_UART_Transmit+0x40>
 8001326:	2302      	movs	r3, #2
 8001328:	e074      	b.n	8001414 <HAL_UART_Transmit+0x12a>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2201      	movs	r2, #1
 800132e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2200      	movs	r2, #0
 8001336:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2221      	movs	r2, #33	; 0x21
 800133c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001340:	f7fe ff5c 	bl	80001fc <HAL_GetTick>
 8001344:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	88fa      	ldrh	r2, [r7, #6]
 800134a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	88fa      	ldrh	r2, [r7, #6]
 8001350:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001352:	e042      	b.n	80013da <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001358:	b29b      	uxth	r3, r3
 800135a:	3b01      	subs	r3, #1
 800135c:	b29a      	uxth	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800136a:	d122      	bne.n	80013b2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	2200      	movs	r2, #0
 8001374:	2180      	movs	r1, #128	; 0x80
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 f850 	bl	800141c <UART_WaitOnFlagUntilTimeout>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e046      	b.n	8001414 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001398:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d103      	bne.n	80013aa <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	3302      	adds	r3, #2
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	e017      	b.n	80013da <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	3301      	adds	r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	e013      	b.n	80013da <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	2200      	movs	r2, #0
 80013ba:	2180      	movs	r1, #128	; 0x80
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f000 f82d 	bl	800141c <UART_WaitOnFlagUntilTimeout>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e023      	b.n	8001414 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	60ba      	str	r2, [r7, #8]
 80013d2:	781a      	ldrb	r2, [r3, #0]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80013de:	b29b      	uxth	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1b7      	bne.n	8001354 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	2200      	movs	r2, #0
 80013ec:	2140      	movs	r1, #64	; 0x40
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f000 f814 	bl	800141c <UART_WaitOnFlagUntilTimeout>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e00a      	b.n	8001414 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2220      	movs	r2, #32
 8001402:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001412:	2302      	movs	r3, #2
  }
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	4613      	mov	r3, r2
 800142a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800142c:	e02c      	b.n	8001488 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001434:	d028      	beq.n	8001488 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d007      	beq.n	800144c <UART_WaitOnFlagUntilTimeout+0x30>
 800143c:	f7fe fede 	bl	80001fc <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	429a      	cmp	r2, r3
 800144a:	d21d      	bcs.n	8001488 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68da      	ldr	r2, [r3, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800145a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	695a      	ldr	r2, [r3, #20]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0201 	bic.w	r2, r2, #1
 800146a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2220      	movs	r2, #32
 8001470:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2220      	movs	r2, #32
 8001478:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e00f      	b.n	80014a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	4013      	ands	r3, r2
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	429a      	cmp	r2, r3
 8001496:	bf0c      	ite	eq
 8001498:	2301      	moveq	r3, #1
 800149a:	2300      	movne	r3, #0
 800149c:	b2db      	uxtb	r3, r3
 800149e:	461a      	mov	r2, r3
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d0c3      	beq.n	800142e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	4313      	orrs	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80014ea:	f023 030c 	bic.w	r3, r3, #12
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	6812      	ldr	r2, [r2, #0]
 80014f2:	68f9      	ldr	r1, [r7, #12]
 80014f4:	430b      	orrs	r3, r1
 80014f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699a      	ldr	r2, [r3, #24]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a52      	ldr	r2, [pc, #328]	; (800165c <UART_SetConfig+0x1ac>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d14e      	bne.n	80015b6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001518:	f7ff fe68 	bl	80011ec <HAL_RCC_GetPCLK2Freq>
 800151c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	009a      	lsls	r2, r3, #2
 8001528:	441a      	add	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	fbb2 f3f3 	udiv	r3, r2, r3
 8001534:	4a4a      	ldr	r2, [pc, #296]	; (8001660 <UART_SetConfig+0x1b0>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	095b      	lsrs	r3, r3, #5
 800153c:	0119      	lsls	r1, r3, #4
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	009a      	lsls	r2, r3, #2
 8001548:	441a      	add	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	fbb2 f2f3 	udiv	r2, r2, r3
 8001554:	4b42      	ldr	r3, [pc, #264]	; (8001660 <UART_SetConfig+0x1b0>)
 8001556:	fba3 0302 	umull	r0, r3, r3, r2
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	2064      	movs	r0, #100	; 0x64
 800155e:	fb00 f303 	mul.w	r3, r0, r3
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	011b      	lsls	r3, r3, #4
 8001566:	3332      	adds	r3, #50	; 0x32
 8001568:	4a3d      	ldr	r2, [pc, #244]	; (8001660 <UART_SetConfig+0x1b0>)
 800156a:	fba2 2303 	umull	r2, r3, r2, r3
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001574:	4419      	add	r1, r3
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	009a      	lsls	r2, r3, #2
 8001580:	441a      	add	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	fbb2 f2f3 	udiv	r2, r2, r3
 800158c:	4b34      	ldr	r3, [pc, #208]	; (8001660 <UART_SetConfig+0x1b0>)
 800158e:	fba3 0302 	umull	r0, r3, r3, r2
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	2064      	movs	r0, #100	; 0x64
 8001596:	fb00 f303 	mul.w	r3, r0, r3
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	011b      	lsls	r3, r3, #4
 800159e:	3332      	adds	r3, #50	; 0x32
 80015a0:	4a2f      	ldr	r2, [pc, #188]	; (8001660 <UART_SetConfig+0x1b0>)
 80015a2:	fba2 2303 	umull	r2, r3, r2, r3
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	f003 020f 	and.w	r2, r3, #15
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	440a      	add	r2, r1
 80015b2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80015b4:	e04d      	b.n	8001652 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80015b6:	f7ff fe05 	bl	80011c4 <HAL_RCC_GetPCLK1Freq>
 80015ba:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	009a      	lsls	r2, r3, #2
 80015c6:	441a      	add	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d2:	4a23      	ldr	r2, [pc, #140]	; (8001660 <UART_SetConfig+0x1b0>)
 80015d4:	fba2 2303 	umull	r2, r3, r2, r3
 80015d8:	095b      	lsrs	r3, r3, #5
 80015da:	0119      	lsls	r1, r3, #4
 80015dc:	68ba      	ldr	r2, [r7, #8]
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	009a      	lsls	r2, r3, #2
 80015e6:	441a      	add	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <UART_SetConfig+0x1b0>)
 80015f4:	fba3 0302 	umull	r0, r3, r3, r2
 80015f8:	095b      	lsrs	r3, r3, #5
 80015fa:	2064      	movs	r0, #100	; 0x64
 80015fc:	fb00 f303 	mul.w	r3, r0, r3
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	3332      	adds	r3, #50	; 0x32
 8001606:	4a16      	ldr	r2, [pc, #88]	; (8001660 <UART_SetConfig+0x1b0>)
 8001608:	fba2 2303 	umull	r2, r3, r2, r3
 800160c:	095b      	lsrs	r3, r3, #5
 800160e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001612:	4419      	add	r1, r3
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	009a      	lsls	r2, r3, #2
 800161e:	441a      	add	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	fbb2 f2f3 	udiv	r2, r2, r3
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <UART_SetConfig+0x1b0>)
 800162c:	fba3 0302 	umull	r0, r3, r3, r2
 8001630:	095b      	lsrs	r3, r3, #5
 8001632:	2064      	movs	r0, #100	; 0x64
 8001634:	fb00 f303 	mul.w	r3, r0, r3
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	3332      	adds	r3, #50	; 0x32
 800163e:	4a08      	ldr	r2, [pc, #32]	; (8001660 <UART_SetConfig+0x1b0>)
 8001640:	fba2 2303 	umull	r2, r3, r2, r3
 8001644:	095b      	lsrs	r3, r3, #5
 8001646:	f003 020f 	and.w	r2, r3, #15
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	440a      	add	r2, r1
 8001650:	609a      	str	r2, [r3, #8]
}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40013800 	.word	0x40013800
 8001660:	51eb851f 	.word	0x51eb851f

08001664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800166a:	f7fe fd6f 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800166e:	f000 f833 	bl	80016d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001672:	f000 f8cf 	bl	8001814 <MX_GPIO_Init>

  MX_I2C1_Init();
 8001676:	f000 f875 	bl	8001764 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800167a:	f000 f8a1 	bl	80017c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char string2 [10];
  char string [10];
  //uint8_t len = 0;
  //uint8_t len1 = 0;
  uint8_t cmd[] = {0x00};
 800167e:	2300      	movs	r3, #0
 8001680:	713b      	strb	r3, [r7, #4]
  //uint8_t cmd1[] = {0x01};
  short i = 8;
 8001682:	2308      	movs	r3, #8
 8001684:	83fb      	strh	r3, [r7, #30]

  /* USER CODE END 2 */
  if(i > 8) i=0;
 8001686:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800168a:	2b08      	cmp	r3, #8
 800168c:	dd01      	ble.n	8001692 <main+0x2e>
 800168e:	2300      	movs	r3, #0
 8001690:	83fb      	strh	r3, [r7, #30]
  cmd[0] = ~(1 << i);
 8001692:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001696:	2201      	movs	r2, #1
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	b2db      	uxtb	r3, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	713b      	strb	r3, [r7, #4]
//  while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(0x20<<1),  cmd, 1, 350) != HAL_OK){
//	delay(10);
//  }
  delay(250);
 80016a4:	20fa      	movs	r0, #250	; 0xfa
 80016a6:	f7fe fdb3 	bl	8000210 <HAL_Delay>
//			break;
//	}

	  //len1 = sprintf(string2," %02X \r\n", data);
	  //len = sprintf(string," %i \r\n", cmd[0]);
      if (digitalRead(6) > 0){
 80016aa:	2006      	movs	r0, #6
 80016ac:	f000 f965 	bl	800197a <digitalRead>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d005      	beq.n	80016c2 <main+0x5e>
    	  HAL_UART_Transmit(&huart2, "hola", 4, 150);
 80016b6:	2396      	movs	r3, #150	; 0x96
 80016b8:	2204      	movs	r2, #4
 80016ba:	4904      	ldr	r1, [pc, #16]	; (80016cc <main+0x68>)
 80016bc:	4804      	ldr	r0, [pc, #16]	; (80016d0 <main+0x6c>)
 80016be:	f7ff fe14 	bl	80012ea <HAL_UART_Transmit>
      }

//	  HAL_UART_Transmit(&huart2, string2, len1, 150);

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80016c2:	2120      	movs	r1, #32
 80016c4:	4803      	ldr	r0, [pc, #12]	; (80016d4 <main+0x70>)
 80016c6:	f7ff f845 	bl	8000754 <HAL_GPIO_TogglePin>
      if (digitalRead(6) > 0){
 80016ca:	e7ee      	b.n	80016aa <main+0x46>
 80016cc:	08001cf8 	.word	0x08001cf8
 80016d0:	20000080 	.word	0x20000080
 80016d4:	40010800 	.word	0x40010800

080016d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b090      	sub	sp, #64	; 0x40
 80016dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016de:	f107 0318 	add.w	r3, r7, #24
 80016e2:	2228      	movs	r2, #40	; 0x28
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 fae8 	bl	8001cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
 80016f8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016fa:	2301      	movs	r3, #1
 80016fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016fe:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001702:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001708:	2301      	movs	r3, #1
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800170c:	2302      	movs	r3, #2
 800170e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001714:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001716:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800171a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800171c:	f107 0318 	add.w	r3, r7, #24
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff f979 	bl	8000a18 <HAL_RCC_OscConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800172c:	f000 f8e0 	bl	80018f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001730:	230f      	movs	r3, #15
 8001732:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001734:	2302      	movs	r3, #2
 8001736:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800173c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	2102      	movs	r1, #2
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fbe4 	bl	8000f18 <HAL_RCC_ClockConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001756:	f000 f8cb 	bl	80018f0 <Error_Handler>
  }
}
 800175a:	bf00      	nop
 800175c:	3740      	adds	r7, #64	; 0x40
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <MX_I2C1_Init+0x50>)
 800176a:	4a13      	ldr	r2, [pc, #76]	; (80017b8 <MX_I2C1_Init+0x54>)
 800176c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_I2C1_Init+0x50>)
 8001770:	4a12      	ldr	r2, [pc, #72]	; (80017bc <MX_I2C1_Init+0x58>)
 8001772:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_I2C1_Init+0x50>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_I2C1_Init+0x50>)
 800177c:	2200      	movs	r2, #0
 800177e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_I2C1_Init+0x50>)
 8001782:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001786:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <MX_I2C1_Init+0x50>)
 800178a:	2200      	movs	r2, #0
 800178c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_I2C1_Init+0x50>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <MX_I2C1_Init+0x50>)
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_I2C1_Init+0x50>)
 800179c:	2200      	movs	r2, #0
 800179e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017a0:	4804      	ldr	r0, [pc, #16]	; (80017b4 <MX_I2C1_Init+0x50>)
 80017a2:	f7ff f811 	bl	80007c8 <HAL_I2C_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017ac:	f000 f8a0 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	2000002c 	.word	0x2000002c
 80017b8:	40005400 	.word	0x40005400
 80017bc:	000186a0 	.word	0x000186a0

080017c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017c6:	4a12      	ldr	r2, [pc, #72]	; (8001810 <MX_USART2_UART_Init+0x50>)
 80017c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017e6:	220c      	movs	r2, #12
 80017e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <MX_USART2_UART_Init+0x4c>)
 80017f8:	f7ff fd2a 	bl	8001250 <HAL_UART_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001802:	f000 f875 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000080 	.word	0x20000080
 8001810:	40004400 	.word	0x40004400

08001814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181a:	f107 0310 	add.w	r3, r7, #16
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001828:	4b2d      	ldr	r3, [pc, #180]	; (80018e0 <MX_GPIO_Init+0xcc>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	4a2c      	ldr	r2, [pc, #176]	; (80018e0 <MX_GPIO_Init+0xcc>)
 800182e:	f043 0310 	orr.w	r3, r3, #16
 8001832:	6193      	str	r3, [r2, #24]
 8001834:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <MX_GPIO_Init+0xcc>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001840:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <MX_GPIO_Init+0xcc>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a26      	ldr	r2, [pc, #152]	; (80018e0 <MX_GPIO_Init+0xcc>)
 8001846:	f043 0320 	orr.w	r3, r3, #32
 800184a:	6193      	str	r3, [r2, #24]
 800184c:	4b24      	ldr	r3, [pc, #144]	; (80018e0 <MX_GPIO_Init+0xcc>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f003 0320 	and.w	r3, r3, #32
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001858:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <MX_GPIO_Init+0xcc>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	4a20      	ldr	r2, [pc, #128]	; (80018e0 <MX_GPIO_Init+0xcc>)
 800185e:	f043 0304 	orr.w	r3, r3, #4
 8001862:	6193      	str	r3, [r2, #24]
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <MX_GPIO_Init+0xcc>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <MX_GPIO_Init+0xcc>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	4a1a      	ldr	r2, [pc, #104]	; (80018e0 <MX_GPIO_Init+0xcc>)
 8001876:	f043 0308 	orr.w	r3, r3, #8
 800187a:	6193      	str	r3, [r2, #24]
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <MX_GPIO_Init+0xcc>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001888:	2200      	movs	r2, #0
 800188a:	2120      	movs	r1, #32
 800188c:	4815      	ldr	r0, [pc, #84]	; (80018e4 <MX_GPIO_Init+0xd0>)
 800188e:	f7fe ff49 	bl	8000724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001892:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <MX_GPIO_Init+0xd4>)
 800189a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	4619      	mov	r1, r3
 80018a6:	4811      	ldr	r0, [pc, #68]	; (80018ec <MX_GPIO_Init+0xd8>)
 80018a8:	f7fe fde2 	bl	8000470 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018ac:	2320      	movs	r3, #32
 80018ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b0:	2301      	movs	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2302      	movs	r3, #2
 80018ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	4619      	mov	r1, r3
 80018c2:	4808      	ldr	r0, [pc, #32]	; (80018e4 <MX_GPIO_Init+0xd0>)
 80018c4:	f7fe fdd4 	bl	8000470 <HAL_GPIO_Init>


  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2100      	movs	r1, #0
 80018cc:	2028      	movs	r0, #40	; 0x28
 80018ce:	f7fe fd98 	bl	8000402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018d2:	2028      	movs	r0, #40	; 0x28
 80018d4:	f7fe fdb1 	bl	800043a <HAL_NVIC_EnableIRQ>

}
 80018d8:	bf00      	nop
 80018da:	3720      	adds	r7, #32
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40010800 	.word	0x40010800
 80018e8:	10110000 	.word	0x10110000
 80018ec:	40011000 	.word	0x40011000

080018f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_UART_Transmit(&huart2, "ERROR\r\n", 10, 150);
 80018f4:	2396      	movs	r3, #150	; 0x96
 80018f6:	220a      	movs	r2, #10
 80018f8:	4906      	ldr	r1, [pc, #24]	; (8001914 <Error_Handler+0x24>)
 80018fa:	4807      	ldr	r0, [pc, #28]	; (8001918 <Error_Handler+0x28>)
 80018fc:	f7ff fcf5 	bl	80012ea <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001900:	2120      	movs	r1, #32
 8001902:	4806      	ldr	r0, [pc, #24]	; (800191c <Error_Handler+0x2c>)
 8001904:	f7fe ff26 	bl	8000754 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8001908:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800190c:	f7fe fc80 	bl	8000210 <HAL_Delay>
  /* USER CODE END Error_Handler_Debug */
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	08001d00 	.word	0x08001d00
 8001918:	20000080 	.word	0x20000080
 800191c:	40010800 	.word	0x40010800

08001920 <bitForPin>:
static I2C_HandleTypeDef * I2C;
static uint8_t i2caddr = 0;
/**
 * Bit number associated to a give Pin
 */
uint8_t bitForPin(uint8_t pin){
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
	return pin%8;
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	b2db      	uxtb	r3, r3
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <regForPin>:

/**
 * Register address, port dependent, for a given PIN
 */
uint8_t regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
 8001946:	460b      	mov	r3, r1
 8001948:	71bb      	strb	r3, [r7, #6]
 800194a:	4613      	mov	r3, r2
 800194c:	717b      	strb	r3, [r7, #5]
	return(pin<8) ?portAaddr:portBaddr;
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	2b07      	cmp	r3, #7
 8001952:	d801      	bhi.n	8001958 <regForPin+0x1c>
 8001954:	79bb      	ldrb	r3, [r7, #6]
 8001956:	e000      	b.n	800195a <regForPin+0x1e>
 8001958:	797b      	ldrb	r3, [r7, #5]
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <readRegister>:
}

/**
 * Reads a given register
 */
uint8_t readRegister(uint8_t addr){
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
//	Wire.beginTransmission(MCP23017_ADDRESS | i2caddr);
//	wiresend(addr);
//	Wire.endTransmission();
//	Wire.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
//	return wirerecv();
}
 800196e:	bf00      	nop
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr

0800197a <digitalRead>:
void pullUp(uint8_t p, uint8_t d) {
	updateRegisterBit(p,d,MCP23017_GPPUA,MCP23017_GPPUB);
}


uint8_t digitalRead(uint8_t pin) {
 800197a:	b580      	push	{r7, lr}
 800197c:	b084      	sub	sp, #16
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	71fb      	strb	r3, [r7, #7]
	uint8_t bit=bitForPin(pin);
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff ffca 	bl	8001920 <bitForPin>
 800198c:	4603      	mov	r3, r0
 800198e:	73fb      	strb	r3, [r7, #15]
	uint8_t regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	2213      	movs	r2, #19
 8001994:	2112      	movs	r1, #18
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff ffd0 	bl	800193c <regForPin>
 800199c:	4603      	mov	r3, r0
 800199e:	73bb      	strb	r3, [r7, #14]
	return (readRegister(regAddr) >> bit) & 0x1;
 80019a0:	7bbb      	ldrb	r3, [r7, #14]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff ffde 	bl	8001964 <readRegister>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	fa42 f303 	asr.w	r3, r2, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	b2db      	uxtb	r3, r3
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_MspInit+0x5c>)
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	4a14      	ldr	r2, [pc, #80]	; (8001a20 <HAL_MspInit+0x5c>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6193      	str	r3, [r2, #24]
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_MspInit+0x5c>)
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_MspInit+0x5c>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <HAL_MspInit+0x5c>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	61d3      	str	r3, [r2, #28]
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <HAL_MspInit+0x5c>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_MspInit+0x60>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <HAL_MspInit+0x60>)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a16:	bf00      	nop
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010000 	.word	0x40010000

08001a28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a23      	ldr	r2, [pc, #140]	; (8001ad0 <HAL_I2C_MspInit+0xa8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d13e      	bne.n	8001ac6 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a48:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <HAL_I2C_MspInit+0xac>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	4a21      	ldr	r2, [pc, #132]	; (8001ad4 <HAL_I2C_MspInit+0xac>)
 8001a4e:	f043 0308 	orr.w	r3, r3, #8
 8001a52:	6193      	str	r3, [r2, #24]
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <HAL_I2C_MspInit+0xac>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a66:	2312      	movs	r3, #18
 8001a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4619      	mov	r1, r3
 8001a74:	4818      	ldr	r0, [pc, #96]	; (8001ad8 <HAL_I2C_MspInit+0xb0>)
 8001a76:	f7fe fcfb 	bl	8000470 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001a7a:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_I2C_MspInit+0xb4>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	f043 0302 	orr.w	r3, r3, #2
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a90:	4a12      	ldr	r2, [pc, #72]	; (8001adc <HAL_I2C_MspInit+0xb4>)
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_I2C_MspInit+0xac>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <HAL_I2C_MspInit+0xac>)
 8001a9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aa0:	61d3      	str	r3, [r2, #28]
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_I2C_MspInit+0xac>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */
    __HAL_RCC_I2C1_FORCE_RESET();
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_I2C_MspInit+0xac>)
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <HAL_I2C_MspInit+0xac>)
 8001ab4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ab8:	6113      	str	r3, [r2, #16]
    __HAL_RCC_I2C1_RELEASE_RESET();
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_I2C_MspInit+0xac>)
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <HAL_I2C_MspInit+0xac>)
 8001ac0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ac4:	6113      	str	r3, [r2, #16]
  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ac6:	bf00      	nop
 8001ac8:	3728      	adds	r7, #40	; 0x28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40005400 	.word	0x40005400
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40010c00 	.word	0x40010c00
 8001adc:	40010000 	.word	0x40010000

08001ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a15      	ldr	r2, [pc, #84]	; (8001b50 <HAL_UART_MspInit+0x70>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d123      	bne.n	8001b48 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <HAL_UART_MspInit+0x74>)
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	4a13      	ldr	r2, [pc, #76]	; (8001b54 <HAL_UART_MspInit+0x74>)
 8001b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b0a:	61d3      	str	r3, [r2, #28]
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_UART_MspInit+0x74>)
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b18:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_UART_MspInit+0x74>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <HAL_UART_MspInit+0x74>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_UART_MspInit+0x74>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b30:	230c      	movs	r3, #12
 8001b32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3c:	f107 0310 	add.w	r3, r7, #16
 8001b40:	4619      	mov	r1, r3
 8001b42:	4805      	ldr	r0, [pc, #20]	; (8001b58 <HAL_UART_MspInit+0x78>)
 8001b44:	f7fe fc94 	bl	8000470 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b48:	bf00      	nop
 8001b4a:	3720      	adds	r7, #32
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40004400 	.word	0x40004400
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40010800 	.word	0x40010800

08001b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <HardFault_Handler+0x4>

08001b6e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <MemManage_Handler+0x4>

08001b74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <BusFault_Handler+0x4>

08001b7a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <UsageFault_Handler+0x4>

08001b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba8:	f7fe fb16 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001bb4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001bb8:	f7fe fde4 	bl	8000784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001bc4:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <SystemInit+0x5c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a14      	ldr	r2, [pc, #80]	; (8001c1c <SystemInit+0x5c>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <SystemInit+0x5c>)
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	4911      	ldr	r1, [pc, #68]	; (8001c1c <SystemInit+0x5c>)
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <SystemInit+0x60>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <SystemInit+0x5c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0e      	ldr	r2, [pc, #56]	; (8001c1c <SystemInit+0x5c>)
 8001be2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bea:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <SystemInit+0x5c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <SystemInit+0x5c>)
 8001bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <SystemInit+0x5c>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <SystemInit+0x5c>)
 8001bfe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001c02:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <SystemInit+0x5c>)
 8001c06:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001c0a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <SystemInit+0x64>)
 8001c0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c12:	609a      	str	r2, [r3, #8]
#endif 
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	f8ff0000 	.word	0xf8ff0000
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c28:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c2a:	e003      	b.n	8001c34 <LoopCopyDataInit>

08001c2c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001c2e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c30:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c32:	3104      	adds	r1, #4

08001c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c34:	480a      	ldr	r0, [pc, #40]	; (8001c60 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001c36:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001c38:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c3a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c3c:	d3f6      	bcc.n	8001c2c <CopyDataInit>
  ldr r2, =_sbss
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001c40:	e002      	b.n	8001c48 <LoopFillZerobss>

08001c42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c42:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001c44:	f842 3b04 	str.w	r3, [r2], #4

08001c48 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c4a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c4c:	d3f9      	bcc.n	8001c42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c4e:	f7ff ffb7 	bl	8001bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c52:	f000 f80f 	bl	8001c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c56:	f7ff fd05 	bl	8001664 <main>
  bx lr
 8001c5a:	4770      	bx	lr
  ldr r3, =_sidata
 8001c5c:	08001d28 	.word	0x08001d28
  ldr r0, =_sdata
 8001c60:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c64:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001c68:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001c6c:	200000c0 	.word	0x200000c0

08001c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c70:	e7fe      	b.n	8001c70 <ADC1_2_IRQHandler>
	...

08001c74 <__libc_init_array>:
 8001c74:	b570      	push	{r4, r5, r6, lr}
 8001c76:	2500      	movs	r5, #0
 8001c78:	4e0c      	ldr	r6, [pc, #48]	; (8001cac <__libc_init_array+0x38>)
 8001c7a:	4c0d      	ldr	r4, [pc, #52]	; (8001cb0 <__libc_init_array+0x3c>)
 8001c7c:	1ba4      	subs	r4, r4, r6
 8001c7e:	10a4      	asrs	r4, r4, #2
 8001c80:	42a5      	cmp	r5, r4
 8001c82:	d109      	bne.n	8001c98 <__libc_init_array+0x24>
 8001c84:	f000 f822 	bl	8001ccc <_init>
 8001c88:	2500      	movs	r5, #0
 8001c8a:	4e0a      	ldr	r6, [pc, #40]	; (8001cb4 <__libc_init_array+0x40>)
 8001c8c:	4c0a      	ldr	r4, [pc, #40]	; (8001cb8 <__libc_init_array+0x44>)
 8001c8e:	1ba4      	subs	r4, r4, r6
 8001c90:	10a4      	asrs	r4, r4, #2
 8001c92:	42a5      	cmp	r5, r4
 8001c94:	d105      	bne.n	8001ca2 <__libc_init_array+0x2e>
 8001c96:	bd70      	pop	{r4, r5, r6, pc}
 8001c98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c9c:	4798      	blx	r3
 8001c9e:	3501      	adds	r5, #1
 8001ca0:	e7ee      	b.n	8001c80 <__libc_init_array+0xc>
 8001ca2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ca6:	4798      	blx	r3
 8001ca8:	3501      	adds	r5, #1
 8001caa:	e7f2      	b.n	8001c92 <__libc_init_array+0x1e>
 8001cac:	08001d20 	.word	0x08001d20
 8001cb0:	08001d20 	.word	0x08001d20
 8001cb4:	08001d20 	.word	0x08001d20
 8001cb8:	08001d24 	.word	0x08001d24

08001cbc <memset>:
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4402      	add	r2, r0
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d100      	bne.n	8001cc6 <memset+0xa>
 8001cc4:	4770      	bx	lr
 8001cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8001cca:	e7f9      	b.n	8001cc0 <memset+0x4>

08001ccc <_init>:
 8001ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cce:	bf00      	nop
 8001cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cd2:	bc08      	pop	{r3}
 8001cd4:	469e      	mov	lr, r3
 8001cd6:	4770      	bx	lr

08001cd8 <_fini>:
 8001cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cda:	bf00      	nop
 8001cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cde:	bc08      	pop	{r3}
 8001ce0:	469e      	mov	lr, r3
 8001ce2:	4770      	bx	lr
